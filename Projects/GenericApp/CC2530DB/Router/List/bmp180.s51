///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:44:01 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Sour /
//                          ce\bmp180.c                                       /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wRo /
//                          uter.cfg" (-DCPU32MHZ -DROOT=__near_func          /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Projects\GenericApp\Source\bmp180.c" -D ZTOOL_P1  /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          xNV_RESTORE -D SERIAL_SUPPORTED=DEBUG -D          /
//                          SENSOR_TYPE=0X31 -D CHANLIST_C_R_E=25 -D          /
//                          ZDAPP_CONFIG_PAN_ID=0x0004 -D                     /
//                          ZigBee_C_R_E_Engineering -D ZigBee_C_R_E_IEEE -D  /
//                          xSENSOR_TYPE_R_E=0X01 -lC                         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Router\List\" -lA                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Router\List\" --diag_suppress Pe001,Pa010   /
//                          -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\Router\Obj\" -e --require_prototypes     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ /
//                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ /
//                          GenericApp\CC2530DB\..\SOURCE\" -I                /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Router\List\bmp180.s51                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME bmp180

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SHL
        EXTERN ?L_SUB
        EXTERN ?SL_SHR
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GT
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BMP180_Read_2B?relay
        FUNCTION ??BMP180_Read_2B?relay,0203H
        PUBLIC ??BMP180_Read_Pressure?relay
        FUNCTION ??BMP180_Read_Pressure?relay,0203H
        PUBLIC ??BMP180_Read_TEMP?relay
        FUNCTION ??BMP180_Read_TEMP?relay,0203H
        PUBLIC ??I2C2_Check_ack?relay
        FUNCTION ??I2C2_Check_ack?relay,0203H
        PUBLIC ??I2C2_GPIO_Config?relay
        FUNCTION ??I2C2_GPIO_Config?relay,0203H
        PUBLIC ??I2C2_Read_Byte?relay
        FUNCTION ??I2C2_Read_Byte?relay,0203H
        PUBLIC ??I2C2_Start?relay
        FUNCTION ??I2C2_Start?relay,0203H
        PUBLIC ??I2C2_Stop?relay
        FUNCTION ??I2C2_Stop?relay,0203H
        PUBLIC ??I2C2_Write?relay
        FUNCTION ??I2C2_Write?relay,0203H
        PUBLIC ??I2C2_Write_Byte?relay
        FUNCTION ??I2C2_Write_Byte?relay,0203H
        PUBLIC ??Init_BMP180?relay
        FUNCTION ??Init_BMP180?relay,0203H
        PUBLIC ??Multiple_Read_BMP180?relay
        FUNCTION ??Multiple_Read_BMP180?relay,0203H
        PUBLIC ??Sendack?relay
        FUNCTION ??Sendack?relay,0203H
        PUBLIC BMP180_Read_2B
        FUNCTION BMP180_Read_2B,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC BMP180_Read_Pressure
        FUNCTION BMP180_Read_Pressure,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC BMP180_Read_TEMP
        FUNCTION BMP180_Read_TEMP,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C2_Check_ack
        FUNCTION I2C2_Check_ack,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C2_GPIO_Config
        FUNCTION I2C2_GPIO_Config,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC I2C2_Read_Byte
        FUNCTION I2C2_Read_Byte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C2_Start
        FUNCTION I2C2_Start,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C2_Stop
        FUNCTION I2C2_Stop,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C2_Write
        FUNCTION I2C2_Write,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C2_Write_Byte
        FUNCTION I2C2_Write_Byte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Init_BMP180
        FUNCTION Init_BMP180,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Multiple_Read_BMP180
        FUNCTION Multiple_Read_BMP180,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 8, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBWEAK P1DIR
        PUBLIC Sendack
        FUNCTION Sendack,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_80000000
        PUBLIC ac1
        PUBLIC ac2
        PUBLIC ac3
        PUBLIC ac4
        PUBLIC ac5
        PUBLIC ac6
        PUBLIC b1
        PUBLIC b2
        PUBLIC mb
        PUBLIC mc
        PUBLIC md
        PUBLIC num
        PUBLIC num1
        PUBLIC num2
        PUBLIC num3
        PUBLIC num4
        PUBLIC num5
        PUBLIC num6
        PUBLIC num7
        PUBLIC num8
        PUBLIC pressure
        PUBLIC temperature
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
halMcuWaitUs        SYMBOL "halMcuWaitUs"
halMcuWaitMs        SYMBOL "halMcuWaitMs"
??halMcuWaitMs?relay SYMBOL "?relay", halMcuWaitMs
??halMcuWaitUs?relay SYMBOL "?relay", halMcuWaitUs
BMP180_Read_2B      SYMBOL "BMP180_Read_2B"
??BMP180_Read_2B?relay SYMBOL "?relay", BMP180_Read_2B
BMP180_Read_Pressure SYMBOL "BMP180_Read_Pressure"
??BMP180_Read_Pressure?relay SYMBOL "?relay", BMP180_Read_Pressure
BMP180_Read_TEMP    SYMBOL "BMP180_Read_TEMP"
??BMP180_Read_TEMP?relay SYMBOL "?relay", BMP180_Read_TEMP
I2C2_Check_ack      SYMBOL "I2C2_Check_ack"
??I2C2_Check_ack?relay SYMBOL "?relay", I2C2_Check_ack
I2C2_GPIO_Config    SYMBOL "I2C2_GPIO_Config"
??I2C2_GPIO_Config?relay SYMBOL "?relay", I2C2_GPIO_Config
I2C2_Read_Byte      SYMBOL "I2C2_Read_Byte"
??I2C2_Read_Byte?relay SYMBOL "?relay", I2C2_Read_Byte
I2C2_Start          SYMBOL "I2C2_Start"
??I2C2_Start?relay  SYMBOL "?relay", I2C2_Start
I2C2_Stop           SYMBOL "I2C2_Stop"
??I2C2_Stop?relay   SYMBOL "?relay", I2C2_Stop
I2C2_Write          SYMBOL "I2C2_Write"
??I2C2_Write?relay  SYMBOL "?relay", I2C2_Write
I2C2_Write_Byte     SYMBOL "I2C2_Write_Byte"
??I2C2_Write_Byte?relay SYMBOL "?relay", I2C2_Write_Byte
Init_BMP180         SYMBOL "Init_BMP180"
??Init_BMP180?relay SYMBOL "?relay", Init_BMP180
Multiple_Read_BMP180 SYMBOL "Multiple_Read_BMP180"
??Multiple_Read_BMP180?relay SYMBOL "?relay", Multiple_Read_BMP180
Sendack             SYMBOL "Sendack"
??Sendack?relay     SYMBOL "?relay", Sendack

        EXTERN halMcuWaitUs
        FUNCTION halMcuWaitUs,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halMcuWaitMs
        FUNCTION halMcuWaitMs,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??halMcuWaitMs?relay
        FUNCTION ??halMcuWaitMs?relay,00H
        EXTERN ??halMcuWaitUs?relay
        FUNCTION ??halMcuWaitUs?relay,00H

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Source\bmp180.c
//    1 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//    2 #include "bmp180.h"
//    3 #include "delay.h"
//    4 #define dev_addr_r  0xef//¶Á¼Ä´æÆ÷µØÖ·
//    5 #define BMP180_SLAVE_ADDR  0xee//Ð´¼Ä´æÆ÷µØÖ·
//    6 #define OSS 0
//    7 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    8 int16_t ac1;
ac1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    9 int16_t ac2;
ac2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   10 int16_t ac3;
ac3:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   11 uint16_t ac4;
ac4:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   12 uint16_t ac5;
ac5:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   13 uint16_t ac6;
ac6:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   14 int16_t b1;
b1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   15 int16_t b2;
b2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   16 int16_t mb;
mb:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   17 int16_t mc;
mc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   18 int16_t md;
md:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   19 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   20   short num = 8;
num:
        DS 2
        REQUIRE `?<Initializer for num>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   21 int16_t num1 = 4000;
num1:
        DS 2
        REQUIRE `?<Initializer for num1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   22 int16_t num2 = 2;
num2:
        DS 2
        REQUIRE `?<Initializer for num2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   23 uint16_t num3 = 32768;
num3:
        DS 2
        REQUIRE `?<Initializer for num3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   24 uint16_t num4 = 50000;
num4:
        DS 2
        REQUIRE `?<Initializer for num4>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   25 uint16_t num5 = 3038;
num5:
        DS 2
        REQUIRE `?<Initializer for num5>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   26 int16_t num6 = -7357;
num6:
        DS 2
        REQUIRE `?<Initializer for num6>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   27 int16_t num7 = 3791;
num7:
        DS 2
        REQUIRE `?<Initializer for num7>`
        REQUIRE __INIT_XDATA_I
//   28 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   29 int16_t num8 = 10;
num8:
        DS 2
        REQUIRE `?<Initializer for num8>`
        REQUIRE __INIT_XDATA_I
//   30 
//   31     

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   32 long pressure;
pressure:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   33 long temperature;
temperature:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   34     
//   35 void I2C2_GPIO_Config(void);
//   36 void I2C2_Start(void);
//   37 void I2C2_Stop(void);
//   38 void Sendack(uint8_t h);
//   39 uint8_t I2C2_Check_ack(void);
//   40 uint8_t I2C2_Write_Byte(uint8_t b);
//   41 uint8_t I2C2_Read_Byte(void);
//   42 void I2C2_Write(uint8_t Slave_Addr, uint8_t REG_Address,uint8_t REG_data);
//   43 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   44 void I2C2_GPIO_Config(void)
I2C2_GPIO_Config:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function I2C2_GPIO_Config
//   45 {
        ; Saved register size: 0
        ; Auto size: 0
//   46   P1DIR |= 0x18; //ÅäÖÃ1.3 1.4¶Ë¿ÚÎªÊä³öÄ£Ê½
        ORL     0xfe,#0x18
        MOV     A,0xfe
//   47 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE P1DIR
//   48 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   49 void I2C2_Start(void)
I2C2_Start:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function I2C2_Start
//   50 {   
        FUNCALL I2C2_Start, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Start, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   51   SDA_H;    
        SETB    0x90.4
//   52   SCL_H;   
        SETB    0x90.3
//   53   halMcuWaitUs(20);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   54   SDA_L;   
        CLR     0x90.4
//   55   halMcuWaitUs(20);//´óÓÚ4¸öÎ¢Ãë
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   56   SCL_L;
        CLR     0x90.3
//   57 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
//   58 
//   59 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 void I2C2_Stop(void)
I2C2_Stop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function I2C2_Stop
//   61 {
        FUNCALL I2C2_Stop, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Stop, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   62     
//   63   SCL_L;   
        CLR     0x90.3
//   64   SDA_L;   
        CLR     0x90.4
//   65   SCL_H;
        SETB    0x90.3
//   66   halMcuWaitUs(20);//´óÓÚ4¸öÎ¢Ãë  
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   67   SDA_H;
        SETB    0x90.4
//   68   halMcuWaitUs(20);//´óÓÚ4¸öÎ¢Ãë
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   69 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1
//   70 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   71 void Sendack(uint8_t h)
Sendack:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Sendack
//   72 {
        FUNCALL Sendack, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Sendack, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   73     
//   74   SCL_L;
        CLR     0x90.3
//   75   if(h==0)
        JNZ     ??Sendack_0
//   76     SDA_L;//ÓÐÓ¦´ðÐÅºÅ
        CLR     0x90.4
        SJMP    ??Sendack_1
//   77   else
//   78     SDA_H;    
??Sendack_0:
        SETB    0x90.4
//   79   halMcuWaitUs(20);
??Sendack_1:
        ; Setup parameters for call to function halMcuWaitUs
        LCALL   ?Subroutine5 & 0xFFFF
//   80   SCL_H;   
//   81   halMcuWaitUs(20);   
//   82   SCL_L;
??CrossCallReturnLabel_7:
        CLR     0x90.3
//   83 
//   84 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
//   85 
//   86 
//   87 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 uint8_t I2C2_Check_ack(void)
I2C2_Check_ack:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function I2C2_Check_ack
//   89 
//   90 {
        FUNCALL I2C2_Check_ack, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Check_ack, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Check_ack, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Check_ack, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   91   uint8_t count = 0;
        MOV     R6,#0x0
//   92   SCL_L;   
        CLR     0x90.3
//   93   SDA_H;//Òª¶ÁµÍµçÆ½ÐèÏÈÀ­¸ßÔÙ¶Á,·ñÔò¶Áµ½µÄÊÇ´íÎóÊý¾Ý,ºÜÖØÒª£¡
        SETB    0x90.4
//   94   halMcuWaitUs(20); 
        ; Setup parameters for call to function halMcuWaitUs
        LCALL   ?Subroutine5 & 0xFFFF
//   95   SCL_H;
//   96   halMcuWaitUs(20);  
//   97   
//   98   while(SDA_read)
??CrossCallReturnLabel_8:
        MOV     C,0x90.4
        JNC     ??I2C2_Check_ack_0
//   99   {
//  100     count++;
        INC     R6
//  101     if(count > 250)
        MOV     A,R6
        CLR     C
        SUBB    A,#-0x5
        JC      ??CrossCallReturnLabel_8
//  102     {
//  103       SCL_L;   
        CLR     0x90.3
//  104       halMcuWaitUs(20); 
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//  105       return 1;
        MOV     R1,#0x1
        SJMP    ??I2C2_Check_ack_1
//  106     }
//  107   }
//  108   SCL_L;   
??I2C2_Check_ack_0:
        CLR     0x90.3
//  109   halMcuWaitUs(20);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//  110   return 0;
        MOV     R1,#0x0
??I2C2_Check_ack_1:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock4
        REQUIRE _A_P1
//  111 
//  112 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
        SETB    0x90.3
        ; Setup parameters for call to function halMcuWaitUs
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  113 
//  114 
//  115 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 uint8_t I2C2_Write_Byte(uint8_t b)
I2C2_Write_Byte:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function I2C2_Write_Byte
//  117 
//  118 {
        FUNCALL I2C2_Write_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write_Byte, I2C2_Check_ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  119     
//  120   uint8_t e=8;
        MOV     R7,#0x8
        SJMP    ??I2C2_Write_Byte_0
//  121     
//  122   while(e--)
//  123   {
//  124         
//  125     SCL_L;
//  126     halMcuWaitUs(20);    
//  127     if(b&0x80)
//  128       SDA_H;      
//  129     else 
//  130       SDA_L;    
??I2C2_Write_Byte_1:
        CLR     0x90.4
//  131     halMcuWaitUs(20);
??I2C2_Write_Byte_2:
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//  132     b<<=1;      
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//  133     SCL_H;
        SETB    0x90.3
//  134     halMcuWaitUs(20);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
??I2C2_Write_Byte_0:
        MOV     ?V0 + 0,R7
        DEC     R7
        MOV     A,?V0 + 0
        CLR     0x90.3
        MOV     R2,#0x14
        MOV     R3,#0x0
        JZ      ??I2C2_Write_Byte_3
        LCALL   ??halMcuWaitUs?relay
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        JNC     ??I2C2_Write_Byte_1
        SETB    0x90.4
        SJMP    ??I2C2_Write_Byte_2
//  135   }
//  136     
//  137   SCL_L;
??I2C2_Write_Byte_3:
        LCALL   ??halMcuWaitUs?relay
//  138   halMcuWaitUs(20);   
//  139   return(I2C2_Check_ack());
        ; Setup parameters for call to function I2C2_Check_ack
        LCALL   ??I2C2_Check_ack?relay
        CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine1
//  140 
//  141 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  142 
//  143 
//  144 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 uint8_t I2C2_Read_Byte(void)
I2C2_Read_Byte:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function I2C2_Read_Byte
//  146 
//  147 {
        FUNCALL I2C2_Read_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Read_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Read_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Read_Byte, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  148     
//  149   uint8_t i=8;   
        MOV     R7,#0x8
//  150   uint8_t c=0;   
        MOV     R6,#0x0
//  151   SCL_H;
        SJMP    ??I2C2_Read_Byte_0
//  152   halMcuWaitUs(20);    
//  153   while(i--)
//  154   {       
//  155     c<<=1;        
//  156           
//  157     if(SDA_read)
//  158       c|=0x01;       
//  159     else c&=0xfe;   
??I2C2_Read_Byte_1:
        CLR     0xE0 /* A   */.0
??I2C2_Read_Byte_2:
        MOV     R6,A
//  160     halMcuWaitUs(20);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//  161     SCL_L;       
        CLR     0x90.3
//  162     halMcuWaitUs(20);     
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//  163     SCL_H; 
??I2C2_Read_Byte_0:
        SETB    0x90.3
//  164     halMcuWaitUs(20);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
        MOV     A,R7
        DEC     R7
        JZ      ??I2C2_Read_Byte_3
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     C,0x90.4
        JNC     ??I2C2_Read_Byte_1
        SETB    0xE0 /* A   */.0
        SJMP    ??I2C2_Read_Byte_2
//  165   }   
//  166   SCL_L;   
??I2C2_Read_Byte_3:
        CLR     0x90.3
//  167   return c;
        MOV     A,R6
        MOV     R1,A
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock10
        REQUIRE _A_P1
//  168 
//  169 }
//  170 
//  171 
//  172 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  173 void I2C2_Write(uint8_t Slave_Addr, uint8_t REG_Address,uint8_t REG_data)
I2C2_Write:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function I2C2_Write
//  174 {
        FUNCALL I2C2_Write, I2C2_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write, I2C2_Write_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write, I2C2_Write_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write, I2C2_Write_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C2_Write, I2C2_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R7,A
        MOV     A,R3
        MOV     R6,A
//  175     
//  176   I2C2_Start();
        ; Setup parameters for call to function I2C2_Start
        LCALL   ??I2C2_Start?relay
//  177     
//  178   I2C2_Write_Byte(Slave_Addr);
        ; Setup parameters for call to function I2C2_Write_Byte
        MOV     R1,?V0 + 0
        LCALL   ??I2C2_Write_Byte?relay
//  179     
//  180   I2C2_Write_Byte(REG_Address);
        ; Setup parameters for call to function I2C2_Write_Byte
        MOV     A,R7
        MOV     R1,A
        LCALL   ??I2C2_Write_Byte?relay
//  181     
//  182   I2C2_Write_Byte(REG_data);
        ; Setup parameters for call to function I2C2_Write_Byte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??I2C2_Write_Byte?relay
//  183     
//  184   I2C2_Stop();
        ; Setup parameters for call to function I2C2_Stop
        LCALL   ??I2C2_Stop?relay
//  185 
//  186 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock11
//  187 int16_t BMP180_Read_2B(uint8_t addr);
//  188 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  189 int16_t BMP180_Read_2B(uint8_t addr)
BMP180_Read_2B:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function BMP180_Read_2B
//  190 {
        FUNCALL BMP180_Read_2B, I2C2_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Write_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Write_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Write_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Read_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, Sendack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Read_Byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, Sendack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_2B, I2C2_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  191     uint8_t msb = 0, lsb = 0;
        MOV     R7,#0x0
        MOV     ?V0 + 0,R7
//  192     I2C2_Start();//ÆðÊ¼ÐÅºÅ
        ; Setup parameters for call to function I2C2_Start
        LCALL   ??I2C2_Start?relay
//  193     if(I2C2_Write_Byte(BMP180_SLAVE_ADDR) == 0)//·¢ËÍÉè±¸µØÖ·+Ð´ÐÅºÅ
        ; Setup parameters for call to function I2C2_Write_Byte
        MOV     R1,#-0x12
        LCALL   ??I2C2_Write_Byte?relay
        MOV     A,R1
        JNZ     ??BMP180_Read_2B_0
//  194     {
//  195       I2C2_Write_Byte(addr);//·¢ËÍ´æ´¢µ¥ÔªµØÖ·
        ; Setup parameters for call to function I2C2_Write_Byte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??I2C2_Write_Byte?relay
//  196       I2C2_Start();//ÆðÊ¼ÐÅºÅ
        ; Setup parameters for call to function I2C2_Start
        LCALL   ??I2C2_Start?relay
//  197       I2C2_Write_Byte(dev_addr_r);//·¢ËÍÉè±¸µØÖ·+¶ÁÐÅºÅ
        ; Setup parameters for call to function I2C2_Write_Byte
        MOV     R1,#-0x11
        LCALL   ??I2C2_Write_Byte?relay
//  198       msb=I2C2_Read_Byte();
        ; Setup parameters for call to function I2C2_Read_Byte
        LCALL   ??I2C2_Read_Byte?relay
        MOV     A,R1
        MOV     R7,A
//  199       Sendack(0);
        ; Setup parameters for call to function Sendack
        MOV     R1,#0x0
        LCALL   ??Sendack?relay
//  200       lsb=I2C2_Read_Byte();
        ; Setup parameters for call to function I2C2_Read_Byte
        LCALL   ??I2C2_Read_Byte?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  201       Sendack(1);
        ; Setup parameters for call to function Sendack
        MOV     R1,#0x1
        LCALL   ??Sendack?relay
//  202       I2C2_Stop();
        ; Setup parameters for call to function I2C2_Stop
        LCALL   ??I2C2_Stop?relay
//  203     }
//  204     return (short)((msb << 8) | lsb);
??BMP180_Read_2B_0:
        MOV     A,R7
        MOV     R2,?V0 + 0
        MOV     R3,A
        CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  205 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
//  206 long BMP180_Read_TEMP(void);             

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 long BMP180_Read_TEMP(void)
BMP180_Read_TEMP:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function BMP180_Read_TEMP
//  208 {
        FUNCALL BMP180_Read_TEMP, I2C2_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_TEMP, halMcuWaitMs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_TEMP, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  209     //int16_t temp;
//  210     I2C2_Write(BMP180_SLAVE_ADDR, 0xF4, 0x2E);
        ; Setup parameters for call to function I2C2_Write
        MOV     R3,#0x2e
        LCALL   ?Subroutine3 & 0xFFFF
//  211     halMcuWaitMs(200); 
//  212     return (long)BMP180_Read_2B(0xF6);
??CrossCallReturnLabel_0:
        MOV     A,R3
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  213 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock15
//  214 long BMP180_Read_Pressure(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  215 long BMP180_Read_Pressure(void)
BMP180_Read_Pressure:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function BMP180_Read_Pressure
//  216 {
        FUNCALL BMP180_Read_Pressure, I2C2_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_Pressure, halMcuWaitMs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP180_Read_Pressure, BMP180_Read_2B
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  217     //long pressure;
//  218     I2C2_Write(BMP180_SLAVE_ADDR, 0xF4, (0x34 + (OSS << 6)));
        ; Setup parameters for call to function I2C2_Write
        MOV     R3,#0x34
        LCALL   ?Subroutine3 & 0xFFFF
//  219     halMcuWaitMs(200);
//  220     return ((long)(BMP180_Read_2B(0xF6)&0x0000ffff));
??CrossCallReturnLabel_1:
        MOV     R4,#0x0
        MOV     R5,#0x0
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock16
//  221 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOV     R2,#-0xc
        MOV     R1,#-0x12
        LCALL   ??I2C2_Write?relay
        ; Setup parameters for call to function halMcuWaitMs
        ; Setup parameters for call to function halMcuWaitMs
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??halMcuWaitMs?relay
        ; Setup parameters for call to function BMP180_Read_2B
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0xa
        LCALL   ??BMP180_Read_2B?relay
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  222 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 void Init_BMP180(void)
Init_BMP180:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function Init_BMP180
//  224 {
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_BMP180, BMP180_Read_2B
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  225     I2C2_GPIO_Config();
        ORL     0xfe,#0x18
        MOV     A,0xfe
//  226     ac1 = BMP180_Read_2B(0xAA);
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x56
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#ac1
        LCALL   ?Subroutine6 & 0xFFFF
//  227     ac2 = BMP180_Read_2B(0xAC);
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x54
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#ac2
        LCALL   ?Subroutine6 & 0xFFFF
//  228     ac3 = BMP180_Read_2B(0xAE);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x52
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#ac3
        LCALL   ?Subroutine6 & 0xFFFF
//  229     ac4 = BMP180_Read_2B(0xB0);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x50
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#ac4
        LCALL   ?Subroutine6 & 0xFFFF
//  230     ac5 = BMP180_Read_2B(0xB2);
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x4e
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#ac5
        LCALL   ?Subroutine6 & 0xFFFF
//  231     ac6 = BMP180_Read_2B(0xB4);
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x4c
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#ac6
        LCALL   ?Subroutine6 & 0xFFFF
//  232     b1 =  BMP180_Read_2B(0xB6);
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x4a
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#b1
        LCALL   ?Subroutine6 & 0xFFFF
//  233     b2 =  BMP180_Read_2B(0xB8);
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x48
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#b2
        LCALL   ?Subroutine6 & 0xFFFF
//  234     mb =  BMP180_Read_2B(0xBA);
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x46
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#mb
        LCALL   ?Subroutine6 & 0xFFFF
//  235     mc =  BMP180_Read_2B(0xBC);
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x44
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#mc
        LCALL   ?Subroutine6 & 0xFFFF
//  236     md =  BMP180_Read_2B(0xBE);
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function BMP180_Read_2B
        MOV     R1,#-0x42
        LCALL   ??BMP180_Read_2B?relay
        MOV     DPTR,#md
        LCALL   ?Subroutine6 & 0xFFFF
//  237 }
??CrossCallReturnLabel_19:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock20
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond22) CFA_SP SP+-5
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond23) CFA_SP SP+-5
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond24) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond24) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond24) CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond25) CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond28) CFA_SP SP+-5
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond31) CFA_SP SP+-5
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
//  238 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  239 void Multiple_Read_BMP180()
Multiple_Read_BMP180:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function Multiple_Read_BMP180
//  240 { 
        FUNCALL Multiple_Read_BMP180, BMP180_Read_TEMP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_Read_BMP180, BMP180_Read_Pressure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  241     long ut;
//  242     long up;
//  243     long x1, x2, b5, b6, x3, b3, p,b7;
//  244     long xx1,xx2,bb4,bb3,bbb3;
//  245     unsigned long b4;
//  246     unsigned int tempe;
//  247     
//  248     ut = BMP180_Read_TEMP();
        ; Setup parameters for call to function BMP180_Read_TEMP
        LCALL   ??BMP180_Read_TEMP?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  249     up = BMP180_Read_Pressure();
        ; Setup parameters for call to function BMP180_Read_Pressure
        LCALL   ??BMP180_Read_Pressure?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
//  250 
//  251     xx1 = (int32_t)ut - ac6;
//  252     x1 = (xx1 * ac5) >> 15;
        MOV     DPTR,#ac6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 1
        SUBB    A,R1
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,#0x0
        MOV     ?V0 + 15,#0x0
        MOV     DPTR,#ac5
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     A,#0xf
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
//  253     xx2 = (int32_t)mc;
//  254     x2 = (xx2 << 11)/(x1 + md);
//  255     b5 = x1 + x2;
        PUSH    ?V0 + 12
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 13
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 14
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 15
        CFI CFA_SP SP+-4
        MOV     DPTR,#mc
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     A,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     DPTR,#md
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        POP     ?V0 + 7
        CFI CFA_SP SP+-3
        POP     ?V0 + 6
        CFI CFA_SP SP+-2
        POP     ?V0 + 5
        CFI CFA_SP SP+-1
        POP     ?V0 + 4
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
//  256     tempe = b5 + num;
//  257     temperature = tempe >> 4;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     DPTR,#num
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     ?V0 + 1,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     DPTR,#temperature
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  258     //temperature = ((b5 + 8) >> 4);
//  259 
//  260     //dat->press = BMP085_Read_Pressure();
//  261     b6 = b5 - num1;
        MOV     DPTR,#num1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_SUB
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  262     x1 = (b2 * (b6 * b6) >> 12) >> 11;
//  263     x2 = (ac2 * b6) >> 11;
//  264     x3 = x1 + x2;
//  265     bb3 = (int32_t)ac1;
//  266     bbb3 = ((bb3 * num2 * num2 + x3) << OSS) + num2;
//  267     b3 = bbb3 / num2 / num2;
//  268     x1 = (ac3 * b6) >> 13;
//  269     x2 = (b1 * ((b6 * b6) >> 12)) >> 16;
//  270     x3 = ((x1 + x2) + num2) >> 2;
//  271     bb4 = ((uint32_t)(x3 + num3));
//  272     b4 = (bb4 * ac4) >> 15;
        MOV     DPTR,#num2
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     DPTR,#ac3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     A,#0xd
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        PUSH    ?V0 + 4
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 5
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 6
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 7
        CFI CFA_SP SP+-4
        MOV     DPTR,#b1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        PUSH    ?V0 + 4
        CFI CFA_SP SP+-5
        PUSH    ?V0 + 5
        CFI CFA_SP SP+-6
        PUSH    ?V0 + 6
        CFI CFA_SP SP+-7
        PUSH    ?V0 + 7
        CFI CFA_SP SP+-8
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0xc
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
        POP     ?V0 + 7
        CFI CFA_SP SP+-7
        POP     ?V0 + 6
        CFI CFA_SP SP+-6
        POP     ?V0 + 5
        CFI CFA_SP SP+-5
        POP     ?V0 + 4
        CFI CFA_SP SP+-4
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        POP     ?V0 + 15
        CFI CFA_SP SP+-3
        POP     ?V0 + 14
        CFI CFA_SP SP+-2
        POP     ?V0 + 13
        CFI CFA_SP SP+-1
        POP     ?V0 + 12
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     A,#0x2
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
        MOV     DPTR,#num3
        MOVX    A,@DPTR
        ADD     A,?V0 + 12
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 13
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     DPTR,#ac4
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,#0x0
        MOV     ?V0 + 15,#0x0
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     A,#0xf
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
//  273     b7 = ((uint32_t)up - b3) * (num4 >> OSS);
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 9
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 10
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 11
        CFI CFA_SP SP+-4
        MOV     DPTR,#ac1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-5
        PUSH    ?V0 + 9
        CFI CFA_SP SP+-6
        PUSH    ?V0 + 10
        CFI CFA_SP SP+-7
        PUSH    ?V0 + 11
        CFI CFA_SP SP+-8
        MOV     DPTR,#b2
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     A,#0x17
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        POP     ?V0 + 15
        CFI CFA_SP SP+-7
        POP     ?V0 + 14
        CFI CFA_SP SP+-6
        POP     ?V0 + 13
        CFI CFA_SP SP+-5
        POP     ?V0 + 12
        CFI CFA_SP SP+-4
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        PUSH    ?V0 + 12
        CFI CFA_SP SP+-5
        PUSH    ?V0 + 13
        CFI CFA_SP SP+-6
        PUSH    ?V0 + 14
        CFI CFA_SP SP+-7
        PUSH    ?V0 + 15
        CFI CFA_SP SP+-8
        MOV     DPTR,#ac2
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 14,A
        MOV     ?V0 + 15,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     A,#0xb
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
        POP     ?V0 + 11
        CFI CFA_SP SP+-7
        POP     ?V0 + 10
        CFI CFA_SP SP+-6
        POP     ?V0 + 9
        CFI CFA_SP SP+-5
        POP     ?V0 + 8
        CFI CFA_SP SP+-4
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_ADD
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     ?V0 + 12,?V0 + 0
        MOV     ?V0 + 13,?V0 + 1
        MOV     ?V0 + 14,?V0 + 2
        MOV     ?V0 + 15,?V0 + 3
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        MOV     ?V0 + 12,?V0 + 0
        MOV     ?V0 + 13,?V0 + 1
        MOV     ?V0 + 14,?V0 + 2
        MOV     ?V0 + 15,?V0 + 3
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        POP     ?V0 + 15
        CFI CFA_SP SP+-3
        POP     ?V0 + 14
        CFI CFA_SP SP+-2
        POP     ?V0 + 13
        CFI CFA_SP SP+-1
        POP     ?V0 + 12
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_SUB
        MOV     DPTR,#num4
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
//  274     if( b7 < 0x80000000)
        MOV     DPTR,#__Constant_80000000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?UL_GT
        MOV     R0,#?V0 + 12
        JNC     ??Multiple_Read_BMP180_0
//  275         p = (b7 * num2) / b4 ;
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        SJMP    ??Multiple_Read_BMP180_1
//  276     else
//  277         p = (b7 / b4) * num2;
??Multiple_Read_BMP180_0:
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#(num2 + 1)
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
//  278     x1 = (p >> 8) * (p >> 8);
//  279     x1 = (x1 * num5) >> 16;
//  280     x2 = (num6 * p) >> 16;
//  281     pressure = p + ((x1 + x2 + num7) >> 4);
??Multiple_Read_BMP180_1:
        MOV     ?V0 + 4,?V0 + 12
        MOV     ?V0 + 5,?V0 + 13
        MOV     ?V0 + 6,?V0 + 14
        MOV     ?V0 + 7,?V0 + 15
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#num5
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     DPTR,#num6
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#num7
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     DPTR,#pressure
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
//  282 
//  283    // *press = pressure;
//  284    // *temp = t_integer;
//  285 }
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-4
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+-8
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-4
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+-4
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-4
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+-4
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num>`:
        DW 8

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num1>`:
        DW 4000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num2>`:
        DW 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num3>`:
        DW 32768

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num4>`:
        DW 50000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num5>`:
        DW 3038

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num6>`:
        DW -7357

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num7>`:
        DW 3791

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for num8>`:
        DW 10

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_80000000:
        DD 2147483648

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_GPIO_Config?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_GPIO_Config

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Sendack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Sendack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_Check_ack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_Check_ack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_Write_Byte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_Write_Byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_Read_Byte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_Read_Byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C2_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C2_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BMP180_Read_2B?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BMP180_Read_2B

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BMP180_Read_TEMP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BMP180_Read_TEMP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BMP180_Read_Pressure?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BMP180_Read_Pressure

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Init_BMP180?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Init_BMP180

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Multiple_Read_BMP180?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Multiple_Read_BMP180

        END
// 
// 1 471 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    18 bytes in segment XDATA_I
//    18 bytes in segment XDATA_ID
//     4 bytes in segment XDATA_ROM_C
//    30 bytes in segment XDATA_Z
// 
// 1 567 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 2 bytes shared)
//    48 bytes of XDATA memory
//
//Errors: none
//Warnings: none
