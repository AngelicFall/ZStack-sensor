///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:44:37 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Sour /
//                          ce\IIC.c                                          /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wRo /
//                          uter.cfg" (-DCPU32MHZ -DROOT=__near_func          /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Projects\GenericApp\Source\IIC.c" -D ZTOOL_P1 -D  /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          xNV_RESTORE -D SERIAL_SUPPORTED=DEBUG -D          /
//                          SENSOR_TYPE=0X31 -D CHANLIST_C_R_E=25 -D          /
//                          ZDAPP_CONFIG_PAN_ID=0x0004 -D                     /
//                          ZigBee_C_R_E_Engineering -D ZigBee_C_R_E_IEEE -D  /
//                          xSENSOR_TYPE_R_E=0X01 -lC                         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Router\List\" -lA                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Router\List\" --diag_suppress Pe001,Pa010   /
//                          -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\Router\Obj\" -e --require_prototypes     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ /
//                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ /
//                          GenericApp\CC2530DB\..\SOURCE\" -I                /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Router\List\IIC.s51                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME IIC

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?V0

        PUBLIC ??Ack?relay
        FUNCTION ??Ack?relay,0203H
        PUBLIC ??NoAck?relay
        FUNCTION ??NoAck?relay,0203H
        PUBLIC ??RdFromROM?relay
        FUNCTION ??RdFromROM?relay,0203H
        PUBLIC ??Read?relay
        FUNCTION ??Read?relay,0203H
        PUBLIC ??Send?relay
        FUNCTION ??Send?relay,0203H
        PUBLIC ??Single_Read_?relay
        FUNCTION ??Single_Read_?relay,0203H
        PUBLIC ??Single_Write_?relay
        FUNCTION ??Single_Write_?relay,0203H
        PUBLIC ??Start?relay
        FUNCTION ??Start?relay,0203H
        PUBLIC ??Stop?relay
        FUNCTION ??Stop?relay,0203H
        PUBLIC ??WrToROM?relay
        FUNCTION ??WrToROM?relay,0203H
        PUBLIC ??mDelay?relay
        FUNCTION ??mDelay?relay,0203H
        PUBLIC Ack
        FUNCTION Ack,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC NoAck
        FUNCTION NoAck,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC RdFromROM
        FUNCTION RdFromROM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC `Read`
        FUNCTION `Read`,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Send
        FUNCTION Send,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Single_Read_
        FUNCTION Single_Read_,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_Write_
        FUNCTION Single_Write_,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Start
        FUNCTION Start,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Stop
        FUNCTION Stop,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WrToROM
        FUNCTION WrToROM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBWEAK _A_P1
        PUBLIC mDelay
        FUNCTION mDelay,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Ack                 SYMBOL "Ack"
??Ack?relay         SYMBOL "?relay", Ack
NoAck               SYMBOL "NoAck"
??NoAck?relay       SYMBOL "?relay", NoAck
RdFromROM           SYMBOL "RdFromROM"
??RdFromROM?relay   SYMBOL "?relay", RdFromROM
`Read`              SYMBOL "Read"
??Read?relay        SYMBOL "?relay", `Read`
Send                SYMBOL "Send"
??Send?relay        SYMBOL "?relay", Send
Single_Read_        SYMBOL "Single_Read_"
??Single_Read_?relay SYMBOL "?relay", Single_Read_
Single_Write_       SYMBOL "Single_Write_"
??Single_Write_?relay SYMBOL "?relay", Single_Write_
Start               SYMBOL "Start"
??Start?relay       SYMBOL "?relay", Start
Stop                SYMBOL "Stop"
??Stop?relay        SYMBOL "?relay", Stop
WrToROM             SYMBOL "WrToROM"
??WrToROM?relay     SYMBOL "?relay", WrToROM
mDelay              SYMBOL "mDelay"
??mDelay?relay      SYMBOL "?relay", mDelay

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Source\IIC.c
//    1 /************************************************************
//    2 * ºê¶¨Òå			
//    3 
//    4 ************************************************************/
//    5 #include "IIC.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//    6 /************************************************************
//    7 
//    8 * ±äÁ¿³õÊ¼»¯												
//    9 ************************************************************/
//   10 void mDelay(unsigned j);
//   11 void Start(void);
//   12 void Stop(void);
//   13 void Ack(void);
//   14 void NoAck(void);
//   15 void Send(unsigned char Data);
//   16 unsigned char Read(void);
//   17 /************************************************************
//   18 * º¯Êý¹¦ÄÜ:ÑÓÊ±k msº¯Êý										
//   19 * Èë¿Ú²ÎÊý:k(1-128)											
//   20 * ³ö¿Ú²ÎÊý:ÎÞ	
//   21 * ×÷    Õß:												
//   22 **********************************************************/
//   23 //ÑÓÊ±³ÌÐò

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   24 void mDelay(unsigned j)
mDelay:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function mDelay
//   25 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??mDelay_0
//   26 	unsigned int i;
//   27 	for(;j>0;j--)
//   28 	{	for(i=0;i<500;i++)
??mDelay_1:
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
??mDelay_0:
        MOV     A,R2
        JNZ     ??mDelay_2
        MOV     A,R3
??mDelay_2:
        JNZ     ??mDelay_1
//   29 		{;}
//   30     }
//   31 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   32 //·¢ËÍÆðÊ¼Ìõ¼þ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   33 void Start(void)
Start:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Start
//   34 {IIC_DATAOUT;
        ; Saved register size: 0
        ; Auto size: 0
        LCALL   ?Subroutine6 & 0xFFFF
//   35 	SDA=1;
//   36 	SCL=1;
??CrossCallReturnLabel_4:
        SETB    0x90.3
//   37 	NOPS;
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
//   38 	SDA=0;
        CLR     0x90.4
//   39 	NOPS;
        SJMP    ??Subroutine11_0
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
        REQUIRE P1DIR
//   40 }
//   41 //·¢ËÍÍ£Ö¹Ìõ¼þ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   42 void Stop(void)
Stop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Stop
//   43 {IIC_DATAOUT;
        ; Saved register size: 0
        ; Auto size: 0
        LCALL   ?Subroutine8 & 0xFFFF
//   44 	SDA=0;
??CrossCallReturnLabel_9:
        CLR     0x90.4
//   45 	SCL=1;
        SETB    0x90.3
        CFI EndBlock cfiBlock2
//   46 	NOPS;
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine1
//   47 	SDA=1;
//   48 	NOPS;	
//   49 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        SETB    0x90.4
        CFI EndBlock cfiBlock3
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//   50 //Ó¦´ðÎ»

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   51 void Ack(void)
Ack:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function Ack
//   52 {IIC_DATAOUT;
        ; Saved register size: 0
        ; Auto size: 0
        LCALL   ?Subroutine8 & 0xFFFF
//   53 	SDA=0;
??CrossCallReturnLabel_10:
        CLR     0x90.4
        CFI EndBlock cfiBlock5
//   54 	NOPS;
        REQUIRE ?Subroutine0
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine0
//   55 	SCL=1;
//   56 	NOPS;
//   57 	SCL=0;
//   58 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        SETB    0x90.3
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        CLR     0x90.3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//   59 //·ÇÓ¦´ð

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 void NoAck(void)
NoAck:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function NoAck
//   61 {IIC_DATAOUT;
        ; Saved register size: 0
        ; Auto size: 0
        LCALL   ?Subroutine6 & 0xFFFF
//   62 	SDA=1;
//   63 	NOPS;
??CrossCallReturnLabel_5:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock7
        REQUIRE _A_P1
        REQUIRE P1DIR
//   64 	SCL=1;
//   65 	NOPS;
//   66 	SCL=0;	
//   67 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_6
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        ORL     0xfe,#0x18
        MOV     A,0xfe
        SETB    0x90.4
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
//   68 //·¢ËÍÊý¾Ý×Ó³ÌÐò£¬DataÎªÒª·¢ËÍµÄÊý¾Ýa

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   69 void Send(unsigned char Data)
Send:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Send
//   70 {	 unsigned char BitCounter=8;//Î»Êý¿ØÖÆ
        ; Saved register size: 0
        ; Auto size: 0
//   71 	 unsigned char temp;//ÖÐ¼ä±äÁ¿¿ØÖÆ
//   72         IIC_DATAOUT;
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     R2,#0x8
//   73 	do{ 
//   74 	 temp=Data;
//   75 	 SCL=0;
??Send_0:
        CLR     0x90.3
//   76 	 NOPS;
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
//   77 	 if((temp&0x0080)==0x0080)//Èç¹û×î¸ßÎ»ÊÇ1
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??Send_1
//   78 	    SDA=1;
        SETB    0x90.4
        SJMP    ??Send_2
//   79 	 else
//   80 		SDA=0;
??Send_1:
        CLR     0x90.4
//   81 	 SCL=1;
??Send_2:
        SETB    0x90.3
//   82 	 temp=Data<<1;//×óÒÆ
//   83 	 Data=temp;
        CLR     C
        RLC     A
        MOV     R1,A
//   84 	 BitCounter--;
//   85 	 }while(BitCounter);
        DEC     R2
        MOV     A,R2
        JNZ     ??Send_0
//   86 	 SCL=0;
        CLR     0x90.3
//   87          NOPS;
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock12
        REQUIRE _A_P1
        REQUIRE P1DIR
//   88          SDA=1;
//   89           NOPS;
//   90 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_12
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        ORL     0xfe,#0x18
        MOV     A,0xfe
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//   91 //¶ÁÒ»¸ö×Ö½ÚµÄÊý¾Ý£¬²¢·µ»Ø¸Ã×Ö½ÚµÄÖµ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   92 unsigned char Read(void)
`Read`:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function `Read`
//   93 {   unsigned char temp=0;
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R1,#0x0
//   94     unsigned char temp1=0;
//   95     unsigned BitCounter=8;
        MOV     R2,#0x8
        MOV     R3,#0x0
//   96    IIC_DATAOUT;
        LCALL   ?Subroutine6 & 0xFFFF
//   97 	SDA=1;
//   98         IIC_DATAIN ;
??CrossCallReturnLabel_6:
        ANL     0xf4,#0xef
        ANL     0xfe,#0xef
//   99 	do{	SCL=0;
??Read_0:
        CLR     0x90.3
//  100 		NOPS;
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
//  101 		SCL=1;
        SETB    0x90.3
//  102 		NOPS;
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
//  103 		if(SDA)
        MOV     C,0x90.4
        MOV     A,R1
        JNC     ??Read_1
//  104 		temp=temp|0x01;
        SETB    0xE0 /* A   */.0
        SJMP    ??Read_2
//  105 		else
//  106 		temp=temp&0xfe;
??Read_1:
        CLR     0xE0 /* A   */.0
??Read_2:
        MOV     R1,A
//  107 		if(BitCounter-1)
        MOV     A,#-0x1
        ADD     A,R2
        MOV     R4,A
        MOV     A,#-0x1
        ADDC    A,R3
        MOV     R5,A
        MOV     A,R4
        JNZ     ??Read_3
        MOV     A,R5
??Read_3:
        JZ      ??Read_4
//  108 		{	temp1=temp<<1;
//  109 			temp=temp1;
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R1,A
//  110 		}
//  111 		BitCounter--;
//  112 	  }while(BitCounter);
??Read_4:
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R2
        JNZ     ??Read_5
        MOV     A,R3
??Read_5:
        JNZ     ??Read_0
//  113          IIC_DATAOUT;
        LCALL   ?Subroutine8 & 0xFFFF
//  114 	return(temp);	
??CrossCallReturnLabel_12:
        LJMP    ?BRET
        CFI EndBlock cfiBlock18
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
//  115 }
//  116 //***************************************************
//  117 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  118 void Single_Write_(unsigned char REG_Address,unsigned char REG_data)
Single_Write_:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function Single_Write_
//  119 {
        FUNCALL Single_Write_, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  120     Start();                  //ÆðÊ¼ÐÅºÅ
        ; Setup parameters for call to function Start
        LCALL   ?Subroutine5 & 0xFFFF
//  121 #if(SENSOR_TYPE =='F')
//  122     Send(AddWr);  //·¢ËÍÉè±¸µØÖ·+Ð´ÐÅºÅ
//  123     Ack();
//  124 #endif
//  125     Send(REG_Address);    //ÄÚ²¿¼Ä´æÆ÷µØÖ·£¬Çë²Î¿¼ÖÐÎÄpdf 
//  126     Ack();
//  127    Send(REG_data);       //ÄÚ²¿¼Ä´æÆ÷Êý¾Ý£¬Çë²Î¿¼ÖÐÎÄpdf
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function Send
        MOV     A,R6
        LCALL   ?Subroutine7 & 0xFFFF
//  128    Ack();
//  129    Stop();                   //·¢ËÍÍ£Ö¹ÐÅºÅ
//  130    NOPS;
??CrossCallReturnLabel_7:
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        CFI EndBlock cfiBlock19
//  131 }
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20
//  132 
//  133 //********µ¥×Ö½Ú¶ÁÈ¡ÄÚ²¿¼Ä´æÆ÷*************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  134 unsigned char Single_Read_(unsigned char REG_Address)
Single_Read_:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function Single_Read_
//  135 {  unsigned char REG_data;
        FUNCALL Single_Read_, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_, `Read`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_, NoAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  136     Start();                          //ÆðÊ¼ÐÅºÅ
        ; Setup parameters for call to function Start
        LCALL   ?Subroutine5 & 0xFFFF
//  137 #if(SENSOR_TYPE =='F')
//  138     Send(AddWr);          //·¢ËÍÉè±¸µØÖ·+Ð´ÐÅºÅ
//  139     Ack();
//  140 #endif
//  141     Send(REG_Address);                   //·¢ËÍ´æ´¢µ¥ÔªµØÖ·£¬´Ó0¿ªÊ¼	
//  142     Ack();
//  143 #if(SENSOR_TYPE =='F')
//  144    Start();                          //ÆðÊ¼ÐÅºÅ
//  145    Send(AddRd);         //·¢ËÍÉè±¸µØÖ·+¶ÁÐÅºÅ
//  146    Ack();
//  147 #endif
//  148     REG_data=Read();              //¶Á³ö¼Ä´æÆ÷Êý¾Ý
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function Read
        LCALL   ??Read?relay
        MOV     A,R1
        MOV     R6,A
//  149     SCL=0;
        CLR     0x90.3
//  150 	 NoAck();  
        ; Setup parameters for call to function NoAck
        LCALL   ??NoAck?relay
//  151 	Stop();                           //Í£Ö¹ÐÅºÅ
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
//  152          NOPS;
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
//  153            NOPS;
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
//  154     return REG_data; 
        MOV     A,R6
        MOV     R1,A
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock21
        REQUIRE _A_P1
//  155 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ??Start?relay
        ; Setup parameters for call to function Send
        ; Setup parameters for call to function Send
        MOV     A,R7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
//  156 
//  157 //ÏòIICÖÐÐ´Êý¾Ý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  158 void WrToROM(unsigned char Data[],unsigned char Address,unsigned char Num)
WrToROM:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function WrToROM
//  159 {   unsigned char i;
        FUNCALL WrToROM, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WrToROM, mDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 4,R4
//  160     unsigned char *Pdata;
//  161     Pdata=Data;
//  162 	for(i=0;i<Num;i++)
        MOV     ?V0 + 2,#0x0
        SJMP    ??WrToROM_0
//  163 	{	Start();
??WrToROM_1:
        ; Setup parameters for call to function Start
        LCALL   ?Subroutine4 & 0xFFFF
//  164 		Send(AddWr);
//  165 		Ack();
//  166 		Send(Address+i);
//  167 		Ack();
//  168 		Send(*(Pdata+i));
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function Send
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    A,@DPTR
        LCALL   ?Subroutine7 & 0xFFFF
//  169 		Ack();
//  170 		Stop();
//  171 		mDelay(20);
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function mDelay
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??mDelay?relay
//  172 	}
        INC     ?V0 + 2
??WrToROM_0:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 4
        JC      ??WrToROM_1
        CFI EndBlock cfiBlock25
//  173 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function Stop
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
//  174 //	¶ÁÊý¾Ý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void RdFromROM(unsigned char Data[],unsigned char Address,unsigned char Num)
RdFromROM:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function RdFromROM
//  176 {
        FUNCALL RdFromROM, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Ack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, `Read`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, NoAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RdFromROM, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 4,R4
//  177 	unsigned char i;
//  178 	unsigned char *Pdata;
//  179 	Pdata=Data;
//  180 	for(i=0;i<Num;i++)
        MOV     ?V0 + 2,#0x0
        SJMP    ??RdFromROM_0
//  181 	{
//  182 		Start();
??RdFromROM_1:
        ; Setup parameters for call to function Start
        LCALL   ?Subroutine4 & 0xFFFF
//  183 		Send(AddWr);
//  184 		Ack();
//  185 		Send(Address+i);
//  186 		Ack();
//  187 		Start();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function Start
        LCALL   ??Start?relay
//  188 		Send(AddRd);
        ; Setup parameters for call to function Send
        MOV     R1,#-0x5f
        LCALL   ??Subroutine12_0 & 0xFFFF
//  189 		Ack();
//  190 		*(Pdata+i)=Read();
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function Read
        LCALL   ??Read?relay
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,R1
        MOVX    @DPTR,A
//  191 		SCL=0;
        CLR     0x90.3
//  192         NoAck();
        ; Setup parameters for call to function NoAck
        LCALL   ??NoAck?relay
//  193 		Stop();
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
//  194 	}
        INC     ?V0 + 2
??RdFromROM_0:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 4
        JC      ??RdFromROM_1
//  195 }
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock30
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL   ??Start?relay
        ; Setup parameters for call to function Send
        ; Setup parameters for call to function Send
        MOV     R1,#-0x60
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function Send
        ; Setup parameters for call to function Send
        MOV     A,?V0 + 2
        ADD     A,?V0 + 3
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_3
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_7
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_8
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_0
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_1
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     R1,A
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_2
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_3
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_7
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_8
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_0
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_1
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        LCALL   ??Send?relay
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        ; Setup parameters for call to function Ack
        LCALL   ??Ack?relay
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mDelay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mDelay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NoAck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NoAck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    `Read`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Write_?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Write_

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Read_?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Read_

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WrToROM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WrToROM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RdFromROM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RdFromROM

        END
// 
// 443 bytes in segment BANKED_CODE
//  66 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
// 
// 509 bytes of CODE memory
//   0 bytes of DATA memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
