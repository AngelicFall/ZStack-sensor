///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:43:51 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Components\stack\zdo\ZDN /
//                          wkMgr.c                                           /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wRo /
//                          uter.cfg" (-DCPU32MHZ -DROOT=__near_func          /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Components\stack\zdo\ZDNwkMgr.c" -D ZTOOL_P1 -D   /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          xNV_RESTORE -D SERIAL_SUPPORTED=DEBUG -D          /
//                          SENSOR_TYPE=0X31 -D CHANLIST_C_R_E=25 -D          /
//                          ZDAPP_CONFIG_PAN_ID=0x0004 -D                     /
//                          ZigBee_C_R_E_Engineering -D ZigBee_C_R_E_IEEE -D  /
//                          xSENSOR_TYPE_R_E=0X01 -lC                         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Router\List\" -lA                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Router\List\" --diag_suppress Pe001,Pa010   /
//                          -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\Router\Obj\" -e --require_prototypes     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ /
//                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ /
//                          GenericApp\CC2530DB\..\SOURCE\" -I                /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Router\List\ZDNwkMgr.s51                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDNwkMgr

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ZDNwkMgr_BuildAndSendUpdateNotify?relay,0203H
        FUNCTION ??ZDNwkMgr_CheckForChannelInterference?relay,0203H
        PUBLIC ??ZDNwkMgr_EDScanConfirmCB?relay
        FUNCTION ??ZDNwkMgr_EDScanConfirmCB?relay,0203H
        PUBLIC ??ZDNwkMgr_Init?relay
        FUNCTION ??ZDNwkMgr_Init?relay,0203H
        PUBLIC ??ZDNwkMgr_ProcessDataConfirm?relay
        FUNCTION ??ZDNwkMgr_ProcessDataConfirm?relay,0203H
        FUNCTION ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay,0203H
        PUBLIC ??ZDNwkMgr_ProcessServerDiscRsp?relay
        FUNCTION ??ZDNwkMgr_ProcessServerDiscRsp?relay,0203H
        PUBLIC ??ZDNwkMgr_ReportChannelInterference?relay
        FUNCTION ??ZDNwkMgr_ReportChannelInterference?relay,0203H
        PUBLIC ??ZDNwkMgr_SetNwkManagerAddr?relay
        FUNCTION ??ZDNwkMgr_SetNwkManagerAddr?relay,0203H
        PUBLIC ??ZDNwkMgr_event_loop?relay
        FUNCTION ??ZDNwkMgr_event_loop?relay,0203H
        PUBLIC NwkMgrStr_1
        PUBLIC NwkMgrStr_2
        PUBLIC NwkMgrStr_3
        PUBLIC NwkMgrStr_4
        FUNCTION ZDNwkMgr_BuildAndSendUpdateNotify,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        FUNCTION ZDNwkMgr_CheckForChannelInterference,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDNwkMgr_EDScanConfirmCB
        FUNCTION ZDNwkMgr_EDScanConfirmCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDNwkMgr_Init
        FUNCTION ZDNwkMgr_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        PUBLIC ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        PUBLIC ZDNwkMgr_MgmtNwkUpdateReq
        PUBLIC ZDNwkMgr_NewChannel
        PUBLIC ZDNwkMgr_NumUpdateNotifySent
        PUBLIC ZDNwkMgr_ProcessDataConfirm
        FUNCTION ZDNwkMgr_ProcessDataConfirm,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDNwkMgr_ProcessMgmtNwkUpdateReq,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDNwkMgr_ProcessServerDiscRsp
        FUNCTION ZDNwkMgr_ProcessServerDiscRsp,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDNwkMgr_ReportChannelInterference
        FUNCTION ZDNwkMgr_ReportChannelInterference,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDNwkMgr_SetNwkManagerAddr
        FUNCTION ZDNwkMgr_SetNwkManagerAddr,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDNwkMgr_TaskID
        PUBLIC ZDNwkMgr_TotalTransmissions
        PUBLIC ZDNwkMgr_TxFailures
        PUBLIC ZDNwkMgr_UpdateNotifyTimer
        PUBLIC ZDNwkMgr_WaitingForNotifyConfirm
        PUBLIC ZDNwkMgr_event_loop
        FUNCTION ZDNwkMgr_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_7fff800
        PUBLIC pZDNwkMgr_EDScanConfirmCB
        PUBLIC pZDNwkMgr_NetworkReportCB
        PUBLIC pZDNwkMgr_NetworkUpdateCB
        PUBLIC pZDNwkMgr_ProcessDataConfirm
        PUBLIC pZDNwkMgr_ReportChannelInterference
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
NLME_EDScanRequest  SYMBOL "NLME_EDScanRequest"
nwkTransmissionFailures SYMBOL "nwkTransmissionFailures"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
ZMacSetReq          SYMBOL "ZMacSetReq"
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
ZDO_ParseMgmtNwkUpdateReq SYMBOL "ZDO_ParseMgmtNwkUpdateReq"
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
ZDP_MgmtNwkUpdateNotify SYMBOL "ZDP_MgmtNwkUpdateNotify"
ZDO_ParseServerDiscRsp SYMBOL "ZDO_ParseServerDiscRsp"
printf              SYMBOL "printf"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_mem_free       SYMBOL "osal_mem_free"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
osal_memcpy         SYMBOL "osal_memcpy"
??NLME_EDScanRequest?relay SYMBOL "?relay", NLME_EDScanRequest
??NLME_SetUpdateID?relay SYMBOL "?relay", NLME_SetUpdateID
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
??ZDO_ParseMgmtNwkUpdateReq?relay SYMBOL "?relay", ZDO_ParseMgmtNwkUpdateReq
??ZDO_ParseServerDiscRsp?relay SYMBOL "?relay", ZDO_ParseServerDiscRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_MgmtNwkUpdateNotify?relay SYMBOL "?relay", ZDP_MgmtNwkUpdateNotify
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??nwkTransmissionFailures?relay SYMBOL "?relay", nwkTransmissionFailures
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??printf?relay      SYMBOL "?relay", printf
ZDNwkMgr_EDScanConfirmCB SYMBOL "ZDNwkMgr_EDScanConfirmCB"
??ZDNwkMgr_EDScanConfirmCB?relay SYMBOL "?relay", ZDNwkMgr_EDScanConfirmCB
ZDNwkMgr_Init       SYMBOL "ZDNwkMgr_Init"
??ZDNwkMgr_Init?relay SYMBOL "?relay", ZDNwkMgr_Init
ZDNwkMgr_ProcessDataConfirm SYMBOL "ZDNwkMgr_ProcessDataConfirm"
??ZDNwkMgr_ProcessDataConfirm?relay SYMBOL "?relay", ZDNwkMgr_ProcessDataConfirm
ZDNwkMgr_ProcessServerDiscRsp SYMBOL "ZDNwkMgr_ProcessServerDiscRsp"
??ZDNwkMgr_ProcessServerDiscRsp?relay SYMBOL "?relay", ZDNwkMgr_ProcessServerDiscRsp
ZDNwkMgr_ReportChannelInterference SYMBOL "ZDNwkMgr_ReportChannelInterference"
??ZDNwkMgr_ReportChannelInterference?relay SYMBOL "?relay", ZDNwkMgr_ReportChannelInterference
ZDNwkMgr_SetNwkManagerAddr SYMBOL "ZDNwkMgr_SetNwkManagerAddr"
??ZDNwkMgr_SetNwkManagerAddr?relay SYMBOL "?relay", ZDNwkMgr_SetNwkManagerAddr
ZDNwkMgr_event_loop SYMBOL "ZDNwkMgr_event_loop"
??ZDNwkMgr_event_loop?relay SYMBOL "?relay", ZDNwkMgr_event_loop

        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_EDScanRequest
        FUNCTION NLME_EDScanRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkTransmissionFailures
        FUNCTION nwkTransmissionFailures,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseMgmtNwkUpdateReq
        FUNCTION ZDO_ParseMgmtNwkUpdateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkUpdateNotify
        FUNCTION ZDP_MgmtNwkUpdateNotify,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseServerDiscRsp
        FUNCTION ZDO_ParseServerDiscRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??NLME_EDScanRequest?relay
        FUNCTION ??NLME_EDScanRequest?relay,00H
        EXTERN ??NLME_SetUpdateID?relay
        FUNCTION ??NLME_SetUpdateID?relay,00H
        EXTERN ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,00H
        EXTERN ??ZDO_ParseMgmtNwkUpdateReq?relay
        FUNCTION ??ZDO_ParseMgmtNwkUpdateReq?relay,00H
        EXTERN ??ZDO_ParseServerDiscRsp?relay
        FUNCTION ??ZDO_ParseServerDiscRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_MgmtNwkUpdateNotify?relay
        FUNCTION ??ZDP_MgmtNwkUpdateNotify?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??nwkTransmissionFailures?relay
        FUNCTION ??nwkTransmissionFailures?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H
        EXTERN _NIB

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\stack\zdo\ZDNwkMgr.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDNwkMgr.c
//    3   Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
//    4   Revision:       $Revision: 15716 $
//    5 
//    6   Description:    The ZigBee Network Manager.
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComdef.h"
//   49 #include "nwk_util.h"
//   50 #include "ZDApp.h"
//   51 #include "ZDObject.h"
//   52 #include "ZGlobals.h"
//   53 #include "ZDNwkMgr.h"
//   54 
//   55 #if defined( MT_ZDO_FUNC )
//   56   #include "MT_ZDO.h"
//   57 #endif
//   58   
//   59 #include "OnBoard.h"
//   60 
//   61 
//   62 /* HAL */
//   63 #include "hal_lcd.h"
//   64   
//   65 /******************************************************************************
//   66  * CONSTANTS
//   67  */
//   68 
//   69 #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
//   70 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   71 const char NwkMgrStr_1[]     = "NM-fail not hi";
NwkMgrStr_1:
        DB "NM-fail not hi"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   72 const char NwkMgrStr_2[]     = "NM-cur<last fail";
NwkMgrStr_2:
        DB "NM-cur<last fail"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   73 const char NwkMgrStr_3[]     = "NM-energy too hi";
NwkMgrStr_3:
        DB "NM-energy too hi"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   74 const char NwkMgrStr_4[]     = "NM-energy not up";
NwkMgrStr_4:
        DB "NM-energy not up"
//   75   
//   76 /******************************************************************************
//   77  * TYPEDEFS
//   78  */
//   79 
//   80 /*********************************************************************
//   81  * GLOBAL VARIABLES
//   82  */
//   83   
//   84 // Task ID for internal task/event processing. This variable will be
//   85 // received when ZDNwkMgr_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   86 uint8 ZDNwkMgr_TaskID = 0;
ZDNwkMgr_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   87 
//   88 /******************************************************************************
//   89  * LOCAL VARIABLES
//   90  */
//   91 
//   92 // Frequency Agility variables

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   93 uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   94 zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   95 uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
ZDNwkMgr_UpdateNotifyTimer:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   96 uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
ZDNwkMgr_NumUpdateNotifySent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   97 uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
ZDNwkMgr_WaitingForNotifyConfirm:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   98 uint16 ZDNwkMgr_TotalTransmissions;
ZDNwkMgr_TotalTransmissions:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   99 uint16 ZDNwkMgr_TxFailures;
ZDNwkMgr_TxFailures:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  100 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  101 ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
ZDNwkMgr_MgmtNwkUpdateReq:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  102   
//  103 #if defined ( NWK_MANAGER )
//  104 uint16 ZDNwkMgr_UpdateRequestTimer = 0;
//  105 uint8  ZDNwkMgr_LastChannelEnergy = 0;
//  106 uint16 ZDNwkMgr_LastChannelFailureRate = 0;
//  107 #endif // NWK_MANAGER
//  108 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  109 uint8 ZDNwkMgr_NewChannel;
ZDNwkMgr_NewChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  110 
//  111 // PAN ID Conflict variables
//  112 #if defined ( NWK_MANAGER )
//  113 uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
//  114 #endif // NWK_MANAGER
//  115 
//  116 /*********************************************************************
//  117  * GLOBAL FUNCTIONS
//  118  */
//  119 // Freguency Agility functions

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  120 void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
pZDNwkMgr_ReportChannelInterference:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  121 void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
pZDNwkMgr_ProcessDataConfirm:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  122 void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
pZDNwkMgr_EDScanConfirmCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 // PAN ID Conflict functions

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  125 void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
pZDNwkMgr_NetworkReportCB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  126 void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
pZDNwkMgr_NetworkUpdateCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  127 
//  128 /******************************************************************************
//  129  * LOCAL FUNCTIONS
//  130  */
//  131 
//  132 void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
//  133 void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
//  134 
//  135 // Frequency Agility functions
//  136 static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  137 
//  138 static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
//  139 static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
//  140 static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
//  141 static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
//  142 static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
//  143                                                uint16 totalTransmissions, uint16 txFailures,
//  144                                                ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
//  145 void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
//  146 void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
//  147 void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
//  148 
//  149 #if defined ( NWK_MANAGER )
//  150 static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
//  151 static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
//  152 #endif // NWK_MANAGER
//  153 
//  154 // PAN ID Conflict functions
//  155 #if defined ( NWK_MANAGER )
//  156 void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
//  157 void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
//  158 
//  159 void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
//  160 void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
//  161 #endif // NWK_MANAGER
//  162 
//  163 /*********************************************************************
//  164  * @fn      ZDNwkMgr_Init
//  165  *
//  166  * @brief   Initialization function for the Network Manager Task.
//  167  *          This is called during initialization and should contain
//  168  *          any application specific initialization (ie. hardware
//  169  *          initialization/setup, table initialization, power up
//  170  *          notificaiton ... ).
//  171  *
//  172  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  173  *                    used to send messages and set timers.
//  174  *
//  175  * @return  none
//  176  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 void ZDNwkMgr_Init( byte task_id )
ZDNwkMgr_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDNwkMgr_Init
//  178 {
        FUNCALL ZDNwkMgr_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  179   // Save the task ID
//  180   ZDNwkMgr_TaskID = task_id;
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    @DPTR,A
//  181 
//  182   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x15
        MOV     R3,#-0x80
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  183 
//  184   // Frequecy Agility initialization
//  185   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x38
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  186 #if defined ( NWK_MANAGER )
//  187   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
//  188 #endif // NWK_MANAGER
//  189 
//  190   pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
        MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
        MOV     A,#(??ZDNwkMgr_EDScanConfirmCB?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??ZDNwkMgr_EDScanConfirmCB?relay >> 8) & 0xff)
        MOVX    @DPTR,A
//  191   pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        MOV     A,#(??ZDNwkMgr_ProcessDataConfirm?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??ZDNwkMgr_ProcessDataConfirm?relay >> 8) & 0xff)
        MOVX    @DPTR,A
//  192   pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
        MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
        MOV     A,#(??ZDNwkMgr_ReportChannelInterference?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??ZDNwkMgr_ReportChannelInterference?relay >> 8) & 0xff)
        MOVX    @DPTR,A
//  193   
//  194   // PAN ID Conflict initialization
//  195 #if defined ( NWK_MANAGER )
//  196   pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
//  197   pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
//  198 #endif // NWK_MANAGER
//  199   
//  200   ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8)
        MOVX    @DPTR,A
//  201   ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock0
//  202 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  203 
//  204 /*********************************************************************
//  205  * @fn      ZDNwkMgr_event_loop
//  206  *
//  207  * @brief   Main event loop for the Network Manager task. This function
//  208  *          is called to process all events for the task.  Events
//  209  *          include timers, messages and any other user defined events.
//  210  *
//  211  * @param   task_id  - The OSAL assigned task ID.
//  212  * @param   events - events to process.  This is a bit map and can
//  213  *                   contain more than one event.
//  214  *
//  215  * @return  none
//  216  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  217 UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
ZDNwkMgr_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDNwkMgr_event_loop
//  218 {
        FUNCALL ZDNwkMgr_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_ProcessMgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_ProcessServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_CheckForChannelInterference
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, nwkTransmissionFailures
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_BuildAndSendUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, nwkTransmissionFailures
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  219   osal_event_hdr_t *msgPtr;
//  220   (void)task_id;  // Intentionally unreferenced parameter
//  221 
//  222   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDNwkMgr_event_loop_0
        MOV     A,R1
??ZDNwkMgr_event_loop_0:
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_1 & 0xFFFF
//  223   {
//  224     msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??ZDNwkMgr_event_loop_2
??ZDNwkMgr_event_loop_3:
        ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
//  225     while ( msgPtr )
//  226     {
//  227       switch ( msgPtr->event )
//  228       {
//  229         case ZDO_CB_MSG:
//  230           // ZDO sends the message that we registered for
//  231           ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay
//  232           break;
//  233          
//  234         case NM_CHANNEL_INTERFERE:
//  235           // NWK layer sends the message when it detectes Channel Interference
//  236           ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
//  237           break;
//  238    
//  239         case NM_ED_SCAN_CONFIRM:
//  240           // NWK layer sends the message when it receives an ED scan confirmation
//  241           ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
//  242           break;
//  243 #if defined ( NWK_MANAGER )
//  244         case ZDO_NETWORK_REPORT:
//  245           // NWK layer sends this message when it receives a Network Report message
//  246           ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
//  247           break;
//  248        
//  249         case ZDO_NETWORK_UPDATE:
//  250           // NKW layer sends this message when it receives a Network Update message
//  251           ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
//  252           break;
//  253 #endif // NWK_MANAGER         
//  254         default:
//  255           break;
//  256       }
//  257 
//  258       // Release the memory
//  259       osal_msg_deallocate( (uint8 *)msgPtr );
??ZDNwkMgr_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  260 
//  261       // Next
//  262       msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??ZDNwkMgr_event_loop_2:
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        JNZ     ??ZDNwkMgr_event_loop_5
        MOV     A,?V0 + 1
??ZDNwkMgr_event_loop_5:
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_6 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDNwkMgr_event_loop>_0`:
        DATA
        DB        0
        DB        3
        DB        49
        DW        ??ZDNwkMgr_event_loop_7
        DB        50
        DW        ??ZDNwkMgr_event_loop_8
        DB        211
        DW        ??ZDNwkMgr_event_loop_9
        DW        ??ZDNwkMgr_event_loop_4
        CODE
??ZDNwkMgr_event_loop_9:
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDNwkMgr_event_loop>_1`:
        DATA
        DW        0
        DW        2
        DW        56
        DW        ??ZDNwkMgr_event_loop_3
        DW        32789
        DW        ??ZDNwkMgr_event_loop_10
        DW        ??ZDNwkMgr_event_loop_4
        CODE
??ZDNwkMgr_event_loop_10:
        ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDNwkMgr_ProcessServerDiscRsp?relay
        SJMP    ??ZDNwkMgr_event_loop_4
??ZDNwkMgr_event_loop_7:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDNwkMgr_event_loop_4
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPTR,#(_NIB + 42)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#__Constant_7fff800
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??NLME_EDScanRequest?relay
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     DPTR,#ZDNwkMgr_TotalTransmissions
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     DPTR,#ZDNwkMgr_TxFailures
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,#-0x1
??ZDNwkMgr_event_loop_11:
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
        MOVX    @DPTR,A
        LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
??ZDNwkMgr_event_loop_8:
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDNwkMgr_event_loop_12
        ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDNwkMgr_CheckForChannelInterference?relay
        CLR     A
        SJMP    ??ZDNwkMgr_event_loop_11
??ZDNwkMgr_event_loop_12:
        ; Setup parameters for call to function nwkTransmissionFailures
        MOV     R1,#0x0
        LCALL   ??nwkTransmissionFailures?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     DPTR,#(_NIB + 107)
        LCALL   ?Subroutine8 & 0xFFFF
//  263     }
??CrossCallReturnLabel_4:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x32
        MOV     R5,#0x0
        MOV     R2,#0x8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
//  264     
//  265     // Return unprocessed events
//  266     return (events ^ SYS_EVENT_MSG);
??ZDNwkMgr_event_loop_6:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#-0x80
        XRL     A,R7
??ZDNwkMgr_event_loop_13:
        MOV     R3,A
        LJMP    ??ZDNwkMgr_event_loop_14 & 0xFFFF
//  267   }
//  268 
//  269   if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
??ZDNwkMgr_event_loop_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_event_loop_15
//  270   {       
//  271     // Switch channel
//  272     _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
        MOV     DPTR,#ZDNwkMgr_NewChannel
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 22)
        MOVX    @DPTR,A
//  273     ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#(ZDNwkMgr_NewChannel & 0xff)
        MOV     R3,#((ZDNwkMgr_NewChannel >> 8) & 0xff)
        MOV     R1,#-0x1f
        LCALL   ??ZMacSetReq?relay
//  274  
//  275     // Our Channel has been changed -- notify to save info into NV
//  276     ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay
//  277     
//  278     // Reset the total transmit count and the transmit failure counters
//  279     _NIB.nwkTotalTransmissions = 0;
        LCALL   ?Subroutine4 & 0xFFFF
//  280     nwkTransmissionFailures( TRUE );
//  281     
//  282     return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
??CrossCallReturnLabel_0:
        MOV     A,#0x1
??ZDNwkMgr_event_loop_16:
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDNwkMgr_event_loop_13
//  283   }
//  284 
//  285   if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
??ZDNwkMgr_event_loop_15:
        ANL     A,#0x2
        JZ      ??ZDNwkMgr_event_loop_17
//  286   {
//  287     // Update the Update Notify timer
//  288     if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_event_loop_18
        INC     DPTR
        MOVX    A,@DPTR
??ZDNwkMgr_event_loop_18:
        JZ      ??ZDNwkMgr_event_loop_19
//  289     {
//  290       ZDNwkMgr_UpdateNotifyTimer--;
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  291       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x60
        MOV     R5,#-0x16
        MOV     R2,#0x2
        LCALL   ?Subroutine7 & 0xFFFF
//  292     }
??CrossCallReturnLabel_12:
        SJMP    ??ZDNwkMgr_event_loop_20
//  293     else
//  294     {
//  295       ZDNwkMgr_NumUpdateNotifySent = 0;
??ZDNwkMgr_event_loop_19:
        CLR     A
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    @DPTR,A
//  296     }
//  297     
//  298     return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
??ZDNwkMgr_event_loop_20:
        MOV     A,#0x2
        SJMP    ??ZDNwkMgr_event_loop_16
//  299   }
//  300   
//  301 #if defined ( NWK_MANAGER )
//  302   if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
//  303   {
//  304     // Update the Update Request timer
//  305     if ( ZDNwkMgr_UpdateRequestTimer > 0 )
//  306     {
//  307       ZDNwkMgr_UpdateRequestTimer--;
//  308       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
//  309     }
//  310     
//  311     return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
//  312   }
//  313 #endif // NWK_MANAGER
//  314   
//  315   if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
??ZDNwkMgr_event_loop_17:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDNwkMgr_event_loop_21
//  316   {  
//  317     if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_event_loop_22
//  318     {
//  319       if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
//  320                                 ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 4)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??NLME_EDScanRequest?relay
        MOV     A,R1
        JNZ     ??ZDNwkMgr_event_loop_22
//  321       {
//  322         ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
        MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  323       }
//  324     }
//  325       
//  326     return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
??ZDNwkMgr_event_loop_22:
        MOV     A,#0x8
        SJMP    ??ZDNwkMgr_event_loop_16
//  327   }
//  328   
//  329   // Discard or make more handlers
//  330   return 0;
??ZDNwkMgr_event_loop_21:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??ZDNwkMgr_event_loop_14:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  331 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  332 
//  333 /*********************************************************************
//  334  * @fn      ZDNwkMgr_ProcessMsgCBs
//  335  *
//  336  * @brief   Process the incoming messages.
//  337  *
//  338  * @param   msgPtr - message to process
//  339  *
//  340  * @return  TRUE if message to be freed. FALSE otherwise.
//  341  */
//  342 static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
//  343 {
//  344   switch ( inMsg->clusterID )
//  345   {   
//  346     case Mgmt_NWK_Update_req:
//  347       ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
//  348       break;    
//  349 #if defined ( NWK_MANAGER )  
//  350     case Mgmt_NWK_Update_notify:
//  351       ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
//  352       break;
//  353 #endif // NWK_MANAGER
//  354     case Server_Discovery_rsp:
//  355       ZDNwkMgr_ProcessServerDiscRsp( inMsg );
//  356       break;
//  357       
//  358     default:
//  359       // Unknown message
//  360       break;
//  361   }
//  362 }
//  363 
//  364 /*********************************************************************
//  365  * Frequency Agility Routines
//  366  */
//  367 #if defined ( NWK_MANAGER )
//  368 /*********************************************************************
//  369  * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
//  370  *
//  371  * @brief       This function processes the incoming Management
//  372  *              Network Update notify.
//  373  *
//  374  * @param       pUpdateNotify - notify message
//  375  *
//  376  * @return      TRUE if message to be freed. FALSE otherwise.
//  377  */
//  378 static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
//  379 {
//  380   if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
//  381   {
//  382     ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
//  383     if ( pNotify )
//  384     {
//  385       ZDNwkMgr_CheckForChannelChange( pNotify );
//  386 
//  387       osal_mem_free( pNotify );
//  388     }
//  389   }
//  390 }
//  391 
//  392 /*********************************************************************
//  393  * @fn          ZDNwkMgr_CheckForChannelChange
//  394  *
//  395  * @brief       This function processes the incoming Management Network
//  396  *              Update notify and starts an Update Request if a channel
//  397  *              change is needed.
//  398  *
//  399  * @param       pUpdateNotify - notify message
//  400  *
//  401  * @return      none
//  402  */
//  403 static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
//  404 {
//  405   uint8  i;
//  406   uint16 failureRate;
//  407   uint8  lowestEnergyIndex;
//  408   uint8  lowestEnergyValue = 0xFF;
//  409       
//  410   // If any device has more than 50% transmission failures, a channel
//  411   // change should be considered
//  412   failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
//  413   if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
//  414   {
//  415 #if defined ( SERIAL_DEBUG_SUPPORTED )
//  416     printf("%s\n", (char*)NwkMgrStr_1);
//  417     printf( ": %u %u\n", failureRate, ZDNWKMGR_CC_TX_FAILURE);
//  418 #endif
//  419     return;
//  420   }
//  421 
//  422   // If the current failure rate is higher than the last failure rate,
//  423   // a channel change should be considered
//  424   if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
//  425   {
//  426 #if defined ( SERIAL_DEBUG_SUPPORTED )
//  427     printf("%s\n", NwkMgrStr_2);
//  428     printf( ": %u %u\n", failureRate,  ZDNwkMgr_LastChannelFailureRate);
//  429 #endif
//  430     return;
//  431   }
//  432   
//  433   // Select a single channel based on the Mgmt_NWK_Update_notify based on
//  434   // the lowest energy. This is the proposed new channel. 
//  435   for ( i = 0; i < pNotify->listCount; i++ )
//  436   {
//  437     if ( pNotify->energyValues[i] < lowestEnergyValue )
//  438     {
//  439       lowestEnergyIndex = i;
//  440       lowestEnergyValue = pNotify->energyValues[i];
//  441     }
//  442   }
//  443       
//  444   // If this new channel does not have an energy level below an acceptable
//  445   // threshold, a channel change should not be done.
//  446   if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
//  447   {
//  448 #if defined ( SERIAL_DEBUG_SUPPORTED )
//  449     printf("%s\n", NwkMgrStr_3);
//  450     printf(": %u %u\n", lowestEnergyValue, ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL);
//  451 #endif
//  452     return;
//  453   }
//  454 
//  455   // Channel change should be done -- find out the new active channel
//  456   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
//  457   {
//  458     if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
//  459     {
//  460       if ( lowestEnergyIndex == 0 )
//  461         break;
//  462       lowestEnergyIndex--;
//  463     }
//  464   }
//  465   
//  466   if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
//  467   {
//  468     uint32 channelMask;
//  469     zAddrType_t dstAddr;
//  470     
//  471     // The new channel
//  472     ZDNwkMgr_NewChannel = i;
//  473         
//  474     // Prior to changing channels, the network manager should store the 
//  475     // energy scan value as the last energy scan value and the failure 
//  476     // rate from the existing channel as the last failure rate.  These 
//  477     // values are useful to allow comparison of the failure rate and energy
//  478     // level on the previous channel to evaluate if the network is causing
//  479     // its own interference.
//  480     ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
//  481     ZDNwkMgr_LastChannelFailureRate = failureRate;
//  482        
//  483     // The network manager should broadcast a Mgmt_NWK_Update_req notifying
//  484     // devices of the new channel.  The broadcast shall be to all routers 
//  485     // and coordinator.
//  486     dstAddr.addrMode = AddrBroadcast;
//  487     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
//  488     channelMask = (uint32)1 << i;
//  489         
//  490     // Increment the nwkUpdateId parameter and set the updateID in the beacon
//  491     NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
//  492     
//  493     ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
//  494         
//  495     // The network manager shall set a timer based on the value of 
//  496     // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
//  497     // channels and shall not issue another such command until this 
//  498     // timer expires.  
//  499     ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
//  500     osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
//  501                   
//  502     // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
//  503     // the local network manager shall set a timer equal to the 
//  504     // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
//  505     // expiration of this timer.  NOTE: since we won't recevied our own
//  506     // broadcasted Update Request, we start the channel change timer here.  
//  507     osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
//  508                         ZDNWKMGR_BCAST_DELIVERY_TIME );
//  509   }
//  510 }
//  511 #endif  // NWK_MANAGER
//  512 
//  513 /*********************************************************************
//  514  * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
//  515  *
//  516  * @brief       This function processes the incoming Management
//  517  *              Network Update request and starts the request (if needed).
//  518  *
//  519  * @param       Request message
//  520  *
//  521  * @return      none
//  522  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  523 static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
ZDNwkMgr_ProcessMgmtNwkUpdateReq:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
//  524 {
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDO_ParseMgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDNwkMgr_SetNwkManagerAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDP_MgmtNwkUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  525   ZDO_MgmtNwkUpdateReq_t Req;
//  526   
//  527   ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
        ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseMgmtNwkUpdateReq?relay
//  528    
//  529   if ( Req.scanDuration <= 0x05 )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 2
        ADD     A,#0xf
        MOV     R6,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R1
        CLR     C
        SUBB    A,#0x6
        JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
//  530   {
//  531     // Request is to scan over channelMask. The result will be reported by Confirm   
//  532     if ( ( !inMsg->wasBroadcast )                     && 
//  533          ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
//  534          ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        DEC     A
        CLR     C
        SUBB    A,#0x5
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  535     {
//  536       if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??NLME_EDScanRequest?relay
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  537       {
//  538         // Save off the information to be used for the notify
//  539         ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        MOVX    @DPTR,A
//  540         ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine3 & 0xFFFF
//  541         
//  542         Req.scanCount--;
??CrossCallReturnLabel_24:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  543         
//  544         // Save off scan info for the subsequent scans
//  545         ZDNwkMgr_MgmtNwkUpdateReq = Req;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,#(ZDNwkMgr_MgmtNwkUpdateReq & 0xff)
        MOV     R5,#((ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff)
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  546       }
//  547     }
//  548   }
//  549   else if ( Req.scanDuration == 0xFE )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
        MOV     A,#-0x2
        XRL     A,R1
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
//  550   {
//  551     // Request is to change Channel. The command provide a new active
//  552     // channel as a single channel in the channelMask.
//  553     if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_8:
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  554     {
//  555       uint8 i;
//  556       
//  557       // Set update ID in the Beacon
//  558       NLME_SetUpdateID(Req.nwkUpdateId); 
        ; Setup parameters for call to function NLME_SetUpdateID
        LCALL   ??NLME_SetUpdateID?relay
//  559       
//  560       // Find out the new active channel
//  561       for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R2,#0x0
//  562       {
//  563         if ( ( (uint32)1 << i ) & Req.channelMask )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
//  564         {
//  565           break;
//  566         }
//  567       }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
//  568 
//  569       if ( _NIB.nwkLogicalChannel != i )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
        MOV     DPTR,#(_NIB + 22)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  570       {
//  571         ZDNwkMgr_NewChannel = i;
        MOV     A,R2
        MOV     DPTR,#ZDNwkMgr_NewChannel
        MOVX    @DPTR,A
//  572           
//  573         // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
//  574         // the local network manager shall set a timer equal to the 
//  575         // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
//  576         // expiration of this timer.  Each node shall also increment the 
//  577         // nwkUpdateId parameter and also reset the total transmit count 
//  578         // and the transmit failure counters.  
//  579         osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
//  580                             ZDNWKMGR_BCAST_DELIVERY_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#(_NIB + 7)
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     R4,A
        MOV     R5,B
        MOV     R2,#0x1
        LCALL   ?Subroutine7 & 0xFFFF
//  581       }
//  582     }
//  583   }
??CrossCallReturnLabel_13:
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  584   else if ( Req.scanDuration == 0xFF )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
        MOV     A,#-0x1
        XRL     A,R1
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
//  585   {
//  586     // Request is to change apsChannelMask and nwkManagerAddr
//  587     if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_9:
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  588     {
//  589       NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
        ; Setup parameters for call to function NLME_SetUpdateID
        LCALL   ??NLME_SetUpdateID?relay
//  590        
//  591       if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPH,#(((_NIB + 36) >> 8) & 0xff)
        MOV     DPL,#((_NIB + 36) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
//  592       {
//  593         _NIB.channelList = Req.channelMask;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#(_NIB + 36)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  594       
//  595         // Our Channel List has been changed -- notify to save info into NV
//  596         ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay
//  597       }
//  598     
//  599       ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
        ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  600     }
//  601   }
??CrossCallReturnLabel_6:
        SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
//  602   else // 0x06-0xFD
//  603   {
//  604     // Request is invalid
//  605     if ( !inMsg->wasBroadcast )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
//  606     {
//  607       ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine3 & 0xFFFF
//  608       ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
//  609                                ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
??CrossCallReturnLabel_25:
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#__Constant_0
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R5,#0x0
        MOV     R4,#-0x80
        MOV     R2,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff)
        MOV     R3,#((ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  610     }
//  611   }
//  612 }
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     A,?V0 + 2
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#(_NIB + 109)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  613 
//  614 /*********************************************************************
//  615  * @fn      ZDNwkMgr_ProcessServerDiscRsp
//  616  *
//  617  * @brief   Process the incoming System Server Discovery Response
//  618  *
//  619  * @param   pRsp - Structure containing Server Discovery response
//  620  *
//  621  * @return  none
//  622  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  623 void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
ZDNwkMgr_ProcessServerDiscRsp:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ZDNwkMgr_ProcessServerDiscRsp
//  624 {
        FUNCALL ZDNwkMgr_ProcessServerDiscRsp, ZDO_ParseServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessServerDiscRsp, ZDNwkMgr_SetNwkManagerAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  625   ZDO_ServerDiscRsp_t Rsp;
//  626   
//  627   ZDO_ParseServerDiscRsp( inMsg, &Rsp );
        ; Setup parameters for call to function ZDO_ParseServerDiscRsp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseServerDiscRsp?relay
//  628   
//  629   if ( Rsp.status == ZSuccess )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_7
//  630   {
//  631     // Is the Network Manager bit set in the response?
//  632     if ( Rsp.serverMask & NETWORK_MANAGER )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x40
        JZ      ??CrossCallReturnLabel_7
//  633     {
//  634       // Set the Remote Device's NWK Address as the Network Manager Address
//  635       ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
        ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
//  636     }
//  637   }
//  638 }
??CrossCallReturnLabel_7:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
//  639 
//  640 /*********************************************************************
//  641  * @fn          ZDNwkMgr_ProcessChannelInterference
//  642  *
//  643  * @brief       This function processes the incoming Channel Interference
//  644  *              detection message and sends out a notify (if needed).
//  645  *
//  646  * @param       pChannelInterference - interference message
//  647  *
//  648  * @return      none
//  649  */
//  650 static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
//  651 {
//  652   // To avoid a device with communication problems from constantly 
//  653   // sending reports to the network manager, the device should not 
//  654   // send a Mgmt_NWK_Update_notify more than 4 times per hour.
//  655   if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
//  656   {
//  657     // Conduct an energy scan on all channels.
//  658     if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
//  659     {
//  660       // Save the counters for the Update Notify message to be sent
//  661       ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
//  662       ZDNwkMgr_TxFailures = pChanInterference->txFailures;
//  663 
//  664       // Mark scan as channel inetrference check
//  665       ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
//  666     }
//  667   }
//  668 }
//  669 
//  670 /*********************************************************************
//  671  * @fn          ZDNwkMgr_ProcessEDScanConfirm
//  672  *
//  673  * @brief       This function processes the incoming ED Scan Confirm
//  674  *              message and sends out a notify (if needed).
//  675  *
//  676  * @param       pEDScanConfirm - SD Scan Confirmation message
//  677  *
//  678  * @return      none
//  679  */
//  680 static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
//  681 { 
//  682   if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
//  683   {
//  684     // Confirm to scan all channels for channel interference check
//  685     ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
//  686     
//  687     ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
//  688   }
//  689   else
//  690   {
//  691     // Confirm to the requested scan
//  692     uint16 txFailures = nwkTransmissionFailures( FALSE );
//  693     
//  694     ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
//  695                                        &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
//  696                                        _NIB.nwkTotalTransmissions, txFailures, 
//  697                                        pEDScanConfirm, AF_TX_OPTIONS_NONE );
//  698     // More scans needed?
//  699     if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
//  700     {
//  701       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
//  702     }
//  703   }
//  704 }
//  705 
//  706 /*********************************************************************
//  707  * @fn          ZDNwkMgr_CheckForChannelInterference
//  708  *
//  709  * @brief       This function processes the incoming ED Scan Confirm
//  710  *              message and sends out an Update Notify (if needed).
//  711  *
//  712  * @param       pEDScanConfirm - SD Scan Confirmation message
//  713  *
//  714  * @return      none
//  715  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  716 static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
ZDNwkMgr_CheckForChannelInterference:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function ZDNwkMgr_CheckForChannelInterference
//  717 {
        FUNCALL ZDNwkMgr_CheckForChannelInterference, ZDNwkMgr_BuildAndSendUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  718   uint8 i;
//  719   uint8 channelEnergy = 0;
        MOV     ?V0 + 4,#0x0
//  720   uint8 energyIncreased = FALSE;
//  721     
//  722   // Get the current channel energy
//  723   if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
        MOV     DPTR,#(_NIB + 22)
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     A,R3
        ADDC    A,#0x0
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 2
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 8
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 8
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_CheckForChannelInterference_0
//  724   {
//  725     channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
        LCALL   ?Subroutine5 & 0xFFFF
//  726   }
??CrossCallReturnLabel_17:
        MOV     ?V0 + 4,A
//  727     
//  728   // If this energy scan does not indicate higher energy on the current 
//  729   // channel then other channels, no action is taken. The device should 
//  730   // continue to operate as normal and the message counters are not reset.
//  731   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
??ZDNwkMgr_CheckForChannelInterference_0:
        MOV     R4,#0x0
        SJMP    ??ZDNwkMgr_CheckForChannelInterference_1
??ZDNwkMgr_CheckForChannelInterference_2:
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x1b
        JNC     ??ZDNwkMgr_CheckForChannelInterference_3
//  732   {
//  733     if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
//  734          ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
??ZDNwkMgr_CheckForChannelInterference_1:
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,R4
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 8
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 8
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_CheckForChannelInterference_2
        MOV     ?V0 + 2,R4
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_18:
        CLR     C
        SUBB    A,?V0 + 4
        JNC     ??ZDNwkMgr_CheckForChannelInterference_2
//  735     {
//  736       energyIncreased = TRUE;
//  737       break;
//  738     }
//  739   }
//  740     
//  741   // If the energy scan does indicate increased energy on the channel
//  742   // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
//  743   // Manager to indicate interference is present.
//  744   if ( energyIncreased )
//  745   {
//  746     // Send a Management Network Update notify to the Network Manager
//  747     ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
        MOV     DPTR,#(_NIB + 105)
        LCALL   ??Subroutine15_0 & 0xFFFF
//  748     ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
//  749                                        ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
//  750                                        pEDScanConfirm, AF_MSG_ACK_REQUEST );
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     ?V0 + 2,#0x10
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPTR,#ZDNwkMgr_TxFailures
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPTR,#ZDNwkMgr_TotalTransmissions
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R1,#0x0
        LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  751     ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
        MOV     A,#0x1
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOVX    @DPTR,A
//  752       
//  753     if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_14
//  754     {
//  755       // First notify message sent within this hour. Start the Update Notify timer.
//  756       ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOV     A,#0x3c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  757       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x60
        MOV     R5,#-0x16
        MOV     R2,#0x2
        MOV     R3,A
        LCALL   ??Subroutine13_0 & 0xFFFF
//  758     }
//  759     
//  760     ZDNwkMgr_NumUpdateNotifySent++;
??CrossCallReturnLabel_14:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        SJMP    ??ZDNwkMgr_CheckForChannelInterference_4
//  761   }
//  762 #if defined ( SERIAL_DEBUG_SUPPORTED )
//  763   else
//  764   {
//  765     printf("%s\n", (char*)NwkMgrStr_4);
??ZDNwkMgr_CheckForChannelInterference_3:
        ; Setup parameters for call to function printf
        MOV     ?V0 + 0,#(NwkMgrStr_4 & 0xff)
        MOV     ?V0 + 1,#((NwkMgrStr_4 >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R2,#(`?<Constant "%s\\n">` & 0xff)
        MOV     R3,#((`?<Constant "%s\\n">` >> 8) & 0xff)
        LCALL   ??printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  766     printf(": %u %u\n", _NIB.nwkLogicalChannel, channelEnergy);
        ; Setup parameters for call to function printf
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     DPTR,#(_NIB + 22)
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,#(`?<Constant ": %u %u\\n">` & 0xff)
        MOV     R3,#((`?<Constant ": %u %u\\n">` >> 8) & 0xff)
        LCALL   ??printf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  767   }
//  768 #endif
//  769 }
??ZDNwkMgr_CheckForChannelInterference_4:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff)
        MOV     R3,#((ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff)
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
//  770 
//  771 /*********************************************************************
//  772  * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
//  773  *
//  774  * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
//  775  *              function sends a unicast message.
//  776  *
//  777  * @param       TransSeq - transaction sequence number
//  778  * @param       dstAddr - destination address of the message
//  779  * @param       pEDScanConfirm - update notify info
//  780  *
//  781  * @return      afStatus_t
//  782  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  783 static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
ZDNwkMgr_BuildAndSendUpdateNotify:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function ZDNwkMgr_BuildAndSendUpdateNotify
//  784                                                uint16 totalTransmissions, uint16 txFailures,
//  785                                                ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
//  786                                                uint8 txOptions )
//  787 {
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, ZDP_MgmtNwkUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x17
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 14,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
//  788   uint8 i;
//  789   uint8 listCount = 0;
        MOV     ?V0 + 8,#0x0
//  790   uint8 *energyValues = NULL;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  791   
//  792   // Count number of energy detects
//  793   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R2,#0x0
        MOV     A,?V0 + 12
        ADD     A,#0x3
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
//  794   {
//  795     if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
??ZDNwkMgr_BuildAndSendUpdateNotify_0:
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_1
//  796       listCount++;
        INC     ?V0 + 8
//  797   }
??ZDNwkMgr_BuildAndSendUpdateNotify_1:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
//  798   
//  799   if ( listCount > 0 )
        MOV     A,?V0 + 8
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
//  800   {
//  801     energyValues = (uint8 *)osal_mem_alloc( listCount );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  802     if ( energyValues )
        MOV     A,R2
        JNZ     ??ZDNwkMgr_BuildAndSendUpdateNotify_3
        MOV     A,R3
??ZDNwkMgr_BuildAndSendUpdateNotify_3:
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
//  803     {
//  804       uint8 j = 0;
        MOV     R3,#0x0
//  805 
//  806       for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R2,#0x0
//  807       {
//  808         if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
??ZDNwkMgr_BuildAndSendUpdateNotify_4:
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
//  809           energyValues[j++] = pEDScanConfirm->energyDetectList[i];
        MOV     ?V0 + 4,R2
        MOV     A,?V0 + 12
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 13
        LCALL   ??Subroutine14_0 & 0xFFFF
//  810       }
??CrossCallReturnLabel_16:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 4,R3
        MOV     A,?V0 + 0
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R3
??ZDNwkMgr_BuildAndSendUpdateNotify_5:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_4
//  811     }
//  812   }
//  813     
//  814   // Send a Management Network Update notify back
//  815   ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
//  816                            pEDScanConfirm->scannedChannels,
//  817                            totalTransmissions, txFailures,
//  818                            listCount, energyValues, txOptions, false );
??ZDNwkMgr_BuildAndSendUpdateNotify_2:
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,?V0 + 9
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R5,?V0 + 8
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 14
        LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  819   if ( energyValues )
        MOV     A,?V0 + 0
        JNZ     ??ZDNwkMgr_BuildAndSendUpdateNotify_6
        MOV     A,?V0 + 1
??ZDNwkMgr_BuildAndSendUpdateNotify_6:
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_7
//  820     osal_mem_free( energyValues );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
//  821 }
??ZDNwkMgr_BuildAndSendUpdateNotify_7:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R7,#0xf
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock50
//  822 
//  823 #if defined ( NWK_MANAGER )
//  824 /*********************************************************************
//  825  * @fn      NwkMgr_SetNwkManager
//  826  *
//  827  * @brief   Set the local device as the Network Manager
//  828  *
//  829  * @param   none
//  830  *
//  831  * @return  none
//  832  */
//  833 void NwkMgr_SetNwkManager( void )
//  834 {
//  835   if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
//  836   {
//  837     // We're the Network Manager. Set our address as the Network Manager Address
//  838     ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
//  839     
//  840     // Set the Network Manager bit of the Server Mask
//  841     ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
//  842   }
//  843 }
//  844 #endif // NWK_MANAGER
//  845 
//  846 /*********************************************************************
//  847  * @fn      ZDApp_SetNwkManagerAddr()
//  848  *
//  849  * @brief   Sets the nwkManagerAddr in NIB.
//  850  *
//  851  * @param   nwkManagerAddr
//  852  *
//  853  * @return  none
//  854  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  855 void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
ZDNwkMgr_SetNwkManagerAddr:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function ZDNwkMgr_SetNwkManagerAddr
//  856 {
        FUNCALL ZDNwkMgr_SetNwkManagerAddr, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  857   if ( _NIB.nwkManagerAddr != nwkManagerAddr )
        MOV     DPTR,#(_NIB + 105)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDNwkMgr_SetNwkManagerAddr_0:
        JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
//  858   {
//  859     // Update the Network Manager Address
//  860     _NIB.nwkManagerAddr = nwkManagerAddr;
        MOV     DPTR,#(_NIB + 105)
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  861   
//  862     // Our Network Manger Address has been changed -- notify to save info into NV
//  863     ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay
        CFI EndBlock cfiBlock51
//  864   }
//  865 }
??ZDNwkMgr_SetNwkManagerAddr_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock52
//  866 
//  867 /*********************************************************************
//  868  * @fn          ZDNwkMgr_ReportChannelInterference
//  869  *
//  870  * @brief       This function builds a Channel Interference detection
//  871  *              message and then forwards it to the Network Manager.
//  872  *
//  873  * @param       chanInterference
//  874  *
//  875  * @return      none
//  876  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  877 void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
ZDNwkMgr_ReportChannelInterference:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function ZDNwkMgr_ReportChannelInterference
//  878 {
        FUNCALL ZDNwkMgr_ReportChannelInterference, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ReportChannelInterference, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  879   ZDNwkMgr_ChanInterference_t *pChanInterference;
//  880 
//  881   // Send Channel Interference message to the Network Manager task
//  882   pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  883   if ( pChanInterference )
        MOV     A,R2
        JNZ     ??ZDNwkMgr_ReportChannelInterference_0
        MOV     A,R3
??ZDNwkMgr_ReportChannelInterference_0:
        JZ      ??ZDNwkMgr_ReportChannelInterference_1
//  884   {
//  885     pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
        MOV     A,#0x31
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  886       
//  887     // Build the structure
//  888     pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ??Subroutine16_0 & 0xFFFF
//  889     pChanInterference->txFailures = chanInterference->txFailures;
??CrossCallReturnLabel_21:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine16_0 & 0xFFFF
//  890               
//  891     osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  892   }
//  893 }
??ZDNwkMgr_ReportChannelInterference_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_25
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_23
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_2
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_3
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67
//  894 
//  895 /*********************************************************************
//  896  * @fn          ZDNwkMgr_EDScanConfirmCB
//  897  *
//  898  * @brief       Handle Energy Scan confirm callback
//  899  *
//  900  * @param       scannedChannels  - scanned channels
//  901  * @param       energyDetectList - measured energy for channels
//  902  *
//  903  * @return      none
//  904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  905 void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
ZDNwkMgr_EDScanConfirmCB:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function ZDNwkMgr_EDScanConfirmCB
//  906 {
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  907   ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
//  908 
//  909   // Send ED Confirm to the Network Manager task
//  910   pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  911   if ( pEDScanConfirm )
        MOV     A,R6
        JNZ     ??ZDNwkMgr_EDScanConfirmCB_0
        MOV     A,R7
??ZDNwkMgr_EDScanConfirmCB_0:
        JZ      ??ZDNwkMgr_EDScanConfirmCB_1
//  912   {
//  913     pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
        MOV     A,#0x32
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  914       
//  915     // Build the structure
//  916     pEDScanConfirm->status = EDScanConfirm->status;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  917     pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  918     osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x7
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  919       
//  920     osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  921   }
//  922 }
??ZDNwkMgr_EDScanConfirmCB_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock68
//  923 
//  924 /*********************************************************************
//  925  * @fn      ZDNwkMgr_ProcessDataConfirm
//  926  *
//  927  * @brief   Process received Confirmation for Mgmt NWK Update Notify message
//  928  *
//  929  * @param   none
//  930  *
//  931  * @return  none
//  932  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  933 void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
ZDNwkMgr_ProcessDataConfirm:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI Function ZDNwkMgr_ProcessDataConfirm
//  934 {
        FUNCALL ZDNwkMgr_ProcessDataConfirm, nwkTransmissionFailures
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  935   if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
//  936        ( afDataConfirm->transID == 0 )     && 
//  937        ( afDataConfirm->hdr.status == ZSuccess ) )
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_ProcessDataConfirm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
//  938   {
//  939     // The Mgmt NWK Update Notify was sent as an APS Unicast with  
//  940     // acknowledgement and once the acknowledgment is received the 
//  941     // total transmit and transmit failure counters are reset to zero.  
//  942     _NIB.nwkTotalTransmissions = 0;
        LCALL   ?Subroutine4 & 0xFFFF
//  943     nwkTransmissionFailures( TRUE );
//  944     
//  945     ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
??CrossCallReturnLabel_1:
        CLR     A
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOVX    @DPTR,A
//  946   }
//  947 }
??ZDNwkMgr_ProcessDataConfirm_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond71) CFA_SP SP+-5
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     DPTR,#(_NIB + 107)
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function nwkTransmissionFailures
        ; Setup parameters for call to function nwkTransmissionFailures
        MOV     R1,#0x1
        LCALL   ??nwkTransmissionFailures?relay
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessServerDiscRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_ProcessServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_CheckForChannelInterference?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_CheckForChannelInterference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_BuildAndSendUpdateNotify?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_BuildAndSendUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_SetNwkManagerAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_SetNwkManagerAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ReportChannelInterference?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_ReportChannelInterference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_EDScanConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_EDScanConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDNwkMgr_ProcessDataConfirm

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "%s\\n">`:
        DB "%s\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant ": %u %u\\n">`:
        DB ": %u %u\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_7fff800:
        DD 134215680

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        END
//  948 
//  949 /*********************************************************************
//  950  * PAN ID Conflict Routines
//  951  */
//  952 #if defined ( NWK_MANAGER )
//  953 /*********************************************************************
//  954  * @fn          ZDNwkMgr_NetworkReportCB
//  955  *
//  956  * @brief       Handle the Network Report Command
//  957  *
//  958  * @param       srcAddr     - Source Address of the message.
//  959  * @param       status      - ZSuccess.
//  960  * @param       serverMask  - Bit mask of services matching the req serverMask.
//  961  * @param       securityUse -
//  962  *
//  963  * @return      none
//  964  */
//  965 void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
//  966 { 
//  967   // Send Network Report message to the Network Manager task
//  968   osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
//  969 }
//  970 
//  971 /*********************************************************************
//  972  * @fn          ZDNwkMgr_NetworkUpdateCB
//  973  *
//  974  * @brief       Handle the Network Update Command
//  975  *
//  976  * @param       srcAddr     - Source Address of the message.
//  977  * @param       status      - ZSuccess.
//  978  * @param       serverMask  - Bit mask of services matching the req serverMask.
//  979  * @param       securityUse -
//  980  *
//  981  * @return      none
//  982  */
//  983 void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
//  984 {
//  985   // Send Network Update message to the Network Manager task
//  986   osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
//  987 }
//  988 
//  989 /*********************************************************************
//  990  * @fn      ZDNwkMgr_ProcessNetworkReport
//  991  *
//  992  * @brief   Process the incoming Network Report message
//  993  *
//  994  * @param   pNetworkReport - Structure containing Network Report message
//  995  *
//  996  * @return  none
//  997  */
//  998 void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
//  999 {
// 1000   uint8 i;
// 1001   uint16 newPID;
// 1002   uint8 unique = TRUE;
// 1003 
// 1004   if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
// 1005   {
// 1006     if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
// 1007     {
// 1008       do
// 1009       {
// 1010         // select a new PAN ID
// 1011         newPID = (uint16)osal_rand();
// 1012       
// 1013         // Make sure that the chosen PAN ID is not already in use in the
// 1014         // local neighborhood and also not contained within the Report 
// 1015         // Information field of the Network Report Command frame
// 1016         for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
// 1017         {
// 1018           if ( pNetworkReport->panIDs[i] == newPID )
// 1019           {
// 1020             unique = FALSE;
// 1021             break;
// 1022           }
// 1023         }
// 1024       } while ( !unique );
// 1025          
// 1026       // Send out a Network Update command.
// 1027       NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
// 1028                               _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
// 1029     
// 1030       ZDNwkMgr_PanIdUpdateInProgress = TRUE;
// 1031     }
// 1032   }
// 1033 }
// 1034 
// 1035 /*********************************************************************
// 1036  * @fn      ZDNwkMgr_ProcessNetworkUpdate
// 1037  *
// 1038  * @brief   Process the incoming Network Update message
// 1039  *
// 1040  * @param   pNetworkReport - Structure containing Network Update message
// 1041  *
// 1042  * @return  none
// 1043  */
// 1044 void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
// 1045 {
// 1046   if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
// 1047   { 
// 1048     // Our PAN ID has been changed -- notify to save info into NV
// 1049     ZDApp_NwkStateUpdateCB();
// 1050     
// 1051     ZDNwkMgr_PanIdUpdateInProgress = FALSE;
// 1052   }
// 1053 }
// 1054 #endif // NWK_MANAGER
// 1055 
// 1056 
// 1057 /*********************************************************************
// 1058 *********************************************************************/
// 
// 2 025 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//    87 bytes in segment XDATA_ROM_C
//    39 bytes in segment XDATA_Z
// 
// 2 085 bytes of CODE  memory
//    79 bytes of CONST memory (+ 8 bytes shared)
//    39 bytes of XDATA memory
//
//Errors: none
//Warnings: none
