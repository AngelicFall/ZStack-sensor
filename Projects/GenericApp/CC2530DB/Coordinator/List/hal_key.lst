###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:42:08 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\hal\target\CC25 #
#                          30EB\hal_key.c                                     #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\hal\target\CC2530EB\hal_key.c" -D         #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D         #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\hal_key.lst                    #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\hal_key.r51                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-07-22 09:47:19 -0700 (Thu, 22 Jul 2010) $
      4            Revision:       $Revision: 23100 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     92          
     93          /**************************************************************************************************
     94           *                                              MACROS
     95           **************************************************************************************************/
     96          
     97          /**************************************************************************************************
     98           *                                            CONSTANTS
     99           **************************************************************************************************/
    100          #define HAL_KEY_RISING_EDGE   0
    101          #define HAL_KEY_FALLING_EDGE  1
    102          
    103          #define HAL_KEY_DEBOUNCE_VALUE  25
    104          #define HAL_KEY_POLLING_VALUE   100
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          //#define HAL_KEY_CPU_PORT_2_IF P2IF
    109          
    110          /* SW_1 is at P0.6 */
    111          #define HAL_KEY_SW_1_PORT   P0
    112          #define HAL_KEY_SW_1_BIT    BV(6)
    113          #define HAL_KEY_SW_1_SEL    P0SEL
    114          #define HAL_KEY_SW_1_DIR    P0DIR
    115          
    116          /* SW_2 is at P0.7 */
    117          #define HAL_KEY_SW_2_PORT   P0
    118          #define HAL_KEY_SW_2_BIT    BV(7)
    119          #define HAL_KEY_SW_2_SEL    P0SEL
    120          #define HAL_KEY_SW_2_DIR    P0DIR
    121          
    122          /* edge interrupt */
    123          #define HAL_KEY_SW_1_EDGEBIT  BV(0)
    124          #define HAL_KEY_SW_1_EDGE     HAL_KEY_FALLING_EDGE
    125          
    126          #define HAL_KEY_SW_2_EDGEBIT  BV(0)
    127          #define HAL_KEY_SW_2_EDGE     HAL_KEY_FALLING_EDGE
    128          
    129          /* Port_0 interrupts */
    130          #define HAL_KEY_SW_IEN        IEN1  /* CPU interrupt mask register */
    131          #define HAL_KEY_SW_IENBIT     BV(5) /* Mask bit for all of Port_0 */
    132          #define HAL_KEY_SW_ICTL       P0IEN /* Port Interrupt Control register */
    133          #define HAL_KEY_SW_PXIFG      P0IFG /* Interrupt flag at source */
    134          
    135          /* SW_1,2 interrupts */
    136          #define HAL_KEY_SW_1_ICTLBIT  BV(6) /* P0IEN - P0.6 enable/disable bit */
    137          #define HAL_KEY_SW_2_ICTLBIT  BV(7) /* P0IEN - P0.7 enable/disable bit */
    138          
    139          
    140          
    141          
    142          /**************************************************************************************************
    143           *                                            TYPEDEFS
    144           **************************************************************************************************/
    145          
    146          
    147          /**************************************************************************************************
    148           *                                        GLOBAL VARIABLES
    149           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          
    155          /**************************************************************************************************
    156           *                                        FUNCTIONS - Local
    157           **************************************************************************************************/
    158          void halProcessKeyInterrupt(void);
    159          
    160          
    161          
    162          /**************************************************************************************************
    163           *                                        FUNCTIONS - API
    164           **************************************************************************************************/
    165          
    166          
    167          /**************************************************************************************************
    168           * @fn      HalKeyInit
    169           *
    170           * @brief   Initilize Key Service
    171           *
    172           * @param   none
    173           *
    174           * @return  None
    175           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void HalKeyInit( void )
   \                     HalKeyInit:
    177          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    178            /* Initialize previous key to 0 */ 
    179            halKeySavedKeys = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#halKeySavedKeys
   \   000008   F0           MOVX    @DPTR,A
    180          
    181            HAL_KEY_SW_1_SEL &= ~(HAL_KEY_SW_1_BIT);    /* Set pin function to GPIO */
   \   000009   53F3BF       ANL     0xf3,#0xbf
    182            HAL_KEY_SW_1_DIR &= ~(HAL_KEY_SW_1_BIT);    /* Set pin direction to Input */
   \   00000C   53FDBF       ANL     0xfd,#0xbf
    183            P0INP&=~0XC0;//P0.6 P0.7 ÉÏÀ­ÏÂÀ²Ä£Ê½
   \   00000F   538F3F       ANL     0x8f,#0x3f
   \   000012   E58F         MOV     A,0x8f
    184            P2INP&=~0X20;//P0.6 P0.7 ÉÏÀ²Ä£Ê½
   \   000014   53F7DF       ANL     0xf7,#0xdf
    185            HAL_KEY_SW_2_SEL &= ~(HAL_KEY_SW_2_BIT);    /* Set pin function to GPIO */
   \   000017   53F37F       ANL     0xf3,#0x7f
    186            HAL_KEY_SW_2_DIR &= ~(HAL_KEY_SW_2_BIT);    /* Set pin direction to Input */
   \   00001A   53FD7F       ANL     0xfd,#0x7f
    187            /* Initialize callback function */
    188            pHalKeyProcessFunction  = NULL;   
   \   00001D   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
    189          
    190            /* Start with key is not configured */
    191            HalKeyConfigured = FALSE;
   \   000024   90....       MOV     DPTR,#HalKeyConfigured
   \   000027   F0           MOVX    @DPTR,A
    192          }
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00002B                REQUIRE P0INP
   \   00002B                REQUIRE P0SEL
   \   00002B                REQUIRE P2INP
   \   00002B                REQUIRE P0DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          
    195          /**************************************************************************************************
    196           * @fn      HalKeyConfig
    197           *
    198           * @brief   Configure the Key serivce
    199           *
    200           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    201           *          cback - pointer to the CallBack function
    202           *
    203           * @return  None
    204           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    206          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    207            /* Enable/Disable Interrupt or */
    208            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX    @DPTR,A
    209          
    210            /* Register the callback fucntion */
    211            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   F0           MOVX    @DPTR,A
    212          
    213            /* Determine if interrupt is enable or not */
    214            if (Hal_KeyIntEnable)
   \   000012   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX    A,@DPTR
   \   000016   602C         JZ      ??HalKeyConfig_0
    215            {
    216              /* Rising/Falling edge configuratinn */
    217          
    218              PICTL &= ~(HAL_KEY_SW_1_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CFE       ANL     0x8c,#0xfe
    219              PICTL &= ~(HAL_KEY_SW_2_EDGEBIT);    /* Clear the edge bit */
   \   00001B   538CFE       ANL     0x8c,#0xfe
    220              /* For falling edge, the bit must be set. */
    221            #if (HAL_KEY_SW_1_EDGE == HAL_KEY_FALLING_EDGE)
    222              PICTL |= HAL_KEY_SW_1_EDGEBIT;
   \   00001E   438C01       ORL     0x8c,#0x1
    223            #endif
    224            #if (HAL_KEY_SW_2_EDGE == HAL_KEY_FALLING_EDGE)
    225              PICTL |= HAL_KEY_SW_2_EDGEBIT;
   \   000021   438C01       ORL     0x8c,#0x1
    226            #endif
    227          
    228          
    229              /* Interrupt configuration:
    230               * - Enable interrupt generation at the port
    231               * - Enable CPU interrupt
    232               * - Clear any pending interrupt
    233               */
    234              HAL_KEY_SW_ICTL |= ( HAL_KEY_SW_1_ICTLBIT | HAL_KEY_SW_2_ICTLBIT );
   \   000024   43ABC0       ORL     0xab,#0xc0
   \   000027   E5AB         MOV     A,0xab
    235              HAL_KEY_SW_IEN  |= HAL_KEY_SW_IENBIT;
   \   000029   D2BD         SETB    0xb8.5
    236              HAL_KEY_SW_PXIFG= (uint8)(~(HAL_KEY_SW_1_BIT | HAL_KEY_SW_2_BIT));
   \   00002B   75893F       MOV     0x89,#0x3f
    237          
    238              /* Rising/Falling edge configuratinn */
    239          
    240          
    241              /* Do this only after the hal_key is configured - to work with sleep stuff */
    242              if (HalKeyConfigured == TRUE)
   \   00002E   90....       MOV     DPTR,#HalKeyConfigured
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6401         XRL     A,#0x1
   \   000034   7025         JNZ     ??HalKeyConfig_1
    243              {
    244                osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   000036                ; Setup parameters for call to function osal_stop_timerEx
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   90....       MOV     DPTR,#Hal_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_stop_timerEx?relay
   \   000042   8017         SJMP    ??HalKeyConfig_1
    245              }
    246            }
    247            else    /* Interrupts NOT enabled */
    248            {
    249              HAL_KEY_SW_ICTL &= ~(HAL_KEY_SW_1_ICTLBIT | HAL_KEY_SW_2_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   000044   53AB3F       ANL     0xab,#0x3f
   \   000047   E5AB         MOV     A,0xab
    250              HAL_KEY_SW_IEN  &= ~(HAL_KEY_SW_IENBIT);    /* Clear interrupt enable bit */
   \   000049   C2BD         CLR     0xb8.5
    251          
    252              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
   \   00004B                ; Setup parameters for call to function osal_start_timerEx
   \   00004B   7C64         MOV     R4,#0x64
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   7B00         MOV     R3,#0x0
   \   000053   90....       MOV     DPTR,#Hal_TaskID
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??osal_start_timerEx?relay
    253            }
    254          
    255            /* Key now is configured */
    256            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   00005B   7401         MOV     A,#0x1
   \   00005D   90....       MOV     DPTR,#HalKeyConfigured
   \   000060   F0           MOVX    @DPTR,A
    257          }
   \   000061   FF           MOV     R7,A
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000065                REQUIRE P0IFG
   \   000065                REQUIRE PICTL
   \   000065                REQUIRE P0IEN
   \   000065                REQUIRE _A_IEN1
    258          
    259          
    260          /**************************************************************************************************
    261           * @fn      HalKeyRead
    262           *
    263           * @brief   Read the current value of a key
    264           *
    265           * @param   None
    266           *
    267           * @return  keys - current keys status
    268           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    270          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    271            uint8 keys = 0;
   \   000000   7900         MOV     R1,#0x0
    272          
    273            if (HAL_PUSH_BUTTON1())
   \   000002   A286         MOV     C,0x80.6
   \   000004   5005         JNC     ??HalKeyRead_0
    274            {
    275              keys |= HAL_KEY_SW_1;
    276            }
    277            else if (HAL_PUSH_BUTTON2())
   \   000006   A287         MOV     C,0x80.7
   \   000008   4002         JC      ??HalKeyRead_1
    278            {
    279              keys |= HAL_KEY_SW_2;
   \   00000A   09           INC     R1
   \                     ??HalKeyRead_0:
   \   00000B   09           INC     R1
    280            }
    281            else
    282            {
    283          	keys = 0x00;
    284            }
    285          
    286            return keys;
   \                     ??HalKeyRead_1:
   \   00000C   02....       LJMP    ?BRET
   \   00000F                REQUIRE _A_P0
    287          }
    288          
    289          
    290          /**************************************************************************************************
    291           * @fn      HalKeyPoll
    292           *
    293           * @brief   Called by hal_driver to poll the keys
    294           *
    295           * @param   None
    296           *
    297           * @return  None
    298           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void HalKeyPoll (void)
   \                     HalKeyPoll:
    300          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    301            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    302          
    303            if (HAL_PUSH_BUTTON1())
   \   000006   A286         MOV     C,0x80.6
   \   000008   5005         JNC     ??HalKeyPoll_0
    304            {
    305              keys |= HAL_KEY_SW_1;
    306            }
    307            else if (HAL_PUSH_BUTTON2())
   \   00000A   A287         MOV     C,0x80.7
   \   00000C   4002         JC      ??HalKeyPoll_1
    308            {
    309              keys |= HAL_KEY_SW_2;
   \   00000E   09           INC     R1
   \                     ??HalKeyPoll_0:
   \   00000F   09           INC     R1
    310            }
    311            else
    312            {
    313          	keys = 0x00;
    314            }
    315          
    316            /* If interrupts are not enabled, previous key status and current key status
    317             * are compared to find out if a key has changed status.
    318             */
    319            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_1:
   \   000010   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7009         JNZ     ??HalKeyPoll_2
    320            {
    321              if (keys == halKeySavedKeys)
   \   000016   90....       MOV     DPTR,#halKeySavedKeys
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   69           XRL     A,R1
   \   00001B   601F         JZ      ??HalKeyPoll_3
    322              {
    323                /* Exit - since no keys have changed */
    324                return;
    325              }
    326              /* Store the current keys for comparation next time */
    327              halKeySavedKeys = keys;
   \   00001D   E9           MOV     A,R1
   \   00001E   F0           MOVX    @DPTR,A
    328            }
    329            else
    330            {
    331              /* Key interrupt handled here */
    332            }
    333            
    334            /* Invoke Callback if new keys were depressed */
    335            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_2:
   \   00001F   E9           MOV     A,R1
   \   000020   601A         JZ      ??HalKeyPoll_3
   \   000022   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000025   E0           MOVX    A,@DPTR
   \   000026   7002         JNZ     ??HalKeyPoll_4
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \                     ??HalKeyPoll_4:
   \   00002A   6010         JZ      ??HalKeyPoll_3
    336            {
    337              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   00002C                ; Setup parameters for indirect call
   \   00002C   7A00         MOV     R2,#0x0
   \   00002E   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   12....       LCALL   ?CALL_IND
    338            }
   \                     ??HalKeyPoll_3:
   \   00003C   80..         SJMP    ?Subroutine0
   \   00003E                REQUIRE _A_P0
    339          }
    340          
    341          
    342          
    343          /**************************************************************************************************
    344           * @fn      halProcessKeyInterrupt
    345           *
    346           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    347           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    348           *
    349           * @param
    350           *
    351           * @return
    352           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    354          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    355            bool valid=FALSE;
    356          
    357            if((HAL_KEY_SW_PXIFG & HAL_KEY_SW_1_BIT)||(HAL_KEY_SW_PXIFG & HAL_KEY_SW_2_BIT))  /* Interrupt Flag has been set */
   \   000004   E589         MOV     A,0x89
   \   000006   A2E6         MOV     C,0xE0 /* A   */.6
   \   000008   4006         JC      ??halProcessKeyInterrupt_0
   \   00000A   E589         MOV     A,0x89
   \   00000C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000E   5013         JNC     ??halProcessKeyInterrupt_1
    358            {
    359              HAL_KEY_SW_PXIFG = (uint8)(~(HAL_KEY_SW_1_BIT | HAL_KEY_SW_2_BIT)); /* Clear Interrupt Flag */
   \                     ??halProcessKeyInterrupt_0:
   \   000010   75893F       MOV     0x89,#0x3f
    360              valid = TRUE;
    361            }
    362            if (valid)
    363            {
    364              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   000013                ; Setup parameters for call to function osal_start_timerEx
   \   000013   7C19         MOV     R4,#0x19
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#Hal_TaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??osal_start_timerEx?relay
    365            }
    366          }
   \                     ??halProcessKeyInterrupt_1:
   \   000023                REQUIRE ?Subroutine0
   \   000023                REQUIRE P0IFG
   \   000023                ; // Fall through to label ?Subroutine0
    367          
    368          /**************************************************************************************************
    369           * @fn      HalKeyEnterSleep
    370           *
    371           * @brief  - Get called to enter sleep mode
    372           *
    373           * @param
    374           *
    375           * @return
    376           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    378          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    379          }
   \   000000   02....       LJMP    ?BRET
    380          
    381          /**************************************************************************************************
    382           * @fn      HalKeyExitSleep
    383           *
    384           * @brief   - Get called when sleep is over
    385           *
    386           * @param
    387           *
    388           * @return  - return saved keys
    389           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    391          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    392            /* Wake up and read keys */
    393            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   80..         SJMP    ?Subroutine0
    394          }
    395          
    396          /***************************************************************************************************
    397           *                                    INTERRUPT SERVICE ROUTINE
    398           ***************************************************************************************************/
    399          
    400          /**************************************************************************************************
    401           * @fn      halKeyPort0Isr
    402           *
    403           * @brief   Port0 ISR
    404           *
    405           * @param
    406           *
    407           * @return
    408           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    409          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    410          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    411            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   92E0         MOV     0xE0 /* A   */.0,C
   \   00000C   FE           MOV     R6,A
   \   00000D   D2AF         SETB    0xa8.7
    412          
    413            if((HAL_KEY_SW_PXIFG & HAL_KEY_SW_1_BIT)||(HAL_KEY_SW_PXIFG & HAL_KEY_SW_2_BIT))
   \   00000F   E589         MOV     A,0x89
   \   000011   A2E6         MOV     C,0xE0 /* A   */.6
   \   000013   4006         JC      ??halKeyPort0Isr_0
   \   000015   E589         MOV     A,0x89
   \   000017   A2E7         MOV     C,0xE0 /* A   */.7
   \   000019   5003         JNC     ??halKeyPort0Isr_1
    414            {
    415            halProcessKeyInterrupt();
   \                     ??halKeyPort0Isr_0:
   \   00001B                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00001B   12....       LCALL   ??halProcessKeyInterrupt?relay
    416            }
    417            /*
    418              Clear the CPU interrupt flag for Port_0
    419              PxIFG has to be cleared before PxIF
    420            */
    421            HAL_KEY_SW_PXIFG = 0;
   \                     ??halKeyPort0Isr_1:
   \   00001E   758900       MOV     0x89,#0x0
    422            HAL_KEY_CPU_PORT_0_IF = 0;
   \   000021   C2C5         CLR     0xc0.5
    423            CLEAR_SLEEP_MODE();
    424            HAL_EXIT_ISR();
   \   000023   EE           MOV     A,R6
   \   000024   A2E0         MOV     C,0xE0 /* A   */.0
   \   000026   92AF         MOV     0xa8.7,C
    425          }
   \   000028   7F01         MOV     R7,#0x1
   \   00002A   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   00002D                REQUIRE P0IFG
   \   00002D                REQUIRE _A_IEN0
   \   00002D                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halProcessKeyInterrupt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    426          #else
    427          
    428          void HalKeyInit(void){}
    429          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    430          uint8 HalKeyRead(void){ return 0;}
    431          void HalKeyPoll(void){}
    432          
    433          #endif /* HAL_KEY */
    434          
    435          
    436          
    437          
    438          
    439          /**************************************************************************************************
    440          **************************************************************************************************/
    441          
    442          
    443          

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     HalKeyConfig                    0      0      9
       -> osal_stop_timerEx          0      0     18
       -> osal_start_timerEx         0      0     18
     HalKeyEnterSleep                0      0      0
     HalKeyExitSleep                 2      0      0
       -> HalKeyRead                 4      0      0
     HalKeyInit                      2      0      0
     HalKeyPoll                      2      0      0
     HalKeyRead                      0      0      0
     halKeyPort0Isr                 15      0      0
       -> halProcessKeyInterrupt    30      0      0
     halProcessKeyInterrupt          2      0      0
       -> osal_start_timerEx         4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_P0                             1
     P0IFG                             1
     PICTL                             1
     P0INP                             1
     _A_IEN0                           1
     P0IEN                             1
     _A_IEN1                           1
     _A_IRCON                          1
     P0SEL                             1
     P2INP                             1
     P0DIR                             1
     halKeySavedKeys                   1
     pHalKeyProcessFunction            2
     HalKeyConfigured                  1
     Hal_KeyIntEnable                  1
     HalKeyInit                       43
     ?Subroutine0                      7
     HalKeyConfig                    101
     HalKeyRead                       15
     HalKeyPoll                       62
     halProcessKeyInterrupt           35
     HalKeyEnterSleep                  3
     HalKeyExitSleep                   9
     halKeyPort0Isr                   45
     ??halKeyPort0Isr??INTVEC 107      3
     ??HalKeyInit?relay                6
     ??HalKeyConfig?relay              6
     ??HalKeyRead?relay                6
     ??HalKeyPoll?relay                6
     ??halProcessKeyInterrupt?relay    6
     ??HalKeyEnterSleep?relay          6
     ??HalKeyExitSleep?relay           6

 
 275 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
  45 bytes in segment NEAR_CODE
  11 bytes in segment SFR_AN
   5 bytes in segment XDATA_Z
 
 362 bytes of CODE  memory (+  3 bytes shared)
   0 bytes of DATA  memory (+ 11 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: none
