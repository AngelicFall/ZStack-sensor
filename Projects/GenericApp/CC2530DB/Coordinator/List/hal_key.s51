///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:42:08 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Components\hal\target\CC /
//                          2530EB\hal_key.c                                  /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCo /
//                          ord.cfg" (-DCPU32MHZ -DROOT=__near_func           /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Components\hal\target\CC2530EB\hal_key.c" -D      /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D HAL_PA_LNA -D                      /
//                          SERIAL_SUPPORTED=DEBUG -D SENSOR_TYPE_Coord -D    /
//                          CHANLIST_C_R_E=25 -D ZDAPP_CONFIG_PAN_ID=0x0004   /
//                          -D FT_PAN_ID_C_R_C -D ZigBee_C_R_E_Engineering    /
//                          -D ZDO_COORDINATOR=0 -D xNV_RESTORE -lC           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" -lA                      /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" --diag_suppress          /
//                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ /
//                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects /
//                          \GenericApp\CC2530DB\Coordinator\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã /
//                          ÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen /
//                          ericApp\CC2530DB\..\SOURCE\" -I                   /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Coordinator\List\hal_key.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,0203H
        PUBLIC ??HalKeyEnterSleep?relay
        FUNCTION ??HalKeyEnterSleep?relay,0203H
        PUBLIC ??HalKeyExitSleep?relay
        FUNCTION ??HalKeyExitSleep?relay,0203H
        PUBLIC ??HalKeyInit?relay
        FUNCTION ??HalKeyInit?relay,0203H
        PUBLIC ??HalKeyPoll?relay
        FUNCTION ??HalKeyPoll?relay,0203H
        PUBLIC ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,0203H
        PUBWEAK `??halKeyPort0Isr??INTVEC 107`
        PUBLIC ??halProcessKeyInterrupt?relay
        FUNCTION ??halProcessKeyInterrupt?relay,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalKeyEnterSleep
        FUNCTION HalKeyEnterSleep,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyExitSleep
        FUNCTION HalKeyExitSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Hal_KeyIntEnable
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P2INP
        PUBWEAK PICTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_P0
        PUBLIC halKeyPort0Isr
        FUNCTION halKeyPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halProcessKeyInterrupt
        FUNCTION halProcessKeyInterrupt,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
HalKeyConfig        SYMBOL "HalKeyConfig"
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
HalKeyEnterSleep    SYMBOL "HalKeyEnterSleep"
??HalKeyEnterSleep?relay SYMBOL "?relay", HalKeyEnterSleep
HalKeyExitSleep     SYMBOL "HalKeyExitSleep"
??HalKeyExitSleep?relay SYMBOL "?relay", HalKeyExitSleep
HalKeyInit          SYMBOL "HalKeyInit"
??HalKeyInit?relay  SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
??HalKeyPoll?relay  SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
halKeyPort0Isr      SYMBOL "halKeyPort0Isr"
`??halKeyPort0Isr??INTVEC 107` SYMBOL "??INTVEC 107", halKeyPort0Isr
halProcessKeyInterrupt SYMBOL "halProcessKeyInterrupt"
??halProcessKeyInterrupt?relay SYMBOL "?relay", halProcessKeyInterrupt

        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN Hal_TaskID

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\hal\target\CC2530EB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Revised:        $Date: 2010-07-22 09:47:19 -0700 (Thu, 22 Jul 2010) $
//    4   Revision:       $Revision: 23100 $
//    5 
//    6   Description:    This file contains the interface to the HAL KEY Service.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 /*********************************************************************
//   40  NOTE: If polling is used, the hal_driver task schedules the KeyRead()
//   41        to occur every 100ms.  This should be long enough to naturally
//   42        debounce the keys.  The KeyRead() function remembers the key
//   43        state of the previous poll and will only return a non-zero
//   44        value if the key state changes.
//   45 
//   46  NOTE: If interrupts are used, the KeyRead() function is scheduled
//   47        25ms after the interrupt occurs by the ISR.  This delay is used
//   48        for key debouncing.  The ISR disables any further Key interrupt
//   49        until KeyRead() is executed.  KeyRead() will re-enable Key
//   50        interrupts after executing.  Unlike polling, when interrupts
//   51        are enabled, the previous key state is not remembered.  This
//   52        means that KeyRead() will return the current state of the keys
//   53        (not a change in state of the keys).
//   54 
//   55  NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
//   56        the ISR.  Therefore, the joystick movements will only be detected
//   57        during a pushbutton interrupt caused by S1 or the center joystick
//   58        pushbutton.
//   59 
//   60  NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
//   61        high state to a low state.  This transition is typically clean.  The
//   62        duration of the low state is around 200ms.  When the signal returns
//   63        to the high state, there is a high likelihood of signal bounce, which
//   64        causes a unwanted interrupts.  Normally, we would set the interrupt
//   65        edge to falling edge to generate an interrupt when S1 is pushed, but
//   66        because of the signal bounce, it is better to set the edge to rising
//   67        edge to generate an interrupt when S1 is released.  The debounce logic
//   68        can then filter out the signal bounce.  The result is that we typically
//   69        get only 1 interrupt per button push.  This mechanism is not totally
//   70        foolproof because occasionally, signal bound occurs during the falling
//   71        edge as well.  A similar mechanism is used to handle the joystick
//   72        pushbutton on the DB.  For the EB, we do not have independent control
//   73        of the interrupt edge for the S1 and center joystick pushbutton.  As
//   74        a result, only one or the other pushbuttons work reasonably well with
//   75        interrupts.  The default is the make the S1 switch on the EB work more
//   76        reliably.
//   77 
//   78 *********************************************************************/
//   79 
//   80 /**************************************************************************************************
//   81  *                                            INCLUDES
//   82  **************************************************************************************************/
//   83 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1
//   84 #include "hal_defs.h"
//   85 #include "hal_types.h"
//   86 #include "hal_board.h"
//   87 #include "hal_drivers.h"
//   88 #include "hal_adc.h"
//   89 #include "hal_key.h"
//   90 #include "osal.h"
//   91 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   92 
//   93 /**************************************************************************************************
//   94  *                                              MACROS
//   95  **************************************************************************************************/
//   96 
//   97 /**************************************************************************************************
//   98  *                                            CONSTANTS
//   99  **************************************************************************************************/
//  100 #define HAL_KEY_RISING_EDGE   0
//  101 #define HAL_KEY_FALLING_EDGE  1
//  102 
//  103 #define HAL_KEY_DEBOUNCE_VALUE  25
//  104 #define HAL_KEY_POLLING_VALUE   100
//  105 
//  106 /* CPU port interrupt */
//  107 #define HAL_KEY_CPU_PORT_0_IF P0IF
//  108 //#define HAL_KEY_CPU_PORT_2_IF P2IF
//  109 
//  110 /* SW_1 is at P0.6 */
//  111 #define HAL_KEY_SW_1_PORT   P0
//  112 #define HAL_KEY_SW_1_BIT    BV(6)
//  113 #define HAL_KEY_SW_1_SEL    P0SEL
//  114 #define HAL_KEY_SW_1_DIR    P0DIR
//  115 
//  116 /* SW_2 is at P0.7 */
//  117 #define HAL_KEY_SW_2_PORT   P0
//  118 #define HAL_KEY_SW_2_BIT    BV(7)
//  119 #define HAL_KEY_SW_2_SEL    P0SEL
//  120 #define HAL_KEY_SW_2_DIR    P0DIR
//  121 
//  122 /* edge interrupt */
//  123 #define HAL_KEY_SW_1_EDGEBIT  BV(0)
//  124 #define HAL_KEY_SW_1_EDGE     HAL_KEY_FALLING_EDGE
//  125 
//  126 #define HAL_KEY_SW_2_EDGEBIT  BV(0)
//  127 #define HAL_KEY_SW_2_EDGE     HAL_KEY_FALLING_EDGE
//  128 
//  129 /* Port_0 interrupts */
//  130 #define HAL_KEY_SW_IEN        IEN1  /* CPU interrupt mask register */
//  131 #define HAL_KEY_SW_IENBIT     BV(5) /* Mask bit for all of Port_0 */
//  132 #define HAL_KEY_SW_ICTL       P0IEN /* Port Interrupt Control register */
//  133 #define HAL_KEY_SW_PXIFG      P0IFG /* Interrupt flag at source */
//  134 
//  135 /* SW_1,2 interrupts */
//  136 #define HAL_KEY_SW_1_ICTLBIT  BV(6) /* P0IEN - P0.6 enable/disable bit */
//  137 #define HAL_KEY_SW_2_ICTLBIT  BV(7) /* P0IEN - P0.7 enable/disable bit */
//  138 
//  139 
//  140 
//  141 
//  142 /**************************************************************************************************
//  143  *                                            TYPEDEFS
//  144  **************************************************************************************************/
//  145 
//  146 
//  147 /**************************************************************************************************
//  148  *                                        GLOBAL VARIABLES
//  149  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  150 static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
halKeySavedKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  151 static halKeyCBack_t pHalKeyProcessFunction;
pHalKeyProcessFunction:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  152 static uint8 HalKeyConfigured;
HalKeyConfigured:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  153 bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
Hal_KeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 
//  155 /**************************************************************************************************
//  156  *                                        FUNCTIONS - Local
//  157  **************************************************************************************************/
//  158 void halProcessKeyInterrupt(void);
//  159 
//  160 
//  161 
//  162 /**************************************************************************************************
//  163  *                                        FUNCTIONS - API
//  164  **************************************************************************************************/
//  165 
//  166 
//  167 /**************************************************************************************************
//  168  * @fn      HalKeyInit
//  169  *
//  170  * @brief   Initilize Key Service
//  171  *
//  172  * @param   none
//  173  *
//  174  * @return  None
//  175  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 void HalKeyInit( void )
HalKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalKeyInit
//  177 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  178   /* Initialize previous key to 0 */ 
//  179   halKeySavedKeys = 0;
        CLR     A
        MOV     DPTR,#halKeySavedKeys
        MOVX    @DPTR,A
//  180 
//  181   HAL_KEY_SW_1_SEL &= ~(HAL_KEY_SW_1_BIT);    /* Set pin function to GPIO */
        ANL     0xf3,#0xbf
//  182   HAL_KEY_SW_1_DIR &= ~(HAL_KEY_SW_1_BIT);    /* Set pin direction to Input */
        ANL     0xfd,#0xbf
//  183   P0INP&=~0XC0;//P0.6 P0.7 ÉÏÀ­ÏÂÀ²Ä£Ê½
        ANL     0x8f,#0x3f
        MOV     A,0x8f
//  184   P2INP&=~0X20;//P0.6 P0.7 ÉÏÀ²Ä£Ê½
        ANL     0xf7,#0xdf
//  185   HAL_KEY_SW_2_SEL &= ~(HAL_KEY_SW_2_BIT);    /* Set pin function to GPIO */
        ANL     0xf3,#0x7f
//  186   HAL_KEY_SW_2_DIR &= ~(HAL_KEY_SW_2_BIT);    /* Set pin direction to Input */
        ANL     0xfd,#0x7f
//  187   /* Initialize callback function */
//  188   pHalKeyProcessFunction  = NULL;   
        MOV     DPTR,#pHalKeyProcessFunction
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  189 
//  190   /* Start with key is not configured */
//  191   HalKeyConfigured = FALSE;
        MOV     DPTR,#HalKeyConfigured
        MOVX    @DPTR,A
//  192 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
        REQUIRE P0INP
        REQUIRE P0SEL
        REQUIRE P2INP
        REQUIRE P0DIR
//  193 
//  194 
//  195 /**************************************************************************************************
//  196  * @fn      HalKeyConfig
//  197  *
//  198  * @brief   Configure the Key serivce
//  199  *
//  200  * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
//  201  *          cback - pointer to the CallBack function
//  202  *
//  203  * @return  None
//  204  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
HalKeyConfig:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalKeyConfig
//  206 {
        FUNCALL HalKeyConfig, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalKeyConfig, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  207   /* Enable/Disable Interrupt or */
//  208   Hal_KeyIntEnable = interruptEnable;
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    @DPTR,A
//  209 
//  210   /* Register the callback fucntion */
//  211   pHalKeyProcessFunction = cback;
        MOV     DPTR,#pHalKeyProcessFunction
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  212 
//  213   /* Determine if interrupt is enable or not */
//  214   if (Hal_KeyIntEnable)
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    A,@DPTR
        JZ      ??HalKeyConfig_0
//  215   {
//  216     /* Rising/Falling edge configuratinn */
//  217 
//  218     PICTL &= ~(HAL_KEY_SW_1_EDGEBIT);    /* Clear the edge bit */
        ANL     0x8c,#0xfe
//  219     PICTL &= ~(HAL_KEY_SW_2_EDGEBIT);    /* Clear the edge bit */
        ANL     0x8c,#0xfe
//  220     /* For falling edge, the bit must be set. */
//  221   #if (HAL_KEY_SW_1_EDGE == HAL_KEY_FALLING_EDGE)
//  222     PICTL |= HAL_KEY_SW_1_EDGEBIT;
        ORL     0x8c,#0x1
//  223   #endif
//  224   #if (HAL_KEY_SW_2_EDGE == HAL_KEY_FALLING_EDGE)
//  225     PICTL |= HAL_KEY_SW_2_EDGEBIT;
        ORL     0x8c,#0x1
//  226   #endif
//  227 
//  228 
//  229     /* Interrupt configuration:
//  230      * - Enable interrupt generation at the port
//  231      * - Enable CPU interrupt
//  232      * - Clear any pending interrupt
//  233      */
//  234     HAL_KEY_SW_ICTL |= ( HAL_KEY_SW_1_ICTLBIT | HAL_KEY_SW_2_ICTLBIT );
        ORL     0xab,#0xc0
        MOV     A,0xab
//  235     HAL_KEY_SW_IEN  |= HAL_KEY_SW_IENBIT;
        SETB    0xb8.5
//  236     HAL_KEY_SW_PXIFG= (uint8)(~(HAL_KEY_SW_1_BIT | HAL_KEY_SW_2_BIT));
        MOV     0x89,#0x3f
//  237 
//  238     /* Rising/Falling edge configuratinn */
//  239 
//  240 
//  241     /* Do this only after the hal_key is configured - to work with sleep stuff */
//  242     if (HalKeyConfigured == TRUE)
        MOV     DPTR,#HalKeyConfigured
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??HalKeyConfig_1
//  243     {
//  244       osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??HalKeyConfig_1
//  245     }
//  246   }
//  247   else    /* Interrupts NOT enabled */
//  248   {
//  249     HAL_KEY_SW_ICTL &= ~(HAL_KEY_SW_1_ICTLBIT | HAL_KEY_SW_2_ICTLBIT); /* don't generate interrupt */
??HalKeyConfig_0:
        ANL     0xab,#0x3f
        MOV     A,0xab
//  250     HAL_KEY_SW_IEN  &= ~(HAL_KEY_SW_IENBIT);    /* Clear interrupt enable bit */
        CLR     0xb8.5
//  251 
//  252     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  253   }
//  254 
//  255   /* Key now is configured */
//  256   HalKeyConfigured = TRUE;
??HalKeyConfig_1:
        MOV     A,#0x1
        MOV     DPTR,#HalKeyConfigured
        MOVX    @DPTR,A
//  257 }
        MOV     R7,A
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE P0IFG
        REQUIRE PICTL
        REQUIRE P0IEN
        REQUIRE _A_IEN1
//  258 
//  259 
//  260 /**************************************************************************************************
//  261  * @fn      HalKeyRead
//  262  *
//  263  * @brief   Read the current value of a key
//  264  *
//  265  * @param   None
//  266  *
//  267  * @return  keys - current keys status
//  268  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  269 uint8 HalKeyRead ( void )
HalKeyRead:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalKeyRead
//  270 {
        ; Saved register size: 0
        ; Auto size: 0
//  271   uint8 keys = 0;
        MOV     R1,#0x0
//  272 
//  273   if (HAL_PUSH_BUTTON1())
        MOV     C,0x80.6
        JNC     ??HalKeyRead_0
//  274   {
//  275     keys |= HAL_KEY_SW_1;
//  276   }
//  277   else if (HAL_PUSH_BUTTON2())
        MOV     C,0x80.7
        JC      ??HalKeyRead_1
//  278   {
//  279     keys |= HAL_KEY_SW_2;
        INC     R1
??HalKeyRead_0:
        INC     R1
//  280   }
//  281   else
//  282   {
//  283 	keys = 0x00;
//  284   }
//  285 
//  286   return keys;
??HalKeyRead_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0
//  287 }
//  288 
//  289 
//  290 /**************************************************************************************************
//  291  * @fn      HalKeyPoll
//  292  *
//  293  * @brief   Called by hal_driver to poll the keys
//  294  *
//  295  * @param   None
//  296  *
//  297  * @return  None
//  298  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  299 void HalKeyPoll (void)
HalKeyPoll:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function HalKeyPoll
//  300 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  301   uint8 keys = 0;
        MOV     R1,#0x0
//  302 
//  303   if (HAL_PUSH_BUTTON1())
        MOV     C,0x80.6
        JNC     ??HalKeyPoll_0
//  304   {
//  305     keys |= HAL_KEY_SW_1;
//  306   }
//  307   else if (HAL_PUSH_BUTTON2())
        MOV     C,0x80.7
        JC      ??HalKeyPoll_1
//  308   {
//  309     keys |= HAL_KEY_SW_2;
        INC     R1
??HalKeyPoll_0:
        INC     R1
//  310   }
//  311   else
//  312   {
//  313 	keys = 0x00;
//  314   }
//  315 
//  316   /* If interrupts are not enabled, previous key status and current key status
//  317    * are compared to find out if a key has changed status.
//  318    */
//  319   if (!Hal_KeyIntEnable)
??HalKeyPoll_1:
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    A,@DPTR
        JNZ     ??HalKeyPoll_2
//  320   {
//  321     if (keys == halKeySavedKeys)
        MOV     DPTR,#halKeySavedKeys
        MOVX    A,@DPTR
        XRL     A,R1
        JZ      ??HalKeyPoll_3
//  322     {
//  323       /* Exit - since no keys have changed */
//  324       return;
//  325     }
//  326     /* Store the current keys for comparation next time */
//  327     halKeySavedKeys = keys;
        MOV     A,R1
        MOVX    @DPTR,A
//  328   }
//  329   else
//  330   {
//  331     /* Key interrupt handled here */
//  332   }
//  333   
//  334   /* Invoke Callback if new keys were depressed */
//  335   if (keys && (pHalKeyProcessFunction))
??HalKeyPoll_2:
        MOV     A,R1
        JZ      ??HalKeyPoll_3
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    A,@DPTR
        JNZ     ??HalKeyPoll_4
        INC     DPTR
        MOVX    A,@DPTR
??HalKeyPoll_4:
        JZ      ??HalKeyPoll_3
//  336   {
//  337     (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
        ; Setup parameters for indirect call
        MOV     R2,#0x0
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  338   }
??HalKeyPoll_3:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
        REQUIRE _A_P0
//  339 }
//  340 
//  341 
//  342 
//  343 /**************************************************************************************************
//  344  * @fn      halProcessKeyInterrupt
//  345  *
//  346  * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
//  347  *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
//  348  *
//  349  * @param
//  350  *
//  351  * @return
//  352  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  353 void halProcessKeyInterrupt (void)
halProcessKeyInterrupt:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function halProcessKeyInterrupt
//  354 {
        FUNCALL halProcessKeyInterrupt, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  355   bool valid=FALSE;
//  356 
//  357   if((HAL_KEY_SW_PXIFG & HAL_KEY_SW_1_BIT)||(HAL_KEY_SW_PXIFG & HAL_KEY_SW_2_BIT))  /* Interrupt Flag has been set */
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JC      ??halProcessKeyInterrupt_0
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.7
        JNC     ??halProcessKeyInterrupt_1
//  358   {
//  359     HAL_KEY_SW_PXIFG = (uint8)(~(HAL_KEY_SW_1_BIT | HAL_KEY_SW_2_BIT)); /* Clear Interrupt Flag */
??halProcessKeyInterrupt_0:
        MOV     0x89,#0x3f
//  360     valid = TRUE;
//  361   }
//  362   if (valid)
//  363   {
//  364     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x19
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        CFI EndBlock cfiBlock4
//  365   }
//  366 }
??halProcessKeyInterrupt_1:
        REQUIRE ?Subroutine0
        REQUIRE P0IFG
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  367 
//  368 /**************************************************************************************************
//  369  * @fn      HalKeyEnterSleep
//  370  *
//  371  * @brief  - Get called to enter sleep mode
//  372  *
//  373  * @param
//  374  *
//  375  * @return
//  376  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  377 void HalKeyEnterSleep ( void )
HalKeyEnterSleep:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalKeyEnterSleep
//  378 {
        ; Saved register size: 0
        ; Auto size: 0
//  379 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  380 
//  381 /**************************************************************************************************
//  382  * @fn      HalKeyExitSleep
//  383  *
//  384  * @brief   - Get called when sleep is over
//  385  *
//  386  * @param
//  387  *
//  388  * @return  - return saved keys
//  389  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  390 uint8 HalKeyExitSleep ( void )
HalKeyExitSleep:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalKeyExitSleep
//  391 {
        FUNCALL HalKeyExitSleep, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  392   /* Wake up and read keys */
//  393   return ( HalKeyRead () );
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock7
//  394 }
//  395 
//  396 /***************************************************************************************************
//  397  *                                    INTERRUPT SERVICE ROUTINE
//  398  ***************************************************************************************************/
//  399 
//  400 /**************************************************************************************************
//  401  * @fn      halKeyPort0Isr
//  402  *
//  403  * @brief   Port0 ISR
//  404  *
//  405  * @param
//  406  *
//  407  * @return
//  408  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  409 HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
halKeyPort0Isr:
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function halKeyPort0Isr
//  410 {
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  411   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
        SETB    0xa8.7
//  412 
//  413   if((HAL_KEY_SW_PXIFG & HAL_KEY_SW_1_BIT)||(HAL_KEY_SW_PXIFG & HAL_KEY_SW_2_BIT))
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JC      ??halKeyPort0Isr_0
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.7
        JNC     ??halKeyPort0Isr_1
//  414   {
//  415   halProcessKeyInterrupt();
??halKeyPort0Isr_0:
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ??halProcessKeyInterrupt?relay
//  416   }
//  417   /*
//  418     Clear the CPU interrupt flag for Port_0
//  419     PxIFG has to be cleared before PxIF
//  420   */
//  421   HAL_KEY_SW_PXIFG = 0;
??halKeyPort0Isr_1:
        MOV     0x89,#0x0
//  422   HAL_KEY_CPU_PORT_0_IF = 0;
        CLR     0xc0.5
//  423   CLEAR_SLEEP_MODE();
//  424   HAL_EXIT_ISR();
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  425 }
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock8
        REQUIRE P0IFG
        REQUIRE _A_IEN0
        REQUIRE _A_IRCON

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??halKeyPort0Isr??INTVEC 107`:
        LJMP       (halKeyPort0Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyPoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessKeyInterrupt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessKeyInterrupt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyEnterSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyEnterSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyExitSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyExitSleep

        END
//  426 #else
//  427 
//  428 void HalKeyInit(void){}
//  429 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
//  430 uint8 HalKeyRead(void){ return 0;}
//  431 void HalKeyPoll(void){}
//  432 
//  433 #endif /* HAL_KEY */
//  434 
//  435 
//  436 
//  437 
//  438 
//  439 /**************************************************************************************************
//  440 **************************************************************************************************/
//  441 
//  442 
//  443 
// 
// 275 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
//  45 bytes in segment NEAR_CODE
//  11 bytes in segment SFR_AN
//   5 bytes in segment XDATA_Z
// 
// 362 bytes of CODE  memory (+  3 bytes shared)
//   0 bytes of DATA  memory (+ 11 bytes shared)
//   5 bytes of XDATA memory
//
//Errors: none
//Warnings: none
