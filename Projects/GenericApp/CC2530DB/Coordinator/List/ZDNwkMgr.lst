###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:41:44 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\stack\zdo\ZDNwk #
#                          Mgr.c                                              #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\stack\zdo\ZDNwkMgr.c" -D ZTOOL_P1 -D      #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D            #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\ZDNwkMgr.lst                   #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\ZDNwkMgr.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\stack\zdo\ZDNwkMgr.c
      1          /**************************************************************************************************
      2            Filename:       ZDNwkMgr.c
      3            Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
      4            Revision:       $Revision: 15716 $
      5          
      6            Description:    The ZigBee Network Manager.
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComdef.h"
     49          #include "nwk_util.h"
     50          #include "ZDApp.h"
     51          #include "ZDObject.h"
     52          #include "ZGlobals.h"
     53          #include "ZDNwkMgr.h"
     54          
     55          #if defined( MT_ZDO_FUNC )
     56            #include "MT_ZDO.h"
     57          #endif
     58            
     59          #include "OnBoard.h"
     60          
     61          
     62          /* HAL */
     63          #include "hal_lcd.h"
     64            
     65          /******************************************************************************
     66           * CONSTANTS
     67           */
     68          
     69          #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
     70          

   \                                 In  segment XDATA_ROM_C, align 1
     71          const char NwkMgrStr_1[]     = "NM-fail not hi";
   \                     NwkMgrStr_1:
   \   000000   4E4D2D66     DB "NM-fail not hi"
   \            61696C20
   \            6E6F7420
   \            686900  

   \                                 In  segment XDATA_ROM_C, align 1
     72          const char NwkMgrStr_2[]     = "NM-cur<last fail";
   \                     NwkMgrStr_2:
   \   000000   4E4D2D63     DB "NM-cur<last fail"
   \            75723C6C
   \            61737420
   \            6661696C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     73          const char NwkMgrStr_3[]     = "NM-energy too hi";
   \                     NwkMgrStr_3:
   \   000000   4E4D2D65     DB "NM-energy too hi"
   \            6E657267
   \            7920746F
   \            6F206869
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     74          const char NwkMgrStr_4[]     = "NM-energy not up";
   \                     NwkMgrStr_4:
   \   000000   4E4D2D65     DB "NM-energy not up"
   \            6E657267
   \            79206E6F
   \            74207570
   \            00      
     75            
     76          /******************************************************************************
     77           * TYPEDEFS
     78           */
     79          
     80          /*********************************************************************
     81           * GLOBAL VARIABLES
     82           */
     83            
     84          // Task ID for internal task/event processing. This variable will be
     85          // received when ZDNwkMgr_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          uint8 ZDNwkMgr_TaskID = 0;
   \                     ZDNwkMgr_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     87          
     88          /******************************************************************************
     89           * LOCAL VARIABLES
     90           */
     91          
     92          // Frequency Agility variables

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
   \                     ZDNwkMgr_UpdateNotifyTimer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ZDNwkMgr_NumUpdateNotifySent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ZDNwkMgr_WaitingForNotifyConfirm:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint16 ZDNwkMgr_TotalTransmissions;
   \                     ZDNwkMgr_TotalTransmissions:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint16 ZDNwkMgr_TxFailures;
   \                     ZDNwkMgr_TxFailures:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    100          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
   \                     ZDNwkMgr_MgmtNwkUpdateReq:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    102            
    103          #if defined ( NWK_MANAGER )
    104          uint16 ZDNwkMgr_UpdateRequestTimer = 0;
    105          uint8  ZDNwkMgr_LastChannelEnergy = 0;
    106          uint16 ZDNwkMgr_LastChannelFailureRate = 0;
    107          #endif // NWK_MANAGER
    108          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 ZDNwkMgr_NewChannel;
   \                     ZDNwkMgr_NewChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          
    111          // PAN ID Conflict variables
    112          #if defined ( NWK_MANAGER )
    113          uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
    114          #endif // NWK_MANAGER
    115          
    116          /*********************************************************************
    117           * GLOBAL FUNCTIONS
    118           */
    119          // Freguency Agility functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
   \                     pZDNwkMgr_ReportChannelInterference:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
   \                     pZDNwkMgr_ProcessDataConfirm:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
   \                     pZDNwkMgr_EDScanConfirmCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    123          
    124          // PAN ID Conflict functions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
   \                     pZDNwkMgr_NetworkReportCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
   \                     pZDNwkMgr_NetworkUpdateCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    127          
    128          /******************************************************************************
    129           * LOCAL FUNCTIONS
    130           */
    131          
    132          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
    133          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
    134          
    135          // Frequency Agility functions
    136          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    137          
    138          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
    139          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
    140          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    141          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    142          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
    143                                                         uint16 totalTransmissions, uint16 txFailures,
    144                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
    145          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
    146          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
    147          void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
    148          
    149          #if defined ( NWK_MANAGER )
    150          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
    151          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
    152          #endif // NWK_MANAGER
    153          
    154          // PAN ID Conflict functions
    155          #if defined ( NWK_MANAGER )
    156          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
    157          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
    158          
    159          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
    160          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
    161          #endif // NWK_MANAGER
    162          
    163          /*********************************************************************
    164           * @fn      ZDNwkMgr_Init
    165           *
    166           * @brief   Initialization function for the Network Manager Task.
    167           *          This is called during initialization and should contain
    168           *          any application specific initialization (ie. hardware
    169           *          initialization/setup, table initialization, power up
    170           *          notificaiton ... ).
    171           *
    172           * @param   task_id - the ID assigned by OSAL.  This ID should be
    173           *                    used to send messages and set timers.
    174           *
    175           * @return  none
    176           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    177          void ZDNwkMgr_Init( byte task_id )
   \                     ZDNwkMgr_Init:
    178          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    179            // Save the task ID
    180            ZDNwkMgr_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000009   F0           MOVX    @DPTR,A
    181          
    182            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
   \   00000A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000A   7A15         MOV     R2,#0x15
   \   00000C   7B80         MOV     R3,#-0x80
   \   00000E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    183          
    184            // Frequecy Agility initialization
    185            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A38         MOV     R2,#0x38
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    186          #if defined ( NWK_MANAGER )
    187            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
    188          #endif // NWK_MANAGER
    189          
    190            pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
   \   00001D   90....       MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
   \   000020   74..         MOV     A,#(??ZDNwkMgr_EDScanConfirmCB?relay & 0xff)
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#((??ZDNwkMgr_EDScanConfirmCB?relay >> 8) & 0xff)
   \   000026   F0           MOVX    @DPTR,A
    191            pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
   \   000027   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00002A   74..         MOV     A,#(??ZDNwkMgr_ProcessDataConfirm?relay & 0xff)
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   74..         MOV     A,#((??ZDNwkMgr_ProcessDataConfirm?relay >> 8) & 0xff)
   \   000030   F0           MOVX    @DPTR,A
    192            pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
   \   000031   90....       MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
   \   000034   74..         MOV     A,#(??ZDNwkMgr_ReportChannelInterference?relay & 0xff)
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#((??ZDNwkMgr_ReportChannelInterference?relay >> 8) & 0xff)
   \   00003A   F0           MOVX    @DPTR,A
    193            
    194            // PAN ID Conflict initialization
    195          #if defined ( NWK_MANAGER )
    196            pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
    197            pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
    198          #endif // NWK_MANAGER
    199            
    200            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
   \   00003B   7402         MOV     A,#0x2
   \   00003D   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8)
   \   000040   F0           MOVX    @DPTR,A
    201            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000041   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000044   74FE         MOV     A,#-0x2
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   F0           MOVX    @DPTR,A
    202          }
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    203          
    204          /*********************************************************************
    205           * @fn      ZDNwkMgr_event_loop
    206           *
    207           * @brief   Main event loop for the Network Manager task. This function
    208           *          is called to process all events for the task.  Events
    209           *          include timers, messages and any other user defined events.
    210           *
    211           * @param   task_id  - The OSAL assigned task ID.
    212           * @param   events - events to process.  This is a bit map and can
    213           *                   contain more than one event.
    214           *
    215           * @return  none
    216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
   \                     ZDNwkMgr_event_loop:
    218          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    219            osal_event_hdr_t *msgPtr;
    220            (void)task_id;  // Intentionally unreferenced parameter
    221          
    222            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??ZDNwkMgr_event_loop_0
   \   000010   E9           MOV     A,R1
   \                     ??ZDNwkMgr_event_loop_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDNwkMgr_event_loop_1 & 0xFFFF
    223            {
    224              msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   800E         SJMP    ??ZDNwkMgr_event_loop_2
   \                     ??ZDNwkMgr_event_loop_3:
   \   000018                ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
    225              while ( msgPtr )
    226              {
    227                switch ( msgPtr->event )
    228                {
    229                  case ZDO_CB_MSG:
    230                    // ZDO sends the message that we registered for
    231                    ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \   000018   AA..         MOV     R2,?V0 + 0
   \   00001A   AB..         MOV     R3,?V0 + 1
   \   00001C   12....       LCALL   ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay
    232                    break;
    233                   
    234                  case NM_CHANNEL_INTERFERE:
    235                    // NWK layer sends the message when it detectes Channel Interference
    236                    ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
    237                    break;
    238             
    239                  case NM_ED_SCAN_CONFIRM:
    240                    // NWK layer sends the message when it receives an ED scan confirmation
    241                    ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
    242                    break;
    243          #if defined ( NWK_MANAGER )
    244                  case ZDO_NETWORK_REPORT:
    245                    // NWK layer sends this message when it receives a Network Report message
    246                    ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
    247                    break;
    248                 
    249                  case ZDO_NETWORK_UPDATE:
    250                    // NKW layer sends this message when it receives a Network Update message
    251                    ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
    252                    break;
    253          #endif // NWK_MANAGER         
    254                  default:
    255                    break;
    256                }
    257          
    258                // Release the memory
    259                osal_msg_deallocate( (uint8 *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_4:
   \   00001F                ; Setup parameters for call to function osal_msg_deallocate
   \   00001F   AA..         MOV     R2,?V0 + 0
   \   000021   AB..         MOV     R3,?V0 + 1
   \   000023   12....       LCALL   ??osal_msg_deallocate?relay
    260          
    261                // Next
    262                msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   000026                ; Setup parameters for call to function osal_msg_receive
   \                     ??ZDNwkMgr_event_loop_2:
   \   000026   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_msg_receive?relay
   \   00002E   8A..         MOV     ?V0 + 0,R2
   \   000030   8B..         MOV     ?V0 + 1,R3
   \   000032   E5..         MOV     A,?V0 + 0
   \   000034   7002         JNZ     ??ZDNwkMgr_event_loop_5
   \   000036   E5..         MOV     A,?V0 + 1
   \                     ??ZDNwkMgr_event_loop_5:
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??ZDNwkMgr_event_loop_6 & 0xFFFF
   \   00003D   85..82       MOV     DPL,?V0 + 0
   \   000040   85..83       MOV     DPH,?V0 + 1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDNwkMgr_event_loop>_0`:
   \   000047   00           DB        0
   \   000048   03           DB        3
   \   000049   31           DB        49
   \   00004A   ....         DW        ??ZDNwkMgr_event_loop_7
   \   00004C   32           DB        50
   \   00004D   ....         DW        ??ZDNwkMgr_event_loop_8
   \   00004F   D3           DB        211
   \   000050   ....         DW        ??ZDNwkMgr_event_loop_9
   \   000052   ....         DW        ??ZDNwkMgr_event_loop_4
   \                     ??ZDNwkMgr_event_loop_9:
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   240C         ADD     A,#0xc
   \   000058   F582         MOV     DPL,A
   \   00005A   E5..         MOV     A,?V0 + 1
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V0 + 2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V0 + 3,A
   \   000067   78..         MOV     R0,#?V0 + 2
   \   000069   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDNwkMgr_event_loop>_1`:
   \   00006C   0000         DW        0
   \   00006E   0200         DW        2
   \   000070   3800         DW        56
   \   000072   ....         DW        ??ZDNwkMgr_event_loop_3
   \   000074   1580         DW        32789
   \   000076   ....         DW        ??ZDNwkMgr_event_loop_10
   \   000078   ....         DW        ??ZDNwkMgr_event_loop_4
   \                     ??ZDNwkMgr_event_loop_10:
   \   00007A                ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
   \   00007A   AA..         MOV     R2,?V0 + 0
   \   00007C   AB..         MOV     R3,?V0 + 1
   \   00007E   12....       LCALL   ??ZDNwkMgr_ProcessServerDiscRsp?relay
   \   000081   809C         SJMP    ??ZDNwkMgr_event_loop_4
   \                     ??ZDNwkMgr_event_loop_7:
   \   000083   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C3           CLR     C
   \   000088   9404         SUBB    A,#0x4
   \   00008A   5093         JNC     ??ZDNwkMgr_event_loop_4
   \   00008C                ; Setup parameters for call to function NLME_EDScanRequest
   \   00008C   90....       MOV     DPTR,#(_NIB + 42)
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   90....       MOV     DPTR,#__Constant_7fff800
   \   000094   78..         MOV     R0,#?V0 + 4
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   AA..         MOV     R2,?V0 + 4
   \   00009B   AB..         MOV     R3,?V0 + 5
   \   00009D   AC..         MOV     R4,?V0 + 6
   \   00009F   AD..         MOV     R5,?V0 + 7
   \   0000A1   12....       LCALL   ??NLME_EDScanRequest?relay
   \   0000A4   E9           MOV     A,R1
   \   0000A5   6003         JZ      $+5
   \   0000A7   02....       LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
   \   0000AA   85..82       MOV     DPL,?V0 + 0
   \   0000AD   85..83       MOV     DPH,?V0 + 1
   \   0000B0   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B3   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   0000B6   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000B9   85..82       MOV     DPL,?V0 + 0
   \   0000BC   85..83       MOV     DPH,?V0 + 1
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000C4   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   0000C7   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000CA   74FF         MOV     A,#-0x1
   \                     ??ZDNwkMgr_event_loop_11:
   \   0000CC   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   02....       LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
   \                     ??ZDNwkMgr_event_loop_8:
   \   0000D3   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   64FF         XRL     A,#0xff
   \   0000D9   700A         JNZ     ??ZDNwkMgr_event_loop_12
   \   0000DB                ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
   \   0000DB   AA..         MOV     R2,?V0 + 0
   \   0000DD   AB..         MOV     R3,?V0 + 1
   \   0000DF   12....       LCALL   ??ZDNwkMgr_CheckForChannelInterference?relay
   \   0000E2   E4           CLR     A
   \   0000E3   80E7         SJMP    ??ZDNwkMgr_event_loop_11
   \                     ??ZDNwkMgr_event_loop_12:
   \   0000E5                ; Setup parameters for call to function nwkTransmissionFailures
   \   0000E5   7900         MOV     R1,#0x0
   \   0000E7   12....       LCALL   ??nwkTransmissionFailures?relay
   \   0000EA   8A..         MOV     ?V0 + 2,R2
   \   0000EC   8B..         MOV     ?V0 + 3,R3
   \   0000EE                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   0000EE   75..00       MOV     ?V0 + 4,#0x0
   \   0000F1   78..         MOV     R0,#?V0 + 4
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   78..         MOV     R0,#?V0 + 0
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   78..         MOV     R0,#?V0 + 2
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   90....       MOV     DPTR,#(_NIB + 107)
   \   000103   12....       LCALL   ?Subroutine8 & 0xFFFF
    263              }
   \                     ??CrossCallReturnLabel_4:
   \   000106   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F9           MOV     R1,A
   \   00010B   12....       LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
   \   00010E   7405         MOV     A,#0x5
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
   \   000116   E0           MOVX    A,@DPTR
   \   000117   7003         JNZ     $+5
   \   000119   02....       LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
   \   00011C                ; Setup parameters for call to function osal_start_timerEx
   \   00011C   7C32         MOV     R4,#0x32
   \   00011E   7D00         MOV     R5,#0x0
   \   000120   7A08         MOV     R2,#0x8
   \   000122   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000125   02....       LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
    264              
    265              // Return unprocessed events
    266              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDNwkMgr_event_loop_6:
   \   000128   EE           MOV     A,R6
   \   000129   FA           MOV     R2,A
   \   00012A   7480         MOV     A,#-0x80
   \   00012C   6F           XRL     A,R7
   \                     ??ZDNwkMgr_event_loop_13:
   \   00012D   FB           MOV     R3,A
   \   00012E   02....       LJMP    ??ZDNwkMgr_event_loop_14 & 0xFFFF
    267            }
    268          
    269            if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
   \                     ??ZDNwkMgr_event_loop_1:
   \   000131   EE           MOV     A,R6
   \   000132   A2E0         MOV     C,0xE0 /* A   */.0
   \   000134   501E         JNC     ??ZDNwkMgr_event_loop_15
    270            {       
    271              // Switch channel
    272              _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
   \   000136   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   90....       MOV     DPTR,#(_NIB + 22)
   \   00013D   F0           MOVX    @DPTR,A
    273              ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
   \   00013E                ; Setup parameters for call to function ZMacSetReq
   \   00013E   7A..         MOV     R2,#(ZDNwkMgr_NewChannel & 0xff)
   \   000140   7B..         MOV     R3,#((ZDNwkMgr_NewChannel >> 8) & 0xff)
   \   000142   79E1         MOV     R1,#-0x1f
   \   000144   12....       LCALL   ??ZMacSetReq?relay
    274           
    275              // Our Channel has been changed -- notify to save info into NV
    276              ZDApp_NwkStateUpdateCB();
   \   000147                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000147   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
    277              
    278              // Reset the total transmit count and the transmit failure counters
    279              _NIB.nwkTotalTransmissions = 0;
   \   00014A   12....       LCALL   ?Subroutine4 & 0xFFFF
    280              nwkTransmissionFailures( TRUE );
    281              
    282              return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_0:
   \   00014D   7401         MOV     A,#0x1
   \                     ??ZDNwkMgr_event_loop_16:
   \   00014F   6E           XRL     A,R6
   \   000150   FA           MOV     R2,A
   \   000151   EF           MOV     A,R7
   \   000152   80D9         SJMP    ??ZDNwkMgr_event_loop_13
    283            }
    284          
    285            if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
   \                     ??ZDNwkMgr_event_loop_15:
   \   000154   5402         ANL     A,#0x2
   \   000156   602A         JZ      ??ZDNwkMgr_event_loop_17
    286            {
    287              // Update the Update Notify timer
    288              if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
   \   000158   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   7002         JNZ     ??ZDNwkMgr_event_loop_18
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \                     ??ZDNwkMgr_event_loop_18:
   \   000160   6017         JZ      ??ZDNwkMgr_event_loop_19
    289              {
    290                ZDNwkMgr_UpdateNotifyTimer--;
   \   000162   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   000165   E0           MOVX    A,@DPTR
   \   000166   24FF         ADD     A,#-0x1
   \   000168   F0           MOVX    @DPTR,A
   \   000169   A3           INC     DPTR
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   34FF         ADDC    A,#-0x1
   \   00016D   F0           MOVX    @DPTR,A
    291                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   00016E                ; Setup parameters for call to function osal_start_timerEx
   \   00016E   7C60         MOV     R4,#0x60
   \   000170   7DEA         MOV     R5,#-0x16
   \   000172   7A02         MOV     R2,#0x2
   \   000174   12....       LCALL   ?Subroutine7 & 0xFFFF
    292              }
   \                     ??CrossCallReturnLabel_12:
   \   000177   8005         SJMP    ??ZDNwkMgr_event_loop_20
    293              else
    294              {
    295                ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ??ZDNwkMgr_event_loop_19:
   \   000179   E4           CLR     A
   \   00017A   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   00017D   F0           MOVX    @DPTR,A
    296              }
    297              
    298              return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
   \                     ??ZDNwkMgr_event_loop_20:
   \   00017E   7402         MOV     A,#0x2
   \   000180   80CD         SJMP    ??ZDNwkMgr_event_loop_16
    299            }
    300            
    301          #if defined ( NWK_MANAGER )
    302            if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
    303            {
    304              // Update the Update Request timer
    305              if ( ZDNwkMgr_UpdateRequestTimer > 0 )
    306              {
    307                ZDNwkMgr_UpdateRequestTimer--;
    308                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    309              }
    310              
    311              return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
    312            }
    313          #endif // NWK_MANAGER
    314            
    315            if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
   \                     ??ZDNwkMgr_event_loop_17:
   \   000182   EE           MOV     A,R6
   \   000183   5408         ANL     A,#0x8
   \   000185   602B         JZ      ??ZDNwkMgr_event_loop_21
    316            {  
    317              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   000187   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   6021         JZ      ??ZDNwkMgr_event_loop_22
    318              {
    319                if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
    320                                          ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
   \   00018D                ; Setup parameters for call to function NLME_EDScanRequest
   \   00018D   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 4)
   \   000190   E0           MOVX    A,@DPTR
   \   000191   F9           MOV     R1,A
   \   000192   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
   \   000195   78..         MOV     R0,#?V0 + 0
   \   000197   12....       LCALL   ?L_MOV_X
   \   00019A   AA..         MOV     R2,?V0 + 0
   \   00019C   AB..         MOV     R3,?V0 + 1
   \   00019E   AC..         MOV     R4,?V0 + 2
   \   0001A0   AD..         MOV     R5,?V0 + 3
   \   0001A2   12....       LCALL   ??NLME_EDScanRequest?relay
   \   0001A5   E9           MOV     A,R1
   \   0001A6   7006         JNZ     ??ZDNwkMgr_event_loop_22
    321                {
    322                  ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
   \   0001A8   90....       MOV     DPTR,#(ZDNwkMgr_MgmtNwkUpdateReq + 5)
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   14           DEC     A
   \   0001AD   F0           MOVX    @DPTR,A
    323                }
    324              }
    325                
    326              return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
   \                     ??ZDNwkMgr_event_loop_22:
   \   0001AE   7408         MOV     A,#0x8
   \   0001B0   809D         SJMP    ??ZDNwkMgr_event_loop_16
    327            }
    328            
    329            // Discard or make more handlers
    330            return 0;
   \                     ??ZDNwkMgr_event_loop_21:
   \   0001B2   7A00         MOV     R2,#0x0
   \   0001B4   7B00         MOV     R3,#0x0
   \                     ??ZDNwkMgr_event_loop_14:
   \   0001B6                REQUIRE ?Subroutine1
   \   0001B6                ; // Fall through to label ?Subroutine1
    331          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine13_0
   \   000002                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_start_timerEx?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff)
   \   000007   7B..         MOV     R3,#((ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff)
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#(_NIB + 107)
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function nwkTransmissionFailures
   \   000007                ; Setup parameters for call to function nwkTransmissionFailures
   \   000007   7901         MOV     R1,#0x1
   \   000009   12....       LCALL   ??nwkTransmissionFailures?relay
   \   00000C   22           RET
    332          
    333          /*********************************************************************
    334           * @fn      ZDNwkMgr_ProcessMsgCBs
    335           *
    336           * @brief   Process the incoming messages.
    337           *
    338           * @param   msgPtr - message to process
    339           *
    340           * @return  TRUE if message to be freed. FALSE otherwise.
    341           */
    342          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
    343          {
    344            switch ( inMsg->clusterID )
    345            {   
    346              case Mgmt_NWK_Update_req:
    347                ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
    348                break;    
    349          #if defined ( NWK_MANAGER )  
    350              case Mgmt_NWK_Update_notify:
    351                ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
    352                break;
    353          #endif // NWK_MANAGER
    354              case Server_Discovery_rsp:
    355                ZDNwkMgr_ProcessServerDiscRsp( inMsg );
    356                break;
    357                
    358              default:
    359                // Unknown message
    360                break;
    361            }
    362          }
    363          
    364          /*********************************************************************
    365           * Frequency Agility Routines
    366           */
    367          #if defined ( NWK_MANAGER )
    368          /*********************************************************************
    369           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
    370           *
    371           * @brief       This function processes the incoming Management
    372           *              Network Update notify.
    373           *
    374           * @param       pUpdateNotify - notify message
    375           *
    376           * @return      TRUE if message to be freed. FALSE otherwise.
    377           */
    378          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
    379          {
    380            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    381            {
    382              ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
    383              if ( pNotify )
    384              {
    385                ZDNwkMgr_CheckForChannelChange( pNotify );
    386          
    387                osal_mem_free( pNotify );
    388              }
    389            }
    390          }
    391          
    392          /*********************************************************************
    393           * @fn          ZDNwkMgr_CheckForChannelChange
    394           *
    395           * @brief       This function processes the incoming Management Network
    396           *              Update notify and starts an Update Request if a channel
    397           *              change is needed.
    398           *
    399           * @param       pUpdateNotify - notify message
    400           *
    401           * @return      none
    402           */
    403          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
    404          {
    405            uint8  i;
    406            uint16 failureRate;
    407            uint8  lowestEnergyIndex;
    408            uint8  lowestEnergyValue = 0xFF;
    409                
    410            // If any device has more than 50% transmission failures, a channel
    411            // change should be considered
    412            failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
    413            if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
    414            {
    415          #if defined ( SERIAL_DEBUG_SUPPORTED )
    416              printf("%s\n", (char*)NwkMgrStr_1);
    417              printf( ": %u %u\n", failureRate, ZDNWKMGR_CC_TX_FAILURE);
    418          #endif
    419              return;
    420            }
    421          
    422            // If the current failure rate is higher than the last failure rate,
    423            // a channel change should be considered
    424            if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
    425            {
    426          #if defined ( SERIAL_DEBUG_SUPPORTED )
    427              printf("%s\n", NwkMgrStr_2);
    428              printf( ": %u %u\n", failureRate,  ZDNwkMgr_LastChannelFailureRate);
    429          #endif
    430              return;
    431            }
    432            
    433            // Select a single channel based on the Mgmt_NWK_Update_notify based on
    434            // the lowest energy. This is the proposed new channel. 
    435            for ( i = 0; i < pNotify->listCount; i++ )
    436            {
    437              if ( pNotify->energyValues[i] < lowestEnergyValue )
    438              {
    439                lowestEnergyIndex = i;
    440                lowestEnergyValue = pNotify->energyValues[i];
    441              }
    442            }
    443                
    444            // If this new channel does not have an energy level below an acceptable
    445            // threshold, a channel change should not be done.
    446            if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
    447            {
    448          #if defined ( SERIAL_DEBUG_SUPPORTED )
    449              printf("%s\n", NwkMgrStr_3);
    450              printf(": %u %u\n", lowestEnergyValue, ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL);
    451          #endif
    452              return;
    453            }
    454          
    455            // Channel change should be done -- find out the new active channel
    456            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
    457            {
    458              if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
    459              {
    460                if ( lowestEnergyIndex == 0 )
    461                  break;
    462                lowestEnergyIndex--;
    463              }
    464            }
    465            
    466            if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
    467            {
    468              uint32 channelMask;
    469              zAddrType_t dstAddr;
    470              
    471              // The new channel
    472              ZDNwkMgr_NewChannel = i;
    473                  
    474              // Prior to changing channels, the network manager should store the 
    475              // energy scan value as the last energy scan value and the failure 
    476              // rate from the existing channel as the last failure rate.  These 
    477              // values are useful to allow comparison of the failure rate and energy
    478              // level on the previous channel to evaluate if the network is causing
    479              // its own interference.
    480              ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
    481              ZDNwkMgr_LastChannelFailureRate = failureRate;
    482                 
    483              // The network manager should broadcast a Mgmt_NWK_Update_req notifying
    484              // devices of the new channel.  The broadcast shall be to all routers 
    485              // and coordinator.
    486              dstAddr.addrMode = AddrBroadcast;
    487              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    488              channelMask = (uint32)1 << i;
    489                  
    490              // Increment the nwkUpdateId parameter and set the updateID in the beacon
    491              NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
    492              
    493              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
    494                  
    495              // The network manager shall set a timer based on the value of 
    496              // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
    497              // channels and shall not issue another such command until this 
    498              // timer expires.  
    499              ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
    500              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    501                            
    502              // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    503              // the local network manager shall set a timer equal to the 
    504              // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    505              // expiration of this timer.  NOTE: since we won't recevied our own
    506              // broadcasted Update Request, we start the channel change timer here.  
    507              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    508                                  ZDNWKMGR_BCAST_DELIVERY_TIME );
    509            }
    510          }
    511          #endif  // NWK_MANAGER
    512          
    513          /*********************************************************************
    514           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
    515           *
    516           * @brief       This function processes the incoming Management
    517           *              Network Update request and starts the request (if needed).
    518           *
    519           * @param       Request message
    520           *
    521           * @return      none
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessMgmtNwkUpdateReq:
    524          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
    525            ZDO_MgmtNwkUpdateReq_t Req;
    526            
    527            ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
   \   00000E                ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseMgmtNwkUpdateReq?relay
    528             
    529            if ( Req.scanDuration <= 0x05 )
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   240F         ADD     A,#0xf
   \   000026   FE           MOV     R6,A
   \   000027   E5..         MOV     A,?V0 + 3
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FF           MOV     R7,A
   \   00002C   E5..         MOV     A,?V0 + 2
   \   00002E   2402         ADD     A,#0x2
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   E5..         MOV     A,?V0 + 3
   \   000034   3400         ADDC    A,#0x0
   \   000036   F5..         MOV     ?V0 + 1,A
   \   000038   E9           MOV     A,R1
   \   000039   C3           CLR     C
   \   00003A   9406         SUBB    A,#0x6
   \   00003C   5059         JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
    530            {
    531              // Request is to scan over channelMask. The result will be reported by Confirm   
    532              if ( ( !inMsg->wasBroadcast )                     && 
    533                   ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
    534                   ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
   \   00003E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
   \   000046   7405         MOV     A,#0x5
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   14           DEC     A
   \   00004D   C3           CLR     C
   \   00004E   9405         SUBB    A,#0x5
   \   000050   4003         JC      $+5
   \   000052   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    535              {
    536                if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
   \   000055                ; Setup parameters for call to function NLME_EDScanRequest
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   78..         MOV     R0,#?V0 + 4
   \   00005D   12....       LCALL   ?L_MOV_X
   \   000060   AA..         MOV     R2,?V0 + 4
   \   000062   AB..         MOV     R3,?V0 + 5
   \   000064   AC..         MOV     R4,?V0 + 6
   \   000066   AD..         MOV     R5,?V0 + 7
   \   000068   12....       LCALL   ??NLME_EDScanRequest?relay
   \   00006B   E9           MOV     A,R1
   \   00006C   6003         JZ      $+5
   \   00006E   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    537                {
    538                  // Save off the information to be used for the notify
    539                  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   E0           MOVX    A,@DPTR
   \   000076   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
   \   000079   F0           MOVX    @DPTR,A
    540                  ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00007A   12....       LCALL   ?Subroutine3 & 0xFFFF
    541                  
    542                  Req.scanCount--;
   \                     ??CrossCallReturnLabel_24:
   \   00007D   7405         MOV     A,#0x5
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   14           DEC     A
   \   000084   F0           MOVX    @DPTR,A
    543                  
    544                  // Save off scan info for the subsequent scans
    545                  ZDNwkMgr_MgmtNwkUpdateReq = Req;
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   7C..         MOV     R4,#(ZDNwkMgr_MgmtNwkUpdateReq & 0xff)
   \   00008D   7D..         MOV     R5,#((ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff)
   \   00008F   7409         MOV     A,#0x9
   \   000091   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000094   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    546                }
    547              }
    548            }
    549            else if ( Req.scanDuration == 0xFE )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
   \   000097   74FE         MOV     A,#-0x2
   \   000099   69           XRL     A,R1
   \   00009A   7062         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
    550            {
    551              // Request is to change Channel. The command provide a new active
    552              // channel as a single channel in the channelMask.
    553              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   00009C   7406         MOV     A,#0x6
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A4   4003         JC      $+5
   \   0000A6   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    554              {
    555                uint8 i;
    556                
    557                // Set update ID in the Beacon
    558                NLME_SetUpdateID(Req.nwkUpdateId); 
   \   0000A9                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000A9   12....       LCALL   ??NLME_SetUpdateID?relay
    559                
    560                // Find out the new active channel
    561                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   0000AC   7A00         MOV     R2,#0x0
    562                {
    563                  if ( ( (uint32)1 << i ) & Req.channelMask )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
   \   0000AE   75..01       MOV     ?V0 + 0,#0x1
   \   0000B1   75..00       MOV     ?V0 + 1,#0x0
   \   0000B4   75..00       MOV     ?V0 + 2,#0x0
   \   0000B7   75..00       MOV     ?V0 + 3,#0x0
   \   0000BA   EA           MOV     A,R2
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?L_SHL
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?L_AND_X
   \   0000CB   90....       MOV     DPTR,#__Constant_0
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?L_EQ_X
   \   0000D3   7007         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
    564                  {
    565                    break;
    566                  }
    567                }
   \   0000D5   0A           INC     R2
   \   0000D6   EA           MOV     A,R2
   \   0000D7   C3           CLR     C
   \   0000D8   941B         SUBB    A,#0x1b
   \   0000DA   40D2         JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
    568          
    569                if ( _NIB.nwkLogicalChannel != i )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
   \   0000DC   90....       MOV     DPTR,#(_NIB + 22)
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6A           XRL     A,R2
   \   0000E1   7003         JNZ     $+5
   \   0000E3   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    570                {
    571                  ZDNwkMgr_NewChannel = i;
   \   0000E6   EA           MOV     A,R2
   \   0000E7   90....       MOV     DPTR,#ZDNwkMgr_NewChannel
   \   0000EA   F0           MOVX    @DPTR,A
    572                    
    573                  // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    574                  // the local network manager shall set a timer equal to the 
    575                  // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    576                  // expiration of this timer.  Each node shall also increment the 
    577                  // nwkUpdateId parameter and also reset the total transmit count 
    578                  // and the transmit failure counters.  
    579                  osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    580                                      ZDNWKMGR_BCAST_DELIVERY_TIME );
   \   0000EB                ; Setup parameters for call to function osal_start_timerEx
   \   0000EB   90....       MOV     DPTR,#(_NIB + 7)
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   75F064       MOV     B,#0x64
   \   0000F2   A4           MUL     AB
   \   0000F3   FC           MOV     R4,A
   \   0000F4   ADF0         MOV     R5,B
   \   0000F6   7A01         MOV     R2,#0x1
   \   0000F8   12....       LCALL   ?Subroutine7 & 0xFFFF
    581                }
    582              }
    583            }
   \                     ??CrossCallReturnLabel_13:
   \   0000FB   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    584            else if ( Req.scanDuration == 0xFF )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
   \   0000FE   74FF         MOV     A,#-0x1
   \   000100   69           XRL     A,R1
   \   000101   7065         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
    585            {
    586              // Request is to change apsChannelMask and nwkManagerAddr
    587              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   000103   7406         MOV     A,#0x6
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00010B   4003         JC      $+5
   \   00010D   02....       LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
    588              {
    589                NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
   \   000110                ; Setup parameters for call to function NLME_SetUpdateID
   \   000110   12....       LCALL   ??NLME_SetUpdateID?relay
    590                 
    591                if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
   \   000113   85..82       MOV     DPL,?XSP + 0
   \   000116   85..83       MOV     DPH,?XSP + 1
   \   000119   C082         PUSH    DPL
   \   00011B   C083         PUSH    DPH
   \   00011D   90....       MOV     DPTR,#__Constant_0
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?L_MOV_X
   \   000125   D083         POP     DPH
   \   000127   D082         POP     DPL
   \   000129   78..         MOV     R0,#?V0 + 0
   \   00012B   12....       LCALL   ?L_EQ_X
   \   00012E   602E         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \   000136   78..         MOV     R0,#?V0 + 0
   \   000138   12....       LCALL   ?L_MOV_X
   \   00013B   7583..       MOV     DPH,#(((_NIB + 36) >> 8) & 0xff)
   \   00013E   7582..       MOV     DPL,#((_NIB + 36) & 0xff)
   \   000141   78..         MOV     R0,#?V0 + 0
   \   000143   12....       LCALL   ?L_EQ_X
   \   000146   6016         JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
    592                {
    593                  _NIB.channelList = Req.channelMask;
   \   000148   85..82       MOV     DPL,?XSP + 0
   \   00014B   85..83       MOV     DPH,?XSP + 1
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?L_MOV_X
   \   000153   90....       MOV     DPTR,#(_NIB + 36)
   \   000156   78..         MOV     R0,#?V0 + 0
   \   000158   12....       LCALL   ?L_MOV_TO_X
    594                
    595                  // Our Channel List has been changed -- notify to save info into NV
    596                  ZDApp_NwkStateUpdateCB();
   \   00015B                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   00015B   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
    597                }
    598              
    599                ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
   \   00015E                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   00015E   7407         MOV     A,#0x7
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   12....       LCALL   ?Subroutine9 & 0xFFFF
    600              }
    601            }
   \                     ??CrossCallReturnLabel_6:
   \   000166   8043         SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    602            else // 0x06-0xFD
    603            {
    604              // Request is invalid
    605              if ( !inMsg->wasBroadcast )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
   \   000168   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00016B   703E         JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    606              {
    607                ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00016D   12....       LCALL   ?Subroutine3 & 0xFFFF
    608                ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
    609                                         ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
   \                     ??CrossCallReturnLabel_25:
   \   000170                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   000170   75..00       MOV     ?V0 + 0,#0x0
   \   000173   78..         MOV     R0,#?V0 + 0
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000178   78..         MOV     R0,#?V0 + 0
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017D   75..00       MOV     ?V0 + 1,#0x0
   \   000180   78..         MOV     R0,#?V0 + 0
   \   000182   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000185   78..         MOV     R0,#?V0 + 0
   \   000187   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018A   78..         MOV     R0,#?V0 + 0
   \   00018C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018F   90....       MOV     DPTR,#__Constant_0
   \   000192   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000195   7D00         MOV     R5,#0x0
   \   000197   7C80         MOV     R4,#-0x80
   \   000199   7A..         MOV     R2,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff)
   \   00019B   7B..         MOV     R3,#((ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff)
   \   00019D   8E82         MOV     DPL,R6
   \   00019F   8F83         MOV     DPH,R7
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F9           MOV     R1,A
   \   0001A3   12....       LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
   \   0001A6   740C         MOV     A,#0xc
   \   0001A8   12....       LCALL   ?DEALLOC_XSTACK8
    610              }
    611            }
    612          }
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
   \   0001AB   7409         MOV     A,#0x9
   \   0001AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B0   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   90....       MOV     DPTR,#(_NIB + 109)
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   99           SUBB    A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine15_0
   \   000006                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   90....       MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
   \   000006                REQUIRE ??Subroutine16_0
   \   000006                ; // Fall through to label ??Subroutine16_0
    613          
    614          /*********************************************************************
    615           * @fn      ZDNwkMgr_ProcessServerDiscRsp
    616           *
    617           * @brief   Process the incoming System Server Discovery Response
    618           *
    619           * @param   pRsp - Structure containing Server Discovery response
    620           *
    621           * @return  none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDNwkMgr_ProcessServerDiscRsp:
    624          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    625            ZDO_ServerDiscRsp_t Rsp;
    626            
    627            ZDO_ParseServerDiscRsp( inMsg, &Rsp );
   \   00000E                ; Setup parameters for call to function ZDO_ParseServerDiscRsp
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseServerDiscRsp?relay
    628            
    629            if ( Rsp.status == ZSuccess )
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7013         JNZ     ??CrossCallReturnLabel_7
    630            {
    631              // Is the Network Manager bit set in the response?
    632              if ( Rsp.serverMask & NETWORK_MANAGER )
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5440         ANL     A,#0x40
   \   00002C   6009         JZ      ??CrossCallReturnLabel_7
    633              {
    634                // Set the Remote Device's NWK Address as the Network Manager Address
    635                ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
   \   00002E                ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   12....       LCALL   ?Subroutine9 & 0xFFFF
    636              }
    637            }
    638          }
   \                     ??CrossCallReturnLabel_7:
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF
    639          
    640          /*********************************************************************
    641           * @fn          ZDNwkMgr_ProcessChannelInterference
    642           *
    643           * @brief       This function processes the incoming Channel Interference
    644           *              detection message and sends out a notify (if needed).
    645           *
    646           * @param       pChannelInterference - interference message
    647           *
    648           * @return      none
    649           */
    650          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
    651          {
    652            // To avoid a device with communication problems from constantly 
    653            // sending reports to the network manager, the device should not 
    654            // send a Mgmt_NWK_Update_notify more than 4 times per hour.
    655            if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
    656            {
    657              // Conduct an energy scan on all channels.
    658              if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
    659              {
    660                // Save the counters for the Update Notify message to be sent
    661                ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
    662                ZDNwkMgr_TxFailures = pChanInterference->txFailures;
    663          
    664                // Mark scan as channel inetrference check
    665                ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
    666              }
    667            }
    668          }
    669          
    670          /*********************************************************************
    671           * @fn          ZDNwkMgr_ProcessEDScanConfirm
    672           *
    673           * @brief       This function processes the incoming ED Scan Confirm
    674           *              message and sends out a notify (if needed).
    675           *
    676           * @param       pEDScanConfirm - SD Scan Confirmation message
    677           *
    678           * @return      none
    679           */
    680          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
    681          { 
    682            if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
    683            {
    684              // Confirm to scan all channels for channel interference check
    685              ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
    686              
    687              ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
    688            }
    689            else
    690            {
    691              // Confirm to the requested scan
    692              uint16 txFailures = nwkTransmissionFailures( FALSE );
    693              
    694              ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
    695                                                 &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    696                                                 _NIB.nwkTotalTransmissions, txFailures, 
    697                                                 pEDScanConfirm, AF_TX_OPTIONS_NONE );
    698              // More scans needed?
    699              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
    700              {
    701                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
    702              }
    703            }
    704          }
    705          
    706          /*********************************************************************
    707           * @fn          ZDNwkMgr_CheckForChannelInterference
    708           *
    709           * @brief       This function processes the incoming ED Scan Confirm
    710           *              message and sends out an Update Notify (if needed).
    711           *
    712           * @param       pEDScanConfirm - SD Scan Confirmation message
    713           *
    714           * @return      none
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
   \                     ZDNwkMgr_CheckForChannelInterference:
    717          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    718            uint8 i;
    719            uint8 channelEnergy = 0;
   \   000009   75..00       MOV     ?V0 + 4,#0x0
    720            uint8 energyIncreased = FALSE;
    721              
    722            // Get the current channel energy
    723            if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
   \   00000C   90....       MOV     DPTR,#(_NIB + 22)
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 2,A
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   EB           MOV     A,R3
   \   000016   3400         ADDC    A,#0x0
   \   000018   0A           INC     R2
   \   000019   0A           INC     R2
   \   00001A   0A           INC     R2
   \   00001B   FB           MOV     R3,A
   \   00001C   75..01       MOV     ?V0 + 8,#0x1
   \   00001F   75..00       MOV     ?V0 + 9,#0x0
   \   000022   75..00       MOV     ?V0 + 10,#0x0
   \   000025   75..00       MOV     ?V0 + 11,#0x0
   \   000028   E5..         MOV     A,?V0 + 2
   \   00002A   78..         MOV     R0,#?V0 + 8
   \   00002C   12....       LCALL   ?L_SHL
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   78..         MOV     R0,#?V0 + 8
   \   000035   12....       LCALL   ?L_AND_X
   \   000038   90....       MOV     DPTR,#__Constant_0
   \   00003B   78..         MOV     R0,#?V0 + 8
   \   00003D   12....       LCALL   ?L_EQ_X
   \   000040   6005         JZ      ??ZDNwkMgr_CheckForChannelInterference_0
    724            {
    725              channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
   \   000042   12....       LCALL   ?Subroutine5 & 0xFFFF
    726            }
   \                     ??CrossCallReturnLabel_17:
   \   000045   F5..         MOV     ?V0 + 4,A
    727              
    728            // If this energy scan does not indicate higher energy on the current 
    729            // channel then other channels, no action is taken. The device should 
    730            // continue to operate as normal and the message counters are not reset.
    731            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \                     ??ZDNwkMgr_CheckForChannelInterference_0:
   \   000047   7C00         MOV     R4,#0x0
   \   000049   8007         SJMP    ??ZDNwkMgr_CheckForChannelInterference_1
   \                     ??ZDNwkMgr_CheckForChannelInterference_2:
   \   00004B   0C           INC     R4
   \   00004C   EC           MOV     A,R4
   \   00004D   C3           CLR     C
   \   00004E   941B         SUBB    A,#0x1b
   \   000050   507F         JNC     ??ZDNwkMgr_CheckForChannelInterference_3
    732            {
    733              if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
    734                   ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
   \                     ??ZDNwkMgr_CheckForChannelInterference_1:
   \   000052   75..01       MOV     ?V0 + 8,#0x1
   \   000055   75..00       MOV     ?V0 + 9,#0x0
   \   000058   75..00       MOV     ?V0 + 10,#0x0
   \   00005B   75..00       MOV     ?V0 + 11,#0x0
   \   00005E   EC           MOV     A,R4
   \   00005F   78..         MOV     R0,#?V0 + 8
   \   000061   12....       LCALL   ?L_SHL
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   78..         MOV     R0,#?V0 + 8
   \   00006A   12....       LCALL   ?L_AND_X
   \   00006D   90....       MOV     DPTR,#__Constant_0
   \   000070   78..         MOV     R0,#?V0 + 8
   \   000072   12....       LCALL   ?L_EQ_X
   \   000075   60D4         JZ      ??ZDNwkMgr_CheckForChannelInterference_2
   \   000077   8C..         MOV     ?V0 + 2,R4
   \   000079   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00007C   C3           CLR     C
   \   00007D   95..         SUBB    A,?V0 + 4
   \   00007F   50CA         JNC     ??ZDNwkMgr_CheckForChannelInterference_2
    735              {
    736                energyIncreased = TRUE;
    737                break;
    738              }
    739            }
    740              
    741            // If the energy scan does indicate increased energy on the channel
    742            // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
    743            // Manager to indicate interference is present.
    744            if ( energyIncreased )
    745            {
    746              // Send a Management Network Update notify to the Network Manager
    747              ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
   \   000081   90....       MOV     DPTR,#(_NIB + 105)
   \   000084   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    748              ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    749                                                 ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
    750                                                 pEDScanConfirm, AF_MSG_ACK_REQUEST );
   \                     ??CrossCallReturnLabel_23:
   \   000087                ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
   \   000087   75..10       MOV     ?V0 + 2,#0x10
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   78..         MOV     R0,#?V0 + 0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   90....       MOV     DPTR,#ZDNwkMgr_TxFailures
   \   000097   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009A   90....       MOV     DPTR,#ZDNwkMgr_TotalTransmissions
   \   00009D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000A0   7900         MOV     R1,#0x0
   \   0000A2   12....       LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
   \   0000A5   7405         MOV     A,#0x5
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    751              ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   0000AF   F0           MOVX    @DPTR,A
    752                
    753              if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
   \   0000B0   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   7013         JNZ     ??CrossCallReturnLabel_14
    754              {
    755                // First notify message sent within this hour. Start the Update Notify timer.
    756                ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
   \   0000B6   90....       MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
   \   0000B9   743C         MOV     A,#0x3c
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
    757                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   0000BF                ; Setup parameters for call to function osal_start_timerEx
   \   0000BF   7C60         MOV     R4,#0x60
   \   0000C1   7DEA         MOV     R5,#-0x16
   \   0000C3   7A02         MOV     R2,#0x2
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    758              }
    759              
    760              ZDNwkMgr_NumUpdateNotifySent++;
   \                     ??CrossCallReturnLabel_14:
   \   0000C9   90....       MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   04           INC     A
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   8039         SJMP    ??ZDNwkMgr_CheckForChannelInterference_4
    761            }
    762          #if defined ( SERIAL_DEBUG_SUPPORTED )
    763            else
    764            {
    765              printf("%s\n", (char*)NwkMgrStr_4);
   \                     ??ZDNwkMgr_CheckForChannelInterference_3:
   \   0000D1                ; Setup parameters for call to function printf
   \   0000D1   75....       MOV     ?V0 + 0,#(NwkMgrStr_4 & 0xff)
   \   0000D4   75....       MOV     ?V0 + 1,#((NwkMgrStr_4 >> 8) & 0xff)
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DC   7A..         MOV     R2,#(`?<Constant "%s\\n">` & 0xff)
   \   0000DE   7B..         MOV     R3,#((`?<Constant "%s\\n">` >> 8) & 0xff)
   \   0000E0   12....       LCALL   ??printf?relay
   \   0000E3   7402         MOV     A,#0x2
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
    766              printf(": %u %u\n", _NIB.nwkLogicalChannel, channelEnergy);
   \   0000E8                ; Setup parameters for call to function printf
   \   0000E8   75..00       MOV     ?V0 + 5,#0x0
   \   0000EB   78..         MOV     R0,#?V0 + 4
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F0   90....       MOV     DPTR,#(_NIB + 22)
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F5..         MOV     ?V0 + 0,A
   \   0000F6   75..00       MOV     ?V0 + 1,#0x0
   \   0000F9   78..         MOV     R0,#?V0 + 0
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FE   7A..         MOV     R2,#(`?<Constant ": %u %u\\n">` & 0xff)
   \   000100   7B..         MOV     R3,#((`?<Constant ": %u %u\\n">` >> 8) & 0xff)
   \   000102   12....       LCALL   ??printf?relay
   \   000105   7404         MOV     A,#0x4
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
    767            }
    768          #endif
    769          }
   \                     ??ZDNwkMgr_CheckForChannelInterference_4:
   \   00010A   7F0C         MOV     R7,#0xc
   \   00010C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   25..         ADD     A,?V0 + 2
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008                REQUIRE ??Subroutine14_0
   \   000008                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET
    770          
    771          /*********************************************************************
    772           * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
    773           *
    774           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
    775           *              function sends a unicast message.
    776           *
    777           * @param       TransSeq - transaction sequence number
    778           * @param       dstAddr - destination address of the message
    779           * @param       pEDScanConfirm - update notify info
    780           *
    781           * @return      afStatus_t
    782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    783          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDNwkMgr_BuildAndSendUpdateNotify:
    784                                                         uint16 totalTransmissions, uint16 txFailures,
    785                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
    786                                                         uint8 txOptions )
    787          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 14,R1
   \   000017   EC           MOV     A,R4
   \   000018   FE           MOV     R6,A
   \   000019   ED           MOV     A,R5
   \   00001A   FF           MOV     R7,A
   \   00001B   7419         MOV     A,#0x19
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 3,A
   \   000027   741B         MOV     A,#0x1b
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 12,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 13,A
   \   000033   741D         MOV     A,#0x1d
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 9,A
    788            uint8 i;
    789            uint8 listCount = 0;
   \   00003B   75..00       MOV     ?V0 + 8,#0x0
    790            uint8 *energyValues = NULL;
   \   00003E   75..00       MOV     ?V0 + 0,#0x0
   \   000041   75..00       MOV     ?V0 + 1,#0x0
    791            
    792            // Count number of energy detects
    793            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000044   7A00         MOV     R2,#0x0
   \   000046   E5..         MOV     A,?V0 + 12
   \   000048   2403         ADD     A,#0x3
   \   00004A   F5..         MOV     ?V0 + 10,A
   \   00004C   E5..         MOV     A,?V0 + 13
   \   00004E   3400         ADDC    A,#0x0
   \   000050   F5..         MOV     ?V0 + 11,A
    794            {
    795              if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_0:
   \   000052   75..01       MOV     ?V0 + 4,#0x1
   \   000055   75..00       MOV     ?V0 + 5,#0x0
   \   000058   75..00       MOV     ?V0 + 6,#0x0
   \   00005B   75..00       MOV     ?V0 + 7,#0x0
   \   00005E   EA           MOV     A,R2
   \   00005F   78..         MOV     R0,#?V0 + 4
   \   000061   12....       LCALL   ?L_SHL
   \   000064   85..82       MOV     DPL,?V0 + 10
   \   000067   85..83       MOV     DPH,?V0 + 11
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?L_AND_X
   \   00006F   90....       MOV     DPTR,#__Constant_0
   \   000072   78..         MOV     R0,#?V0 + 4
   \   000074   12....       LCALL   ?L_EQ_X
   \   000077   6002         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_1
    796                listCount++;
   \   000079   05..         INC     ?V0 + 8
    797            }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_1:
   \   00007B   0A           INC     R2
   \   00007C   EA           MOV     A,R2
   \   00007D   C3           CLR     C
   \   00007E   941B         SUBB    A,#0x1b
   \   000080   40D0         JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
    798            
    799            if ( listCount > 0 )
   \   000082   E5..         MOV     A,?V0 + 8
   \   000084   6063         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    800            {
    801              energyValues = (uint8 *)osal_mem_alloc( listCount );
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   FA           MOV     R2,A
   \   000087   7B00         MOV     R3,#0x0
   \   000089   12....       LCALL   ??osal_mem_alloc?relay
   \   00008C   8A..         MOV     ?V0 + 0,R2
   \   00008E   8B..         MOV     ?V0 + 1,R3
    802              if ( energyValues )
   \   000090   EA           MOV     A,R2
   \   000091   7001         JNZ     ??ZDNwkMgr_BuildAndSendUpdateNotify_3
   \   000093   EB           MOV     A,R3
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_3:
   \   000094   6053         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    803              {
    804                uint8 j = 0;
   \   000096   7B00         MOV     R3,#0x0
    805          
    806                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   000098   7A00         MOV     R2,#0x0
    807                {
    808                  if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_4:
   \   00009A   75..01       MOV     ?V0 + 4,#0x1
   \   00009D   75..00       MOV     ?V0 + 5,#0x0
   \   0000A0   75..00       MOV     ?V0 + 6,#0x0
   \   0000A3   75..00       MOV     ?V0 + 7,#0x0
   \   0000A6   EA           MOV     A,R2
   \   0000A7   78..         MOV     R0,#?V0 + 4
   \   0000A9   12....       LCALL   ?L_SHL
   \   0000AC   85..82       MOV     DPL,?V0 + 10
   \   0000AF   85..83       MOV     DPH,?V0 + 11
   \   0000B2   78..         MOV     R0,#?V0 + 4
   \   0000B4   12....       LCALL   ?L_AND_X
   \   0000B7   90....       MOV     DPTR,#__Constant_0
   \   0000BA   78..         MOV     R0,#?V0 + 4
   \   0000BC   12....       LCALL   ?L_EQ_X
   \   0000BF   6021         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
    809                    energyValues[j++] = pEDScanConfirm->energyDetectList[i];
   \   0000C1   8A..         MOV     ?V0 + 4,R2
   \   0000C3   E5..         MOV     A,?V0 + 12
   \   0000C5   25..         ADD     A,?V0 + 4
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E5..         MOV     A,?V0 + 13
   \   0000CB   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    810                }
   \                     ??CrossCallReturnLabel_16:
   \   0000CE   C0E0         PUSH    A
   \   0000D0   8B..         MOV     ?V0 + 4,R3
   \   0000D2   E5..         MOV     A,?V0 + 0
   \   0000D4   25..         ADD     A,?V0 + 4
   \   0000D6   F582         MOV     DPL,A
   \   0000D8   E5..         MOV     A,?V0 + 1
   \   0000DA   3400         ADDC    A,#0x0
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   0B           INC     R3
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_5:
   \   0000E2   0A           INC     R2
   \   0000E3   EA           MOV     A,R2
   \   0000E4   C3           CLR     C
   \   0000E5   941B         SUBB    A,#0x1b
   \   0000E7   40B1         JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_4
    811              }
    812            }
    813              
    814            // Send a Management Network Update notify back
    815            ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
    816                                     pEDScanConfirm->scannedChannels,
    817                                     totalTransmissions, txFailures,
    818                                     listCount, energyValues, txOptions, false );
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_2:
   \   0000E9                ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
   \   0000E9   75..00       MOV     ?V0 + 4,#0x0
   \   0000EC   78..         MOV     R0,#?V0 + 4
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F1   E5..         MOV     A,?V0 + 9
   \   0000F3   F5..         MOV     ?V0 + 4,A
   \   0000F5   78..         MOV     R0,#?V0 + 4
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   78..         MOV     R0,#?V0 + 2
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000104   8E..         MOV     ?V0 + 2,R6
   \   000106   8F..         MOV     ?V0 + 3,R7
   \   000108   78..         MOV     R0,#?V0 + 2
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   85..82       MOV     DPL,?V0 + 10
   \   000110   85..83       MOV     DPH,?V0 + 11
   \   000113   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000116   AD..         MOV     R5,?V0 + 8
   \   000118   85..82       MOV     DPL,?V0 + 12
   \   00011B   85..83       MOV     DPH,?V0 + 13
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   FC           MOV     R4,A
   \   000122   740C         MOV     A,#0xc
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FA           MOV     R2,A
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   FB           MOV     R3,A
   \   00012C   A9..         MOV     R1,?V0 + 14
   \   00012E   12....       LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
   \   000131   740C         MOV     A,#0xc
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
    819            if ( energyValues )
   \   000136   E5..         MOV     A,?V0 + 0
   \   000138   7002         JNZ     ??ZDNwkMgr_BuildAndSendUpdateNotify_6
   \   00013A   E5..         MOV     A,?V0 + 1
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_6:
   \   00013C   6007         JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_7
    820              osal_mem_free( energyValues );
   \   00013E                ; Setup parameters for call to function osal_mem_free
   \   00013E   AA..         MOV     R2,?V0 + 0
   \   000140   AB..         MOV     R3,?V0 + 1
   \   000142   12....       LCALL   ??osal_mem_free?relay
    821          }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_7:
   \   000145   7402         MOV     A,#0x2
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A   7F0F         MOV     R7,#0xf
   \   00014C   02....       LJMP    ?BANKED_LEAVE_XDATA
    822          
    823          #if defined ( NWK_MANAGER )
    824          /*********************************************************************
    825           * @fn      NwkMgr_SetNwkManager
    826           *
    827           * @brief   Set the local device as the Network Manager
    828           *
    829           * @param   none
    830           *
    831           * @return  none
    832           */
    833          void NwkMgr_SetNwkManager( void )
    834          {
    835            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    836            {
    837              // We're the Network Manager. Set our address as the Network Manager Address
    838              ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
    839              
    840              // Set the Network Manager bit of the Server Mask
    841              ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
    842            }
    843          }
    844          #endif // NWK_MANAGER
    845          
    846          /*********************************************************************
    847           * @fn      ZDApp_SetNwkManagerAddr()
    848           *
    849           * @brief   Sets the nwkManagerAddr in NIB.
    850           *
    851           * @param   nwkManagerAddr
    852           *
    853           * @return  none
    854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    855          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
   \                     ZDNwkMgr_SetNwkManagerAddr:
    856          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    857            if ( _NIB.nwkManagerAddr != nwkManagerAddr )
   \   000004   90....       MOV     DPTR,#(_NIB + 105)
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6A           XRL     A,R2
   \   000009   7003         JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6B           XRL     A,R3
   \                     ??ZDNwkMgr_SetNwkManagerAddr_0:
   \   00000E   600B         JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
    858            {
    859              // Update the Network Manager Address
    860              _NIB.nwkManagerAddr = nwkManagerAddr;
   \   000010   90....       MOV     DPTR,#(_NIB + 105)
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
    861            
    862              // Our Network Manger Address has been changed -- notify to save info into NV
    863              ZDApp_NwkStateUpdateCB();
   \   000018                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000018   12....       LCALL   ??ZDApp_NwkStateUpdateCB?relay
    864            }
    865          }
   \                     ??ZDNwkMgr_SetNwkManagerAddr_1:
   \   00001B                REQUIRE ?Subroutine2
   \   00001B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    866          
    867          /*********************************************************************
    868           * @fn          ZDNwkMgr_ReportChannelInterference
    869           *
    870           * @brief       This function builds a Channel Interference detection
    871           *              message and then forwards it to the Network Manager.
    872           *
    873           * @param       chanInterference
    874           *
    875           * @return      none
    876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    877          void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
   \                     ZDNwkMgr_ReportChannelInterference:
    878          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    879            ZDNwkMgr_ChanInterference_t *pChanInterference;
    880          
    881            // Send Channel Interference message to the Network Manager task
    882            pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A06         MOV     R2,#0x6
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay
    883            if ( pChanInterference )
   \   000010   EA           MOV     A,R2
   \   000011   7001         JNZ     ??ZDNwkMgr_ReportChannelInterference_0
   \   000013   EB           MOV     A,R3
   \                     ??ZDNwkMgr_ReportChannelInterference_0:
   \   000014   6027         JZ      ??ZDNwkMgr_ReportChannelInterference_1
    884            {
    885              pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
   \   000016   7431         MOV     A,#0x31
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   F0           MOVX    @DPTR,A
    886                
    887              // Build the structure
    888              pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000024   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    889              pChanInterference->txFailures = chanInterference->txFailures;
   \                     ??CrossCallReturnLabel_21:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    890                        
    891              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
   \                     ??CrossCallReturnLabel_22:
   \   000035                ; Setup parameters for call to function osal_msg_send
   \   000035   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_send?relay
    892            }
    893          }
   \                     ??ZDNwkMgr_ReportChannelInterference_1:
   \   00003D   7F02         MOV     R7,#0x2
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    894          
    895          /*********************************************************************
    896           * @fn          ZDNwkMgr_EDScanConfirmCB
    897           *
    898           * @brief       Handle Energy Scan confirm callback
    899           *
    900           * @param       scannedChannels  - scanned channels
    901           * @param       energyDetectList - measured energy for channels
    902           *
    903           * @return      none
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
   \                     ZDNwkMgr_EDScanConfirmCB:
    906          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    907            ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
    908          
    909            // Send ED Confirm to the Network Manager task
    910            pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
   \   000009                ; Setup parameters for call to function osal_msg_allocate
   \   000009   7A22         MOV     R2,#0x22
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??osal_msg_allocate?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   \   000014   AE..         MOV     R6,?V0 + 2
   \   000016   AF..         MOV     R7,?V0 + 3
    911            if ( pEDScanConfirm )
   \   000018   EE           MOV     A,R6
   \   000019   7001         JNZ     ??ZDNwkMgr_EDScanConfirmCB_0
   \   00001B   EF           MOV     A,R7
   \                     ??ZDNwkMgr_EDScanConfirmCB_0:
   \   00001C   6067         JZ      ??ZDNwkMgr_EDScanConfirmCB_1
    912            {
    913              pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
   \   00001E   7432         MOV     A,#0x32
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   F0           MOVX    @DPTR,A
    914                
    915              // Build the structure
    916              pEDScanConfirm->status = EDScanConfirm->status;
   \   000025   85..82       MOV     DPL,?V0 + 0
   \   000028   85..83       MOV     DPH,?V0 + 1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    917              pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
   \   000033   85..82       MOV     DPL,?V0 + 0
   \   000036   85..83       MOV     DPH,?V0 + 1
   \   000039   A3           INC     DPTR
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   12....       LCALL   ?L_MOV_X
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   78..         MOV     R0,#?V0 + 4
   \   000048   12....       LCALL   ?L_MOV_TO_X
    918              osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   85..82       MOV     DPL,?V0 + 0
   \   00004E   85..83       MOV     DPH,?V0 + 1
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0 + 1,A
   \   00005D   75..00       MOV     ?V0 + 2,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000065   7C1B         MOV     R4,#0x1b
   \   000067   7D00         MOV     R5,#0x0
   \   000069   EE           MOV     A,R6
   \   00006A   2407         ADD     A,#0x7
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   ??osal_memcpy?relay
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    919                
    920              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
   \   000079                ; Setup parameters for call to function osal_msg_send
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   90....       MOV     DPTR,#ZDNwkMgr_TaskID
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??osal_msg_send?relay
    921            }
    922          }
   \                     ??ZDNwkMgr_EDScanConfirmCB_1:
   \   000085   02....       LJMP    ?Subroutine1 & 0xFFFF
    923          
    924          /*********************************************************************
    925           * @fn      ZDNwkMgr_ProcessDataConfirm
    926           *
    927           * @brief   Process received Confirmation for Mgmt NWK Update Notify message
    928           *
    929           * @param   none
    930           *
    931           * @return  none
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
   \                     ZDNwkMgr_ProcessDataConfirm:
    934          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    935            if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
    936                 ( afDataConfirm->transID == 0 )     && 
    937                 ( afDataConfirm->hdr.status == ZSuccess ) )
   \   000004   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000007   E0           MOVX    A,@DPTR
   \   000008   601A         JZ      ??ZDNwkMgr_ProcessDataConfirm_0
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   7010         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7008         JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
    938            {
    939              // The Mgmt NWK Update Notify was sent as an APS Unicast with  
    940              // acknowledgement and once the acknowledgment is received the 
    941              // total transmit and transmit failure counters are reset to zero.  
    942              _NIB.nwkTotalTransmissions = 0;
   \   00001C   12....       LCALL   ?Subroutine4 & 0xFFFF
    943              nwkTransmissionFailures( TRUE );
    944              
    945              ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ??CrossCallReturnLabel_1:
   \   00001F   E4           CLR     A
   \   000020   90....       MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
   \   000023   F0           MOVX    @DPTR,A
    946            }
    947          }
   \                     ??ZDNwkMgr_ProcessDataConfirm_0:
   \   000024   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_CheckForChannelInterference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_CheckForChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_BuildAndSendUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_SetNwkManagerAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_SetNwkManagerAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ReportChannelInterference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ReportChannelInterference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_EDScanConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_EDScanConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDNwkMgr_ProcessDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDNwkMgr_ProcessDataConfirm

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s\\n">`:
   \   000000   25730A00     DB "%s\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ": %u %u\\n">`:
   \   000000   3A202575     DB ": %u %u\012"
   \            2025750A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
    948          
    949          /*********************************************************************
    950           * PAN ID Conflict Routines
    951           */
    952          #if defined ( NWK_MANAGER )
    953          /*********************************************************************
    954           * @fn          ZDNwkMgr_NetworkReportCB
    955           *
    956           * @brief       Handle the Network Report Command
    957           *
    958           * @param       srcAddr     - Source Address of the message.
    959           * @param       status      - ZSuccess.
    960           * @param       serverMask  - Bit mask of services matching the req serverMask.
    961           * @param       securityUse -
    962           *
    963           * @return      none
    964           */
    965          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
    966          { 
    967            // Send Network Report message to the Network Manager task
    968            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
    969          }
    970          
    971          /*********************************************************************
    972           * @fn          ZDNwkMgr_NetworkUpdateCB
    973           *
    974           * @brief       Handle the Network Update Command
    975           *
    976           * @param       srcAddr     - Source Address of the message.
    977           * @param       status      - ZSuccess.
    978           * @param       serverMask  - Bit mask of services matching the req serverMask.
    979           * @param       securityUse -
    980           *
    981           * @return      none
    982           */
    983          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
    984          {
    985            // Send Network Update message to the Network Manager task
    986            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
    987          }
    988          
    989          /*********************************************************************
    990           * @fn      ZDNwkMgr_ProcessNetworkReport
    991           *
    992           * @brief   Process the incoming Network Report message
    993           *
    994           * @param   pNetworkReport - Structure containing Network Report message
    995           *
    996           * @return  none
    997           */
    998          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
    999          {
   1000            uint8 i;
   1001            uint16 newPID;
   1002            uint8 unique = TRUE;
   1003          
   1004            if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
   1005            {
   1006              if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
   1007              {
   1008                do
   1009                {
   1010                  // select a new PAN ID
   1011                  newPID = (uint16)osal_rand();
   1012                
   1013                  // Make sure that the chosen PAN ID is not already in use in the
   1014                  // local neighborhood and also not contained within the Report 
   1015                  // Information field of the Network Report Command frame
   1016                  for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
   1017                  {
   1018                    if ( pNetworkReport->panIDs[i] == newPID )
   1019                    {
   1020                      unique = FALSE;
   1021                      break;
   1022                    }
   1023                  }
   1024                } while ( !unique );
   1025                   
   1026                // Send out a Network Update command.
   1027                NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
   1028                                        _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
   1029              
   1030                ZDNwkMgr_PanIdUpdateInProgress = TRUE;
   1031              }
   1032            }
   1033          }
   1034          
   1035          /*********************************************************************
   1036           * @fn      ZDNwkMgr_ProcessNetworkUpdate
   1037           *
   1038           * @brief   Process the incoming Network Update message
   1039           *
   1040           * @param   pNetworkReport - Structure containing Network Update message
   1041           *
   1042           * @return  none
   1043           */
   1044          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
   1045          {
   1046            if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
   1047            { 
   1048              // Our PAN ID has been changed -- notify to save info into NV
   1049              ZDApp_NwkStateUpdateCB();
   1050              
   1051              ZDNwkMgr_PanIdUpdateInProgress = FALSE;
   1052            }
   1053          }
   1054          #endif // NWK_MANAGER
   1055          
   1056          
   1057          /*********************************************************************
   1058          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ZDNwkMgr_BuildAndSendUpdateNotify
                                        1      0     62
       -> osal_mem_alloc                0      0     50
       -> ZDP_MgmtNwkUpdateNotify       0      0     74
       -> osal_mem_free                 0      0     50
     ZDNwkMgr_CheckForChannelInterference
                                        0      0     41
       -> ZDNwkMgr_BuildAndSendUpdateNotify
                                        0      0     50
       -> osal_start_timerEx            0      0     40
       -> printf                        0      0     44
       -> printf                        0      0     48
     ZDNwkMgr_EDScanConfirmCB           1      0     19
       -> osal_msg_allocate             0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_msg_send                 0      0     32
     ZDNwkMgr_Init                      0      0      9
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
     ZDNwkMgr_ProcessDataConfirm        2      0      0
       -> nwkTransmissionFailures       4      0      0
     ZDNwkMgr_ProcessMgmtNwkUpdateReq
                                        2      0     53
       -> ZDO_ParseMgmtNwkUpdateReq     0      0     50
       -> NLME_EDScanRequest            0      0     50
       -> NLME_SetUpdateID              0      0     50
       -> osal_start_timerEx            0      0     50
       -> NLME_SetUpdateID              0      0     50
       -> ZDApp_NwkStateUpdateCB        0      0     50
       -> ZDNwkMgr_SetNwkManagerAddr
                                        0      0     50
       -> ZDP_MgmtNwkUpdateNotify       0      0     74
     ZDNwkMgr_ProcessServerDiscRsp      0      0     28
       -> ZDO_ParseServerDiscRsp        0      0     24
       -> ZDNwkMgr_SetNwkManagerAddr
                                        0      0     24
     ZDNwkMgr_ReportChannelInterference
                                        1      0     10
       -> osal_msg_allocate             0      0     20
       -> osal_msg_send                 0      0     20
     ZDNwkMgr_SetNwkManagerAddr         2      0     25
       -> ZDApp_NwkStateUpdateCB        4      0      0
     ZDNwkMgr_event_loop                0      0     21
       -> osal_msg_receive              0      0     32
       -> ZDNwkMgr_ProcessMgmtNwkUpdateReq
                                        0      0     32
       -> osal_msg_deallocate           0      0     32
       -> osal_msg_receive              0      0     32
       -> ZDNwkMgr_ProcessServerDiscRsp
                                        0      0     32
       -> NLME_EDScanRequest            0      0     32
       -> ZDNwkMgr_CheckForChannelInterference
                                        0      0     32
       -> nwkTransmissionFailures       0      0     32
       -> ZDNwkMgr_BuildAndSendUpdateNotify
                                        0      0     42
       -> osal_start_timerEx            0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZDApp_NwkStateUpdateCB        0      0     32
       -> nwkTransmissionFailures       0      0     32
       -> osal_start_timerEx            0      0     32
       -> NLME_EDScanRequest            0      0     32


   Segment part sizes:

     Function/Label                               Bytes
     --------------                               -----
     NwkMgrStr_1                                    15
     NwkMgrStr_2                                    17
     NwkMgrStr_3                                    17
     NwkMgrStr_4                                    17
     ZDNwkMgr_TaskID                                 1
     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
                                                     1
     ZDNwkMgr_MgmtNwkUpdateNotifyAddr
                                                     9
     ZDNwkMgr_UpdateNotifyTimer                      2
     ZDNwkMgr_NumUpdateNotifySent                    1
     ZDNwkMgr_WaitingForNotifyConfirm
                                                     1
     ZDNwkMgr_TotalTransmissions                     2
     ZDNwkMgr_TxFailures                             2
     ZDNwkMgr_MgmtNwkUpdateReq                       9
     ZDNwkMgr_NewChannel                             1
     pZDNwkMgr_ReportChannelInterference
                                                     2
     pZDNwkMgr_ProcessDataConfirm                    2
     pZDNwkMgr_EDScanConfirmCB                       2
     pZDNwkMgr_NetworkReportCB                       2
     pZDNwkMgr_NetworkUpdateCB                       2
     ZDNwkMgr_Init                                  75
     ?Subroutine0                                    5
     ZDNwkMgr_event_loop                           438
     ?Subroutine1                                    5
     ?Subroutine7                                    2
     ??Subroutine13_0                                9
     ?Subroutine8                                   10
     ??Subroutine16_0                                6
     ?Subroutine12                                   2
     ??Subroutine17_0                                6
     ?Subroutine4                                   13
     ZDNwkMgr_ProcessMgmtNwkUpdateReq
                                                   435
     ?Subroutine11                                  14
     ?Subroutine10                                   9
     ?Subroutine9                                    9
     ?Subroutine3                                    6
     ??Subroutine15_0                                6
     ZDNwkMgr_ProcessServerDiscRsp                  63
     ZDNwkMgr_CheckForChannelInterference
                                                   271
     ?Subroutine5                                    8
     ??Subroutine14_0                               13
     ZDNwkMgr_BuildAndSendUpdateNotify
                                                   335
     ZDNwkMgr_SetNwkManagerAddr                     27
     ?Subroutine2                                    7
     ZDNwkMgr_ReportChannelInterference
                                                    66
     ?Subroutine6                                   10
     ZDNwkMgr_EDScanConfirmCB                      136
     ZDNwkMgr_ProcessDataConfirm                    39
     ??ZDNwkMgr_Init?relay                           6
     ??ZDNwkMgr_event_loop?relay                     6
     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay        6
     ??ZDNwkMgr_ProcessServerDiscRsp?relay           6
     ??ZDNwkMgr_CheckForChannelInterference?relay    6
     ??ZDNwkMgr_BuildAndSendUpdateNotify?relay       6
     ??ZDNwkMgr_SetNwkManagerAddr?relay              6
     ??ZDNwkMgr_ReportChannelInterference?relay      6
     ??ZDNwkMgr_EDScanConfirmCB?relay                6
     ??ZDNwkMgr_ProcessDataConfirm?relay             6
     ?<Constant "%s\n">                              4
     ?<Constant ": %u %u\n">                         9
     __Constant_7fff800                              4
     __Constant_0                                    4

 
 2 025 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    87 bytes in segment XDATA_ROM_C
    39 bytes in segment XDATA_Z
 
 2 085 bytes of CODE  memory
    79 bytes of CONST memory (+ 8 bytes shared)
    39 bytes of XDATA memory

Errors: none
Warnings: none
