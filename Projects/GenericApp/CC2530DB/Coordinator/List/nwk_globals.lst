###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:41:59 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\stack\nwk\nwk_g #
#                          lobals.c                                           #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\stack\nwk\nwk_globals.c" -D ZTOOL_P1 -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D            #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\nwk_globals.lst                #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\nwk_globals.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2010-06-17 08:41:57 -0700 (Thu, 17 Jun 2010) $
      4            Revision:       $Revision: 22772 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AddrMgr.h"
     46          #include "AssocList.h"
     47          #include "BindingTable.h"
     48          #include "nwk_util.h"
     49          #include "nwk_globals.h"
     50          #include "OSAL_Nv.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          
     57          #include "OnBoard.h"
     58          
     59          
     60          /* HAL */
     61          #include "hal_lcd.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximums for the data buffer queue
     72          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     73          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     74          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     75          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     76          
     77          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     78          // A known shortcoming is that when a message is enqueued as "hold" for a
     79          // sleeping device, the timer tick may have counted down to 1, so that msg
     80          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     81          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     82          // So the hold time will vary within this interval:
     83          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     84          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     85          #define NWK_INDIRECT_CNT_RTG_TMR    1
     86          // To hold msg for sleeping end devices for 30 secs:
     87          // #define CNT_RTG_TIMER            1
     88          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     89          // To hold msg for sleeping end devices for 30 mins:
     90          // #define CNT_RTG_TIMER            60
     91          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     92          // To hold msg for sleeping end devices for 30 days:
     93          // #define CNT_RTG_TIMER            60
     94          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     95          // Maximum msgs to hold per associated device.
     96          #define NWK_INDIRECT_MSG_MAX_PER    3
     97          // Maximum total msgs to hold for all associated devices.
     98          #define NWK_INDIRECT_MSG_MAX_ALL    \
     99                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    100          
    101          /*********************************************************************
    102           * TYPEDEFS
    103           */
    104          
    105          /*********************************************************************
    106           * NWK GLOBAL VARIABLES
    107           */
    108          
    109          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    110          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   3800         DW 56
    111          
    112          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    113          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   32           DB 50
    114          
    115          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    116          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    117          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    120          

   \                                 In  segment CODE_C, align 1
    121          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    124          
    125          // change this if using a different stack profile...
    126          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    128          
    129          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )
    130            uint8 CskipRtrs[1] = {0};
    131            uint8 CskipChldrn[1] = {0};
    132          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
    133            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {10,5,5,5,5,0};
   \                     CskipRtrs:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipRtrs>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {40,10,10,10,10,0};
   \                     CskipChldrn:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipChldrn>`
   \   000006                REQUIRE __INIT_XDATA_I
    135          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    136            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    137            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    139            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    140            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141          #endif // STACK_PROFILE_ID
    142          
    143          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    145          
    146          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 1008
   \   0003F0                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment CODE_C, align 1
    149          CONST uint16 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   2800         DW 40

   \                                 In  segment CODE_C, align 1
    150          CONST uint16 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C00         DW 12

   \                                 In  segment CODE_C, align 1
    151          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    152          

   \                                 In  segment CODE_C, align 1
    153          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   04           DB 4
    154          
    155           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 92
   \   00005C                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment CODE_C, align 1
    158          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    159          

   \                                 In  segment CODE_C, align 1
    160          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    161          

   \                                 In  segment CODE_C, align 1
    162          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    163          
    164          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    166          
    167          #if defined ( ZIGBEE_SOURCE_ROUTING )
    168            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
    169            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
    170          #endif
    171          
    172          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    174          
    175          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    177          
    178          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    181          

   \                                 In  segment CODE_C, align 1
    182          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    183          
    184          // For tree addressing, this switch allows the allocation of a
    185          // router address to an end device when end device address are
    186          // all used up.  If this option is enabled, address space
    187          // could be limited.

   \                                 In  segment CODE_C, align 1
    188          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    189          
    190          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    191          // number of link status periods after the last received address conflict report
    192          // (network status command)
    193          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
    194          #endif
    195          
    196          #if defined ( ZIGBEE_FREQ_AGILITY )
    197          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
    198          #endif
    199          
    200          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    201          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   5000         DW 80
    202          
    203          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    204          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    205          
    206          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    207          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    208          
    209          // Network message radius

   \                                 In  segment CODE_C, align 1
    210          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    211          
    212          #if ( ZSTACK_ROUTER_BUILD )

   \                                 In  segment CODE_C, align 1
    213          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    214          #endif
    215          
    216          /*********************************************************************
    217           * APS GLOBAL VARIABLES
    218           */
    219          
    220          // The Maximum number of binding records
    221          // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    222          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    223          
    224          #if defined ( REFLECTOR )
    225            // The Maximum number of cluster IDs in a binding record
    226            // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    227            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    228          

   \                                 In  segment CODE_C, align 1
    229            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    230          
    231            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    232            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    233          #endif
    234          
    235          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    236          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    237          
    238          // APS End Device Broadcast Table
    239          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    240            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    241            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    242          #endif
    243          
    244          /*********************************************************************
    245           * SECURITY GLOBAL VARIABLES
    246           */
    247          
    248          // This is the default pre-configured key,
    249          // change this to make a unique key
    250          // SEC_KEY_LEN is defined in ssp.h.
    251          
    252          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    253          CONST uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01030507     DB 1, 3, 5, 7, 9, 11, 13, 15, 0, 2, 4, 6, 8, 10, 12, 13
   \            090B0D0F
   \            00020406
   \            080A0C0D
    254          #else
    255          CONST uint8 defaultKey[SEC_KEY_LEN] =
    256          {
    257          #if defined ( APP_TP ) || defined ( APP_TP2 )
    258            // Key for ZigBee Conformance Testing
    259            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    260            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    261          #else
    262            // Key for In-House Testing
    263            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    264            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    265          #endif
    266          };
    267          #endif
    268          
    269          // This is the default pre-configured Trust Center Link key,
    270          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    271          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] =
   \                     defaultTCLinkKey:
   \   000000   56777777     DB 86, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119
   \            77777777
   \            77777777
   \            7777    
   \   00000E   7777         DB 119, 119
    272          {
    273            0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    274            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
    275          };
    276          
    277          /*********************************************************************
    278           * GLOBAL VARIABLES - Statistics
    279           */
    280          
    281          #if defined ( PACKET_FILTER_STATS )
    282            uint32 apsInvalidPackets = 0;
    283            uint32 apsSecurityFailures = 0;
    284            uint32 nwkInvalidPackets = 0;
    285            uint32 nwkSecurityFailures = 0;
    286          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          uint8 PAN_ID_Success=0;
   \                     PAN_ID_Success:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    288          /*********************************************************************
    289           * STATUS STRINGS
    290           */

   \                                 In  segment XDATA_ROM_C, align 1
    291            const char PingStr[]         = "Ping Receive from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Receive from"
   \            20526563
   \            65697665
   \            2066726F
   \            6D00    

   \                                 In  segment XDATA_ROM_C, align 1
    292            const char AssocCnfStr[]     = "Assoc Config";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Config"
   \            6320436F
   \            6E666967
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    293            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    294            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    295            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    296            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    297            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    298            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    299            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    300            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    301            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    302            const char AssocRspFailStr[] = "Assoc Respond fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Respond fail"
   \            63205265
   \            73706F6E
   \            64206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    303            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    304            const char AssocCnfFailStr[] = "Assoc Config fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Config fail"
   \            6320436F
   \            6E666967
   \            20666169
   \            6C00    

   \                                 In  segment XDATA_ROM_C, align 1
    305            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    306            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    307          
    308          /*********************************************************************
    309           * @fn       nwk_globals_init()
    310           *
    311           * @brief
    312           *
    313           *   Initialize nwk layer globals.  These are the system defaults and
    314           *   should be changed by the user here.  The default definitions are
    315           *   defined in nwk.h or NLMEDE.h.
    316           *
    317           * @param   none
    318           *
    319           * @return  none
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void nwk_globals_init( void )
   \                     nwk_globals_init:
    322          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    323            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A3D         MOV     R2,#0x3d
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    324          
    325          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    326            if ( ZSTACK_ROUTER_BUILD )
    327            {
    328              // Initialize the Cskip Table
    329              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A0C         MOV     R2,#0xc
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??osal_mem_alloc?relay
   \   000012   90....       MOV     DPTR,#Cskip
   \   000015   EA           MOV     A,R2
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   EB           MOV     A,R3
   \   000019   F0           MOVX    @DPTR,A
    330              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
   \   00001A                ; Setup parameters for call to function RTG_FillCSkipTable
   \   00001A   90....       MOV     DPTR,#Cskip
   \   00001D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000020   7905         MOV     R1,#0x5
   \   000022   7C..         MOV     R4,#(CskipRtrs & 0xff)
   \   000024   7D..         MOV     R5,#((CskipRtrs >> 8) & 0xff)
   \   000026   7A..         MOV     R2,#(CskipChldrn & 0xff)
   \   000028   7B..         MOV     R3,#((CskipChldrn >> 8) & 0xff)
   \   00002A   12....       LCALL   ??RTG_FillCSkipTable?relay
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
    331            }
    332          #endif
    333          
    334            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    335            // to 0 (compiler flag).
    336            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    337            {
    338              NLME_InitLinkStatus();
    339            }
    340          
    341          #if defined ( ZIGBEE_FREQ_AGILITY )
    342            NwkFreqAgilityInit();
    343          #endif
    344          }
   \   000032                REQUIRE ?Subroutine0
   \   000032                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    345          
    346          /*********************************************************************
    347           * @fn       NIB_init()
    348           *
    349           * @brief
    350           *
    351           *   Initialize attribute values in NIB
    352           *
    353           * @param   none
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void NIB_init()
   \                     NIB_init:
    358          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    359            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    360          
    361            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   7402         MOV     A,#0x2
   \   00000E   90....       MOV     DPTR,#(_NIB + 17)
   \   000011   F0           MOVX    @DPTR,A
    362            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   7405         MOV     A,#0x5
   \   000014   90....       MOV     DPTR,#(_NIB + 4)
   \   000017   F0           MOVX    @DPTR,A
    363          
    364          #if ( NWK_MODE == NWK_MODE_MESH )
    365            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   740F         MOV     A,#0xf
   \   00001A   90....       MOV     DPTR,#(_NIB + 40)
   \   00001D   F0           MOVX    @DPTR,A
    366            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   90....       MOV     DPTR,#(_NIB + 41)
   \   000021   F0           MOVX    @DPTR,A
    367          #endif
    368          
    369            // BROADCAST SETTINGS:
    370            // *******************
    371            //   Broadcast Delivery Time
    372            //     - set to multiples of 100ms
    373            //     - should be 500ms more than the retry time
    374            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    375            //   Passive Ack Timeout
    376            //     - set to multiples of 100ms
    377            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000022   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#(_NIB + 7)
   \   000029   F0           MOVX    @DPTR,A
    378            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   00002A   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#(_NIB + 1)
   \   000031   F0           MOVX    @DPTR,A
    379            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000032   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000035   E0           MOVX    A,@DPTR
   \   000036   90....       MOV     DPTR,#(_NIB + 2)
   \   000039   F0           MOVX    @DPTR,A
    380          
    381            _NIB.ReportConstantCost = 0;
   \   00003A   E4           CLR     A
   \   00003B   90....       MOV     DPTR,#(_NIB + 8)
   \   00003E   F0           MOVX    @DPTR,A
    382            _NIB.RouteDiscRetries = 0;
   \   00003F   90....       MOV     DPTR,#(_NIB + 9)
   \   000042   F0           MOVX    @DPTR,A
    383            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000043   90....       MOV     DPTR,#(_NIB + 11)
   \   000046   F0           MOVX    @DPTR,A
    384            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000047   7401         MOV     A,#0x1
   \   000049   90....       MOV     DPTR,#(_NIB + 104)
   \   00004C   F0           MOVX    @DPTR,A
    385          
    386            if ( ZG_SECURE_ENABLED )
    387            {
    388              _NIB.SecurityLevel = SECURITY_LEVEL;
    389            }
    390            else
    391            {
    392              _NIB.SecurityLevel = 0;
   \   00004D   E4           CLR     A
   \   00004E   90....       MOV     DPTR,#(_NIB + 12)
   \   000051   F0           MOVX    @DPTR,A
    393            }
    394          
    395          #if defined ( ZIGBEEPRO )
    396            _NIB.SymLink = FALSE;
    397          #else
    398            _NIB.SymLink = TRUE;
   \   000052   7401         MOV     A,#0x1
   \   000054   90....       MOV     DPTR,#(_NIB + 13)
   \   000057   F0           MOVX    @DPTR,A
    399          #endif
    400          
    401            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000058   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   90....       MOV     DPTR,#(_NIB + 14)
   \   00005F   F0           MOVX    @DPTR,A
    402          
    403            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000060   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   000063   E0           MOVX    A,@DPTR
   \   000064   90....       MOV     DPTR,#(_NIB + 15)
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    404          
    405            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   00006B   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   90....       MOV     DPTR,#(_NIB + 18)
   \   000072   F0           MOVX    @DPTR,A
    406            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   000073   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000076   E0           MOVX    A,@DPTR
   \   000077   90....       MOV     DPTR,#(_NIB + 19)
   \   00007A   F0           MOVX    @DPTR,A
    407          
    408            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00007B   90....       MOV     DPTR,#(_NIB + 20)
   \   00007E   74FE         MOV     A,#-0x2
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   74FF         MOV     A,#-0x1
   \   000084   F0           MOVX    @DPTR,A
    409            _NIB.nwkLogicalChannel = 0;
   \   000085   E4           CLR     A
   \   000086   90....       MOV     DPTR,#(_NIB + 22)
   \   000089   F0           MOVX    @DPTR,A
    410            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   00008A   90....       MOV     DPTR,#(_NIB + 23)
   \   00008D   74FE         MOV     A,#-0x2
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   74FF         MOV     A,#-0x1
   \   000093   F0           MOVX    @DPTR,A
    411            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   000094                ; Setup parameters for call to function osal_memset
   \   000094   7C08         MOV     R4,#0x8
   \   000096   7D00         MOV     R5,#0x0
   \   000098   7900         MOV     R1,#0x0
   \   00009A   7A..         MOV     R2,#((_NIB + 25) & 0xff)
   \   00009C   7B..         MOV     R3,#(((_NIB + 25) >> 8) & 0xff)
   \   00009E   12....       LCALL   ??osal_memset?relay
    412            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   0000A1   90....       MOV     DPTR,#(_NIB + 33)
   \   0000A4   74FE         MOV     A,#-0x2
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   74FF         MOV     A,#-0x1
   \   0000AA   F0           MOVX    @DPTR,A
    413          
    414            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   0000AB                ; Setup parameters for call to function sAddrExtCpy
   \   0000AB   7C..         MOV     R4,#(zgExtendedPANID & 0xff)
   \   0000AD   7D..         MOV     R5,#((zgExtendedPANID >> 8) & 0xff)
   \   0000AF   7A..         MOV     R2,#((_NIB + 53) & 0xff)
   \   0000B1   7B..         MOV     R3,#(((_NIB + 53) >> 8) & 0xff)
   \   0000B3   12....       LCALL   ??sAddrExtCpy?relay
    415          
    416            _NIB.nwkKeyLoaded = FALSE;
   \   0000B6   E4           CLR     A
   \   0000B7   90....       MOV     DPTR,#(_NIB + 61)
   \   0000BA   F0           MOVX    @DPTR,A
    417          
    418          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    419            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
    420            _NIB.nwkUniqueAddr = FALSE;
    421          #else
    422            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
   \   0000BB   90....       MOV     DPTR,#(_NIB + 96)
   \   0000BE   F0           MOVX    @DPTR,A
    423            _NIB.nwkUniqueAddr = TRUE;
   \   0000BF   7401         MOV     A,#0x1
   \   0000C1   90....       MOV     DPTR,#(_NIB + 97)
   \   0000C4   F0           MOVX    @DPTR,A
    424          #endif
    425          
    426            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000C5   E4           CLR     A
   \   0000C6   90....       MOV     DPTR,#(_NIB + 98)
   \   0000C9   F0           MOVX    @DPTR,A
    427            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000CA   7403         MOV     A,#0x3
   \   0000CC   90....       MOV     DPTR,#(_NIB + 99)
   \   0000CF   F0           MOVX    @DPTR,A
    428          
    429            //MTO and source routing
    430            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000D0   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   90....       MOV     DPTR,#(_NIB + 102)
   \   0000D7   F0           MOVX    @DPTR,A
    431            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000D8   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   90....       MOV     DPTR,#(_NIB + 101)
   \   0000DF   F0           MOVX    @DPTR,A
    432            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000E0   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   90....       MOV     DPTR,#(_NIB + 103)
   \   0000E7   F0           MOVX    @DPTR,A
    433          
    434          #if defined ( ZIGBEE_MULTICAST )
    435            _NIB.nwkUseMultiCast = TRUE;
    436          #else
    437            _NIB.nwkUseMultiCast = FALSE;
   \   0000E8   E4           CLR     A
   \   0000E9   90....       MOV     DPTR,#(_NIB + 100)
   \   0000EC   F0           MOVX    @DPTR,A
    438          #endif
    439            _NIB.nwkManagerAddr = 0x0000;
   \   0000ED   90....       MOV     DPTR,#(_NIB + 105)
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   F0           MOVX    @DPTR,A
    440            _NIB.nwkUpdateId = 0;
   \   0000F3   90....       MOV     DPTR,#(_NIB + 109)
   \   0000F6   F0           MOVX    @DPTR,A
    441            _NIB.nwkTotalTransmissions = 0;
   \   0000F7   90....       MOV     DPTR,#(_NIB + 107)
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   F0           MOVX    @DPTR,A
    442          
    443            if ( ZSTACK_ROUTER_BUILD )
    444            {
    445          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    446              NLME_InitStochasticAddressing();
    447          #else
    448              NLME_InitTreeAddressing();
   \   0000FD                ; Setup parameters for call to function NLME_InitTreeAddressing
   \   0000FD   12....       LCALL   ??NLME_InitTreeAddressing?relay
    449          #endif
    450            }
    451          }
   \   000100   02....       LJMP    ?Subroutine0 & 0xFFFF
    452          
    453          /*********************************************************************
    454           * @fn       nwk_Status()
    455           *
    456           * @brief
    457           *
    458           *   Status report.
    459           *
    460           * @param   statusCode
    461           * @param   statusValue
    462           *
    463           * @return  none
    464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    466          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    467          #if defined ( SERIAL_DEBUG_SUPPORTED)
    468            switch ( statusCode )
   \   00000D   7A..         MOV     R2,#(`?<Constant "%s %s\\n">` & 0xff)
   \   00000F   7B..         MOV     R3,#((`?<Constant "%s %s\\n">` >> 8) & 0xff)
   \   000011   78..         MOV     R0,#?V0 + 4
   \   000013   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   000016   0000         DW        0
   \   000018   0900         DW        9
   \   00001A   0200         DW        2
   \   00001C   ....         DW        ??nwk_Status_0
   \   00001E   0300         DW        3
   \   000020   ....         DW        ??nwk_Status_1
   \   000022   0400         DW        4
   \   000024   ....         DW        ??nwk_Status_2
   \   000026   0500         DW        5
   \   000028   ....         DW        ??nwk_Status_3
   \   00002A   0600         DW        6
   \   00002C   ....         DW        ??nwk_Status_4
   \   00002E   0700         DW        7
   \   000030   ....         DW        ??nwk_Status_5
   \   000032   0110         DW        4097
   \   000034   ....         DW        ??nwk_Status_6
   \   000036   0310         DW        4099
   \   000038   ....         DW        ??nwk_Status_7
   \   00003A   0410         DW        4100
   \   00003C   ....         DW        ??nwk_Status_8
   \   00003E   ....         DW        ??nwk_Status_1
    469            {
    470              case NWK_STATUS_COORD_ADDR:
    471                if ( ZSTACK_ROUTER_BUILD )
    472                {PAN_ID_Success=2;
   \                     ??nwk_Status_3:
   \   000040   7402         MOV     A,#0x2
   \   000042   90....       MOV     DPTR,#PAN_ID_Success
   \   000045   F0           MOVX    @DPTR,A
    473          #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    474          //HalUARTWrite(HAL_UART_PORT_0, "\r\n+CONNECT\r\n",12);
    475          #else
    476          printf("%s %s %X\n", ZigbeeCoordStr, NetworkIDStr, statusValue);
   \   000046                ; Setup parameters for call to function printf
   \   000046   78..         MOV     R0,#?V0 + 2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75....       MOV     ?V0 + 0,#(NetworkIDStr & 0xff)
   \   00004E   75....       MOV     ?V0 + 1,#((NetworkIDStr >> 8) & 0xff)
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   75....       MOV     ?V0 + 0,#(ZigbeeCoordStr & 0xff)
   \   000059   75....       MOV     ?V0 + 1,#((ZigbeeCoordStr >> 8) & 0xff)
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7A..         MOV     R2,#(`?<Constant "%s %s %X\\n">` & 0xff)
   \   000063   7B..         MOV     R3,#((`?<Constant "%s %s %X\\n">` >> 8) & 0xff)
   \   000065   12....       LCALL   ??printf?relay
   \   000068   7406         MOV     A,#0x6
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
    477          #endif
    478               // printf("%s %s %X\n", ZigbeeCoordStr, NetworkIDStr, statusValue);
    479                  BuzzerControl( BUZZER_BLIP );
   \   00006D                ; Setup parameters for call to function BuzzerControl
   \   00006D   7902         MOV     R1,#0x2
   \   00006F   12....       LCALL   ??BuzzerControl?relay
   \   000072   02....       LJMP    ??nwk_Status_1 & 0xFFFF
    480          #if defined( SENSOR_TYPE_Coord )
    481          #if (ZDO_COORDINATOR)
    482                  uint16 nwk_data;
    483                   osal_nv_read(ZCD_NV_APP_PANID_H,0,sizeof(nwk_data),&nwk_data);
    484          #if defined(FT_PAN_ID_C_R_C)
    485                    if((statusValue-nwk_data)==1)  //Ð´Ð­µ÷Í¬¼¶Â·ÓÉ±êÖ¾²¢¸´Î»ÖØÆô  //µ±Ç°PIDÍøÂç´æÔÚÉèÖÃ³ÉÍ¬¼¶Â·ÓÉÄ£Ê½ÖØÆô
    486                    {
    487                      //HalUARTWrite(HAL_UART_PORT_0, "\r\nttyy",6);
    488                      osal_nv_read(ZCD_NV_APP_C_R_C,0,sizeof(nwk_data),&nwk_data);
    489                     // nwk_data=(nwk_data&0XF000)|0X0AAA; //0X0AAA; Èç¹ûÊÇÐ­µ÷Æ÷  ÕâÀï¸Ä³ÉÂ·ÓÉÖØÆô(²»¸Ä±ä×î¸ßÎ»==±£³ÖÐ­µ÷Æ÷Ä£Ê½)£¬Èç¹ûÊÇÂ·ÓÉÆ÷ ²»»áµ½ÕâÀï
    490                      nwk_data=0X0AAA; //0X0AAA; Èç¹ûÊÇÐ­µ÷Æ÷  ÕâÀï¸Ä³ÉÂ·ÓÉÖØÆô(²»¸Ä±ä×î¸ßÎ»==±£³ÖÐ­µ÷Æ÷Ä£Ê½)£¬Èç¹ûÊÇÂ·ÓÉÆ÷ ²»»áµ½ÕâÀï
    491                      osal_nv_item_init( ZCD_NV_APP_C_R_C,sizeof(nwk_data), &nwk_data ); 
    492                      osal_nv_write( ZCD_NV_APP_C_R_C, 0, sizeof(nwk_data), &nwk_data );
    493                      WDCTL = 0x00;WDCTL |= 0x09; //0B  1.9MS  09  0.25Ãë
    494                    }// if(((statusValue-nwk_data)>10)||(nwk_data==0)||(statusValue==0))
    495                    else     //µ±Ç°PIDÍøÂç²»´æÔÚ´´½¨
    496                    {
    497          #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    498                    HalUARTWrite(HAL_UART_PORT_0, "\r\n+CONNECT\r\n",12); //Ð­µ÷Æ÷ÍøÂç´´½¨³É¹¦
    499          #else
    500                    printf("%s %s %X\n", ZigbeeCoordStr, NetworkIDStr, statusValue);
    501          #endif
    502          
    503                    }
    504          #else   
    505                    if((((statusValue>nwk_data)?(statusValue-nwk_data):(nwk_data-statusValue))>2)||(nwk_data==0)||(statusValue==0))
    506                        {  osal_nv_item_init( ZCD_NV_APP_PANID_H,sizeof(statusValue), &statusValue ); 
    507                          osal_nv_write( ZCD_NV_APP_PANID_H, 0, sizeof(statusValue), &statusValue );
    508                          osal_nv_item_init( ZCD_NV_APP_PANID_L,sizeof(statusValue), &statusValue );
    509                          osal_nv_write( ZCD_NV_APP_PANID_L, 0,sizeof(statusValue),&statusValue);
    510                         // printf("%s","BBBB");
    511                        } 
    512          #endif   
    513          #endif   
    514          #endif     
    515                }
    516                break;
    517                
    518          #if((SENSOR_TYPE =='G')||(SENSOR_TYPE =='T')||(SENSOR_TYPE =='Q')||(SENSOR_TYPE =='O')||(SENSOR_TYPE =='P')\
    519            ||(SENSOR_TYPE ==0X02)||(SENSOR_TYPE ==0X06)||(SENSOR_TYPE ==0X20)||(SENSOR_TYPE ==0X07)\
    520              ||(SENSOR_TYPE ==0X08)||(SENSOR_TYPE ==0X09)||(SENSOR_TYPE ==0X0A)||(SENSOR_TYPE ==0X0B)\
    521                ||(SENSOR_TYPE ==0X23)||(SENSOR_TYPE ==0X18)||(SENSOR_TYPE ==0X13)||(SENSOR_TYPE ==0X14)\
    522                ||(SENSOR_TYPE ==0XA3)||(SENSOR_TYPE ==0X0D)||(SENSOR_TYPE ==0X6B)||(SENSOR_TYPE ==0X5A)||(SENSOR_TYPE ==0X5B)\
    523                  ||(SENSOR_TYPE ==0X25)||(SENSOR_TYPE ==0X26)||(SENSOR_TYPE ==0X27)||(SENSOR_TYPE ==0X6F)\
    524                    ||(SENSOR_TYPE ==0X70)||(SENSOR_TYPE ==0X71)||(SENSOR_TYPE ==0X0E)||(SENSOR_TYPE ==0X73)||(SENSOR_TYPE ==0X74)\
    525                      ||(SENSOR_TYPE ==0X86)||(SENSOR_TYPE ==0X87)||(SENSOR_TYPE ==0X79)||(SENSOR_TYPE ==0X7B)||(SENSOR_TYPE ==0X7C))
    526                
    527                case NWK_STATUS_ROUTER_ADDR:
    528                if ( ZSTACK_ROUTER_BUILD )
    529                {PAN_ID_Success=2;
    530                 // printf("%s %u\n", RouterStr, statusValue);
    531          #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    532          //HalUARTWrite(HAL_UART_PORT_0, "\r\n+CONNECT\r\n",12);
    533          #endif
    534                }
    535                break;
    536                
    537          #else
    538              case NWK_STATUS_ROUTER_ADDR:
    539                    if ( ZSTACK_ROUTER_BUILD )
    540                {
    541                  PAN_ID_Success=2;
   \                     ??nwk_Status_4:
   \   000075   7402         MOV     A,#0x2
   \   000077   90....       MOV     DPTR,#PAN_ID_Success
   \   00007A   F0           MOVX    @DPTR,A
    542          #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    543          HalUARTWrite(HAL_UART_PORT_0, "\r\n+CONNECT\r\n",12); //Â·ÓÉÆ÷¼ÓÈëÍøÂç³É¹¦
    544          #else
    545          printf("%s %u\n", RouterStr, statusValue);
   \   00007B                ; Setup parameters for call to function printf
   \   00007B   78..         MOV     R0,#?V0 + 2
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   75....       MOV     ?V0 + 0,#(RouterStr & 0xff)
   \   000083   75....       MOV     ?V0 + 1,#((RouterStr >> 8) & 0xff)
   \                     ??nwk_Status_9:
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7A..         MOV     R2,#(`?<Constant "%s %u\\n">` & 0xff)
   \   00008D   7B..         MOV     R3,#((`?<Constant "%s %u\\n">` >> 8) & 0xff)
   \   00008F   02....       LJMP    ??nwk_Status_10 & 0xFFFF
    546          #endif
    547                }
    548                break;
    549          
    550              case NWK_STATUS_ORPHAN_RSP:
    551                if ( ZSTACK_ROUTER_BUILD )
    552                {
    553                  
    554                  
    555                  if ( statusValue == ZSuccess )
   \                     ??nwk_Status_5:
   \   000092   75....       MOV     ?V0 + 0,#(OrphanRspStr & 0xff)
   \   000095   75....       MOV     ?V0 + 1,#((OrphanRspStr >> 8) & 0xff)
   \   000098   EC           MOV     A,R4
   \   000099   7001         JNZ     ??nwk_Status_11
   \   00009B   ED           MOV     A,R5
   \                     ??nwk_Status_11:
   \   00009C   700D         JNZ     ??nwk_Status_12
    556                    printf("%s %s\n", OrphanRspStr, SentStr );
   \   00009E                ; Setup parameters for call to function printf
   \   00009E   75....       MOV     ?V0 + 2,#(SentStr & 0xff)
   \   0000A1   75....       MOV     ?V0 + 3,#((SentStr >> 8) & 0xff)
   \                     ??nwk_Status_13:
   \   0000A4   78..         MOV     R0,#?V0 + 2
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   806B         SJMP    ??nwk_Status_14
    557                  else
    558                    printf("%s %s\n", OrphanRspStr, FailedStr );
   \                     ??nwk_Status_12:
   \   0000AB                ; Setup parameters for call to function printf
   \   0000AB   75....       MOV     ?V0 + 2,#(FailedStr & 0xff)
   \   0000AE   75....       MOV     ?V0 + 3,#((FailedStr >> 8) & 0xff)
   \   0000B1   80F1         SJMP    ??nwk_Status_13
    559                  
    560                  
    561                }
    562                break;
    563          
    564              case NWK_ERROR_ASSOC_RSP:
    565                if ( ZSTACK_ROUTER_BUILD )
    566                {
    567                  printf("%s\n", AssocRspFailStr);
   \                     ??nwk_Status_6:
   \   0000B3                ; Setup parameters for call to function printf
   \   0000B3   75....       MOV     ?V0 + 4,#(AssocRspFailStr & 0xff)
   \   0000B6   75....       MOV     ?V0 + 5,#((AssocRspFailStr >> 8) & 0xff)
   \                     ??nwk_Status_15:
   \   0000B9   78..         MOV     R0,#?V0 + 4
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   7A..         MOV     R2,#(`?<Constant "%s\\n">` & 0xff)
   \   0000C0   7B..         MOV     R3,#((`?<Constant "%s\\n">` >> 8) & 0xff)
   \   0000C2   12....       LCALL   ??printf?relay
   \   0000C5   7402         MOV     A,#0x2
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
    568                  printf("%u\n", (statusValue));
   \   0000CA                ; Setup parameters for call to function printf
   \   0000CA   78..         MOV     R0,#?V0 + 2
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   7A..         MOV     R2,#(`?<Constant "%u\\n">` & 0xff)
   \   0000D1   7B..         MOV     R3,#((`?<Constant "%u\\n">` >> 8) & 0xff)
   \   0000D3   12....       LCALL   ??printf?relay
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   8046         SJMP    ??nwk_Status_1
    569                }
    570                break;
    571          
    572              case NWK_STATUS_ED_ADDR:
    573                if ( ZSTACK_END_DEVICE_BUILD )
    574                {
    575                  printf("%s %u\n", EndDeviceStr, statusValue);
    576                }
    577                break;
    578          
    579              case NWK_STATUS_PARENT_ADDR:
    580           #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    581               //  printf("%s %u\n", ParentStr, statusValue);
    582          #else
    583                 printf("%s %u\n", ParentStr, statusValue);
   \                     ??nwk_Status_2:
   \   0000DD                ; Setup parameters for call to function printf
   \   0000DD   78..         MOV     R0,#?V0 + 2
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   75....       MOV     ?V0 + 0,#(ParentStr & 0xff)
   \   0000E5   75....       MOV     ?V0 + 1,#((ParentStr >> 8) & 0xff)
   \   0000E8   809C         SJMP    ??nwk_Status_9
    584          #endif  
    585               
    586                break;
    587          
    588              case NWK_STATUS_ASSOC_CNF:
    589          #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    590               //printf("%s %s\n", AssocCnfStr, SuccessStr);
    591          #else
    592                printf("%s %s\n", AssocCnfStr, SuccessStr);
   \                     ??nwk_Status_0:
   \   0000EA                ; Setup parameters for call to function printf
   \   0000EA   75....       MOV     ?V0 + 0,#(SuccessStr & 0xff)
   \   0000ED   75....       MOV     ?V0 + 1,#((SuccessStr >> 8) & 0xff)
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   75....       MOV     ?V0 + 0,#(AssocCnfStr & 0xff)
   \   0000F8   75....       MOV     ?V0 + 1,#((AssocCnfStr >> 8) & 0xff)
   \   0000FB   8019         SJMP    ??nwk_Status_14
    593          #endif  
    594                break;
    595          
    596              case NWK_ERROR_ASSOC_CNF_DENIED:
    597                printf("%s\n", AssocCnfFailStr);
   \                     ??nwk_Status_7:
   \   0000FD                ; Setup parameters for call to function printf
   \   0000FD   75....       MOV     ?V0 + 4,#(AssocCnfFailStr & 0xff)
   \   000100   75....       MOV     ?V0 + 5,#((AssocCnfFailStr >> 8) & 0xff)
   \   000103   80B4         SJMP    ??nwk_Status_15
    598                printf("%u\n", statusValue);
    599                break;
    600          
    601              case NWK_ERROR_ENERGY_SCAN_FAILED:
    602          #if(ZDO_COORDINATOR==2)  //ZIGBEE  ATÃüÁîÄ£Ê½ Í¸´«Ä£Ê½
    603              //  printf("%s %s\n", EnergyLevelStr, ScanFailedStr);
    604          #else
    605                printf("%s %s\n", EnergyLevelStr, ScanFailedStr);
   \                     ??nwk_Status_8:
   \   000105                ; Setup parameters for call to function printf
   \   000105   75....       MOV     ?V0 + 0,#(ScanFailedStr & 0xff)
   \   000108   75....       MOV     ?V0 + 1,#((ScanFailedStr >> 8) & 0xff)
   \   00010B   78..         MOV     R0,#?V0 + 0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   75....       MOV     ?V0 + 0,#(EnergyLevelStr & 0xff)
   \   000113   75....       MOV     ?V0 + 1,#((EnergyLevelStr >> 8) & 0xff)
   \                     ??nwk_Status_14:
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \                     ??nwk_Status_10:
   \   00011B   12....       LCALL   ??printf?relay
   \   00011E   7404         MOV     A,#0x4
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
    606          #endif       
    607                break;
    608          
    609          #endif    
    610            }
    611          #endif
    612          }
   \                     ??nwk_Status_1:
   \   000123   7F06         MOV     R7,#0x6
   \   000125   02....       LJMP    ?BANKED_LEAVE_XDATA
    613          
    614          /*********************************************************************
    615           * @fn       nwk_UpdateStatistics()
    616           *
    617           * @brief   Update network layer statistic counters
    618           *
    619           * @param   statisticCode
    620           *
    621           * @return  none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void nwk_UpdateStatistics( uint8 statisticCode )
   \                     nwk_UpdateStatistics:
    624          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    625          #if defined ( PACKET_FILTER_STATS )
    626            switch ( statisticCode )
    627            {
    628              case STAT_NWK_INVALID_PACKET:
    629                nwkInvalidPackets++;
    630                break;
    631          
    632              case STAT_NWK_SECURITY_FAILURE:
    633                nwkInvalidPackets++;
    634                nwkSecurityFailures++;
    635                break;
    636          
    637              case STAT_APS_INVALID_PACKET:
    638                apsInvalidPackets++;
    639                break;
    640          
    641              case STAT_APS_SECURITY_FAILURE:
    642                apsSecurityFailures++;
    643                break;
    644            }
    645          #endif
    646          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipRtrs>`:
   \   000000   0A050505     DB 10, 5, 5, 5, 5, 0
   \            0500    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipChldrn>`:
   \   000000   280A0A0A     DB 40, 10, 10, 10, 10, 0
   \            0A00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_UpdateStatistics?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_UpdateStatistics

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s %s %X\\n">`:
   \   000000   25732025     DB "%s %s %X\012"
   \            73202558
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s %u\\n">`:
   \   000000   25732025     DB "%s %u\012"
   \            750A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s %s\\n">`:
   \   000000   25732025     DB "%s %s\012"
   \            730A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s\\n">`:
   \   000000   25730A00     DB "%s\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%u\\n">`:
   \   000000   25750A00     DB "%u\012"
    647          
    648          /*********************************************************************
    649          *********************************************************************/

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     NIB_init                         2      0      0
       -> osal_rand                   4      0      0
       -> osal_memset                 4      0      0
       -> sAddrExtCpy                 4      0      0
       -> NLME_InitTreeAddressing     4      0      0
     nwk_Status                       0      0     20
       -> printf                      0      0     40
       -> BuzzerControl               0      0     28
       -> printf                      0      0     36
       -> printf                      0      0     36
       -> printf                      0      0     36
       -> printf                      0      0     32
       -> printf                      0      0     32
       -> printf                      0      0     36
       -> printf                      0      0     36
       -> printf                      0      0     32
       -> printf                      0      0     32
       -> printf                      0      0     36
     nwk_UpdateStatistics             0      0      0
     nwk_globals_init                 2      0      2
       -> AddrMgrInit                 4      0      0
       -> osal_mem_alloc              4      0      0
       -> RTG_FillCSkipTable          4      0      4


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     gNWK_MAX_DEVICE_LIST                      2
     gNWK_MAX_SLEEPING_END_DEVICES             1
     gNWK_MAX_DATABUFS_WAITING                 1
     gNWK_MAX_DATABUFS_SCHEDULED               1
     gNWK_MAX_DATABUFS_CONFIRMED               1
     gNWK_MAX_DATABUFS_TOTAL                   1
     gNWK_INDIRECT_CNT_RTG_TMR                 1
     gNWK_INDIRECT_MSG_MAX_PER                 1
     gNWK_INDIRECT_MSG_MAX_ALL                 1
     Cskip                                     2
     CskipRtrs                                 6
     CskipChldrn                               6
     gMIN_TREE_LINK_COST                       1
     AssociatedDevList                      1008
     gMAX_RTG_ENTRIES                          2
     gMAX_RTG_SRC_ENTRIES                      2
     gMAX_RREQ_ENTRIES                         1
     gMAX_NEIGHBOR_ENTRIES                     1
     neighborTable                            92
     gMAX_SOURCE_ROUTE                         1
     gMAX_BROADCAST_QUEUED                     1
     gLINK_DOWN_TRIGGER                        1
     rtgTable                                280
     rtDiscTable                              64
     bcastTable                               72
     bcastHoldHandle                           9
     bcastHoldAckMask                         36
     gMAX_BCAST                                1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                               1
     gMTO_RREQ_LIMIT_TIME                      2
     gMTO_ROUTE_EXPIRY_TIME                    1
     gDEFAULT_ROUTE_REQUEST_RADIUS             1
     gDEF_NWK_RADIUS                           1
     gLINK_STATUS_JITTER_MASK                  2
     gNWK_MAX_BINDING_ENTRIES                  2
     gMAX_BINDING_CLUSTER_IDS                  1
     gBIND_REC_SIZE                            2
     BindingTable                             56
     gAPS_MAX_GROUPS                           1
     defaultKey                               16
     defaultTCLinkKey                         16
     PAN_ID_Success                            1
     PingStr                                  18
     AssocCnfStr                              13
     SuccessStr                                8
     EndDeviceStr                             11
     ParentStr                                 8
     ZigbeeCoordStr                           13
     NetworkIDStr                             12
     RouterStr                                 8
     OrphanRspStr                             16
     SentStr                                   5
     FailedStr                                 7
     AssocRspFailStr                          19
     AssocIndStr                              10
     AssocCnfFailStr                          18
     EnergyLevelStr                           13
     ScanFailedStr                            12
     nwk_globals_init                         50
     ?Subroutine0                              7
     NIB_init                                259
     nwk_Status                              296
     nwk_UpdateStatistics                      3
     ?<Initializer for CskipRtrs>              6
     ?<Initializer for CskipChldrn>            6
     ?<Initializer for gMIN_TREE_LINK_COST>    1
     ??nwk_globals_init?relay                  6
     ??NIB_init?relay                          6
     ??nwk_Status?relay                        6
     ??nwk_UpdateStatistics?relay              6
     ?<Constant "%s %s %X\n">                 10
     ?<Constant "%s %u\n">                     7
     ?<Constant "%s %s\n">                     7
     ?<Constant "%s\n">                        4
     ?<Constant "%u\n">                        4

 
   615 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    66 bytes in segment CODE_C
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
   223 bytes in segment XDATA_ROM_C
 1 620 bytes in segment XDATA_Z
 
   718 bytes of CODE  memory
   223 bytes of CONST memory
 1 633 bytes of XDATA memory

Errors: none
Warnings: none
