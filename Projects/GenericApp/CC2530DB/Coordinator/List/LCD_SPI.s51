///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:42:01 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Sour /
//                          ce\LCD_SPI.c                                      /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCo /
//                          ord.cfg" (-DCPU32MHZ -DROOT=__near_func           /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Projects\GenericApp\Source\LCD_SPI.c" -D          /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D HAL_PA_LNA -D                      /
//                          SERIAL_SUPPORTED=DEBUG -D SENSOR_TYPE_Coord -D    /
//                          CHANLIST_C_R_E=25 -D ZDAPP_CONFIG_PAN_ID=0x0004   /
//                          -D FT_PAN_ID_C_R_C -D ZigBee_C_R_E_Engineering    /
//                          -D ZDO_COORDINATOR=0 -D xNV_RESTORE -lC           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" -lA                      /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" --diag_suppress          /
//                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ /
//                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects /
//                          \GenericApp\CC2530DB\Coordinator\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã /
//                          ÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen /
//                          ericApp\CC2530DB\..\SOURCE\" -I                   /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Coordinator\List\LCD_SPI.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD_SPI

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GT20L_SPI?relay
        FUNCTION ??GT20L_SPI?relay,0203H
        PUBLIC ??HalGT20L_TX_CMD?relay
        FUNCTION ??HalGT20L_TX_CMD?relay,0203H
        PUBLIC ??HalLed_SET_XY?relay
        FUNCTION ??HalLed_SET_XY?relay,0203H
        PUBLIC ??LCD_Clear?relay
        FUNCTION ??LCD_Clear?relay,0203H
        PUBLIC ??LCD_Init?relay
        FUNCTION ??LCD_Init?relay,0203H
        PUBLIC ??LCD_SPISSSet?relay
        FUNCTION ??LCD_SPISSSet?relay,0203H
        PUBLIC ??LCD_SPISendDatas?relay
        FUNCTION ??LCD_SPISendDatas?relay,0203H
        PUBLIC ??LCD_SPI_DC?relay
        FUNCTION ??LCD_SPI_DC?relay,0203H
        PUBLIC ??LCD_SetBackLight?relay
        FUNCTION ??LCD_SetBackLight?relay,0203H
        PUBLIC ??LCD_TimeDelay?relay
        FUNCTION ??LCD_TimeDelay?relay,0203H
        PUBLIC ??LCD_WriteChar?relay
        FUNCTION ??LCD_WriteChar?relay,0203H
        PUBLIC ??LCD_WriteString?relay
        FUNCTION ??LCD_WriteString?relay,0203H
        PUBLIC ??LCD_WriteStringL?relay
        FUNCTION ??LCD_WriteStringL?relay,0203H
        PUBLIC ??halASCII_Searh_ADDR?relay
        FUNCTION ??halASCII_Searh_ADDR?relay,0203H
        PUBLIC ??halGT20L_HRD_Font?relay
        FUNCTION ??halGT20L_HRD_Font?relay,0203H
        PUBLIC ??halOLED_control?relay
        FUNCTION ??halOLED_control?relay,0203H
        PUBLIC Dis_Zero
        PUBLIC GT20L_SPI
        FUNCTION GT20L_SPI,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC HalGT20L_TX_CMD
        FUNCTION HalGT20L_TX_CMD,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLed_SET_XY
        FUNCTION HalLed_SET_XY,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_Clear
        FUNCTION LCD_Clear,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_Init
        FUNCTION LCD_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_SPISSSet
        FUNCTION LCD_SPISSSet,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_SPISendDatas
        FUNCTION LCD_SPISendDatas,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_SPI_DC
        FUNCTION LCD_SPI_DC,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_SetBackLight
        FUNCTION LCD_SetBackLight,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_TimeDelay
        FUNCTION LCD_TimeDelay,080203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_WriteChar
        FUNCTION LCD_WriteChar,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC LCD_WriteString
        FUNCTION LCD_WriteString,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC LCD_WriteStringL
        FUNCTION LCD_WriteStringL,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBLIC X_Witch
        PUBLIC X_Witch_cn
        PUBLIC Y_Witch
        PUBLIC Y_Witch_cn
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBLIC halASCII_Searh_ADDR
        FUNCTION halASCII_Searh_ADDR,0203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC halGT20L_HRD_Font
        FUNCTION halGT20L_HRD_Font,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC halOLED_control
        FUNCTION halOLED_control,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
GT20L_SPI           SYMBOL "GT20L_SPI"
??GT20L_SPI?relay   SYMBOL "?relay", GT20L_SPI
HalGT20L_TX_CMD     SYMBOL "HalGT20L_TX_CMD"
??HalGT20L_TX_CMD?relay SYMBOL "?relay", HalGT20L_TX_CMD
HalLed_SET_XY       SYMBOL "HalLed_SET_XY"
??HalLed_SET_XY?relay SYMBOL "?relay", HalLed_SET_XY
LCD_Clear           SYMBOL "LCD_Clear"
??LCD_Clear?relay   SYMBOL "?relay", LCD_Clear
LCD_Init            SYMBOL "LCD_Init"
??LCD_Init?relay    SYMBOL "?relay", LCD_Init
LCD_SPISSSet        SYMBOL "LCD_SPISSSet"
??LCD_SPISSSet?relay SYMBOL "?relay", LCD_SPISSSet
LCD_SPISendDatas    SYMBOL "LCD_SPISendDatas"
??LCD_SPISendDatas?relay SYMBOL "?relay", LCD_SPISendDatas
LCD_SPI_DC          SYMBOL "LCD_SPI_DC"
??LCD_SPI_DC?relay  SYMBOL "?relay", LCD_SPI_DC
LCD_SetBackLight    SYMBOL "LCD_SetBackLight"
??LCD_SetBackLight?relay SYMBOL "?relay", LCD_SetBackLight
LCD_TimeDelay       SYMBOL "LCD_TimeDelay"
??LCD_TimeDelay?relay SYMBOL "?relay", LCD_TimeDelay
LCD_WriteChar       SYMBOL "LCD_WriteChar"
??LCD_WriteChar?relay SYMBOL "?relay", LCD_WriteChar
LCD_WriteString     SYMBOL "LCD_WriteString"
??LCD_WriteString?relay SYMBOL "?relay", LCD_WriteString
LCD_WriteStringL    SYMBOL "LCD_WriteStringL"
??LCD_WriteStringL?relay SYMBOL "?relay", LCD_WriteStringL
halASCII_Searh_ADDR SYMBOL "halASCII_Searh_ADDR"
??halASCII_Searh_ADDR?relay SYMBOL "?relay", halASCII_Searh_ADDR
halGT20L_HRD_Font   SYMBOL "halGT20L_HRD_Font"
??halGT20L_HRD_Font?relay SYMBOL "?relay", halGT20L_HRD_Font
halOLED_control     SYMBOL "halOLED_control"
??halOLED_control?relay SYMBOL "?relay", halOLED_control

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Source\LCD_SPI.c
//    1 /*******************************************************************************
//    2  * ÎÄ¼þÃû³Æ£ºhal_led.c
//    3  * ¹¦    ÄÜ£ºOLEDÇý¶¯
//    4  *           Ê¹ÓÃÓ²¼þSPI×ÜÏßÇý¶¯128*64µãÕóOLEDÒº¾§
//    5  * Ó²¼þÁ¬½Ó£ºÒº¾§Ä£¿éÓëCC2530µÄÓ²¼þÁ¬½Ó¹ØÏµÈçÏÂ£º
//    6  *                Òº¾§Ä£¿é                       CC2530
//    7  *                  CS                            P1.2
//    8  *                  SDA                           P1.6
//    9  *                  SCK                           P1.5
//   10  *                  RESET                         P0.0
//   11  *                  D/C#                          P2.2
//   12  *                ×Ö¿âÐ¾Æ¬
//   13  *                  CS#                           P2.1
//   14  *                  SCLK                          P1.5
//   15  *                  SI                            P1.6
//   16  *                  SO                            P1.7
//   17  *
//   18  * ×÷    Õß£ºw
//   19  * ¹«    Ë¾£ºÎÞÎý·ºÌ«¿Æ¼¼ÓÐÏÞ¹«Ë¾
//   20  ******************************************************************************/
//   21 
//   22 /* °üº¬Í·ÎÄ¼þ */
//   23 /********************************************************************/
//   24 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//   25 #include "hal_defs.h"
//   26 #include "LCD_SPI.h"
//   27 /********************************************************************/
//   28 
//   29 
//   30 /* ±¾µØ±äÁ¿ */
//   31 /********************************************************************/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   32 uint8 X_Witch = 6;
X_Witch:
        DS 1
        REQUIRE `?<Initializer for X_Witch>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   33 uint8 Y_Witch = 1;
Y_Witch:
        DS 1
        REQUIRE `?<Initializer for Y_Witch>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   34 uint8 X_Witch_cn = 16;
X_Witch_cn:
        DS 1
        REQUIRE `?<Initializer for X_Witch_cn>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   35 uint8 Y_Witch_cn = 16;
Y_Witch_cn:
        DS 1
        REQUIRE `?<Initializer for Y_Witch_cn>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   36 uint8 Dis_Zero = 0;
Dis_Zero:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   37 /********************************************************************/
//   38 
//   39 #define FUNCTION_SET(options,OLED_DC)       halOLED_control(options,OLED_DC)
//   40 
//   41 /*********************************************************************
//   42  * º¯ÊýÃû³Æ£ºLCD_TimeDelay
//   43  * ¹¦    ÄÜ£ºÑÓÊ±º¯Êý
//   44  * Èë¿Ú²ÎÊý£ºTimers  ÑÓÊ±Ê±¼ä²ÎÊý
//   45  * ³ö¿Ú²ÎÊý£ºÎÞ
//   46  * ·µ »Ø Öµ£ºÎÞ
//   47  ********************************************************************/
//   48 void LCD_TimeDelay(uint16 Timers);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   49 void LCD_TimeDelay(uint16 Timers)
LCD_TimeDelay:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function LCD_TimeDelay
//   50 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??LCD_TimeDelay_0
//   51   uint16 i;
//   52 
//   53   while(Timers)
//   54   {
//   55     Timers--;
??LCD_TimeDelay_1:
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//   56     for(i = 0; i < 100; i++)NOP();
        MOV     A,#0x64
??LCD_TimeDelay_2:
        nop
        DEC     A
        JNZ     ??LCD_TimeDelay_2
//   57   }
??LCD_TimeDelay_0:
        MOV     A,R2
        JNZ     ??LCD_TimeDelay_3
        MOV     A,R3
??LCD_TimeDelay_3:
        JNZ     ??LCD_TimeDelay_1
//   58 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   59 
//   60 
//   61 /*********************************************************************
//   62  * º¯ÊýÃû³Æ£ºLCD_SPISSSet
//   63  * ¹¦    ÄÜ£ºÖÃSSÏß×´Ì¬
//   64  * Èë¿Ú²ÎÊý£ºStatus SSÏß×´Ì¬
//   65  * ³ö¿Ú²ÎÊý£ºÎÞ
//   66  * ·µ »Ø Öµ£ºÎÞ
//   67  ********************************************************************/
//   68 void LCD_SPISSSet(uint8 Status);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   69 void LCD_SPISSSet(uint8 Status)
LCD_SPISSSet:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function LCD_SPISSSet
//   70 {
        ; Saved register size: 0
        ; Auto size: 0
//   71   NOP();NOP();NOP();
        nop
        nop
        nop
//   72   if(Status)				
        MOV     A,R1
        JZ      ??LCD_SPISSSet_0
//   73     H_LCD_CSn();
        SETB    0x90.2
        SJMP    ??LCD_SPISSSet_1
//   74   else
//   75     L_LCD_CSn();
??LCD_SPISSSet_0:
        CLR     0x90.2
        CFI EndBlock cfiBlock1
//   76 
//   77   NOP();NOP();NOP();NOP();
??LCD_SPISSSet_1:
        REQUIRE ?Subroutine0
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0
//   78 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        nop
        nop
        nop
        nop
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//   79 
//   80 /*********************************************************************
//   81  * º¯ÊýÃû³Æ£ºLCD_SPI_DC
//   82  * ¹¦    ÄÜ£ºÖÃDATA/COMMANDÏß×´Ì¬
//   83  * Èë¿Ú²ÎÊý£ºStatus SSÏß×´Ì¬
//   84  * ³ö¿Ú²ÎÊý£ºÎÞ
//   85  * ·µ »Ø Öµ£ºÎÞ
//   86  ********************************************************************/
//   87 void LCD_SPI_DC(uint8 Status);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 void LCD_SPI_DC(uint8 Status)
LCD_SPI_DC:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function LCD_SPI_DC
//   89 {
        ; Saved register size: 0
        ; Auto size: 0
//   90   NOP();NOP();NOP();
        nop
        nop
        nop
//   91   if(Status)				
        MOV     A,R1
        JZ      ??LCD_SPI_DC_0
//   92     LCD_DATA();
        SETB    0xa0.2
        SJMP    ??LCD_SPI_DC_1
//   93   else
//   94     LCD_COMMAND();
??LCD_SPI_DC_0:
        CLR     0xa0.2
//   95 
//   96   NOP();NOP();NOP();NOP();
??LCD_SPI_DC_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
        REQUIRE _A_P2
//   97 }
//   98 
//   99 /*********************************************************************
//  100  * º¯ÊýÃû³Æ£ºGT20L_SPI
//  101  * ¹¦    ÄÜ£ºÆ¬Ñ¡GT20
//  102  * Èë¿Ú²ÎÊý£ºStatus SSÏß×´Ì¬
//  103  * ³ö¿Ú²ÎÊý£ºÎÞ
//  104  * ·µ »Ø Öµ£ºÎÞ
//  105  ********************************************************************/
//  106 void GT20L_SPI(uint8 Status);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 void GT20L_SPI(uint8 Status)
GT20L_SPI:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function GT20L_SPI
//  108 {
        ; Saved register size: 0
        ; Auto size: 0
//  109   NOP();NOP();NOP();
        nop
        nop
        nop
//  110   if(Status)				
        MOV     A,R1
        JZ      ??GT20L_SPI_0
//  111     L_GT20_CSn();
        CLR     0xa0.1
        SJMP    ??GT20L_SPI_1
//  112   else
//  113     H_GT20_CSn();
??GT20L_SPI_0:
        SETB    0xa0.1
//  114 
//  115   NOP();NOP();NOP();NOP();
??GT20L_SPI_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock4
        REQUIRE _A_P2
//  116 }
//  117 /*********************************************************************
//  118  * º¯ÊýÃû³Æ£ºLCD_SPISendData
//  119  * ¹¦    ÄÜ£ºÍ¨¹ý´®ÐÐSPI¿ÚÊäËÍÒ»¸öbyteµÄÊý¾ÝÖÃÄ£×é
//  120  * Èë¿Ú²ÎÊý£ºData  Òª´«ËÍµÄÊý¾Ý
//  121  * ³ö¿Ú²ÎÊý£ºtemp
//  122  * ·µ »Ø Öµ£ºSPI½Óµ½Êý¾Ý
//  123  ********************************************************************/
//  124 uint8 LCD_SPISendDatas(uint8 Data);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 uint8 LCD_SPISendDatas(uint8 Data)
LCD_SPISendDatas:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function LCD_SPISendDatas
//  126 {
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R3,A
//  127   uint8 i=0;
//  128   uint8 temp=0;
        MOV     R1,#0x0
//  129 
//  130   for(i = 0; i < 8; i++)
        MOV     R2,#0x0
//  131   {
//  132     NOP();NOP();NOP();NOP();NOP();NOP(); // ÊÊµ±²åÈëÒ»Ð©¿Õ²Ù×÷ÒÔ±£Ö¤SPIÊ±ÖÓËÙ¶ÈÐ¡ÓÚ2MHz
??LCD_SPISendDatas_0:
        nop
        nop
        nop
        nop
        nop
        nop
//  133     L_LCD_SCK();	
        CLR     0x90.5
//  134 		
//  135     if(Data&0x80)
        MOV     A,R3
        MOV     C,0xE0 /* A   */.7
        JNC     ??LCD_SPISendDatas_1
//  136       H_LCD_SDA();
        SETB    0x90.6
        SJMP    ??LCD_SPISendDatas_2
//  137     else
//  138       L_LCD_SDA();
??LCD_SPISendDatas_1:
        CLR     0x90.6
//  139 
//  140     NOP();NOP();NOP();NOP();NOP(); //ÊÊµ±²åÈëÒ»Ð©¿Õ²Ù×÷ÒÔ±£Ö¤SPIÊ±ÖÓËÙ¶ÈÐ¡ÓÚ2MHz
??LCD_SPISendDatas_2:
        nop
        nop
        nop
        nop
        nop
//  141     NOP();NOP();NOP();NOP();NOP();
        nop
        nop
        nop
        nop
        nop
//  142     H_LCD_SCK();
        SETB    0x90.5
//  143     if(GT20_MISO==1)
        MOV     C,0x90.7
        JNC     ??LCD_SPISendDatas_3
//  144     {
//  145       temp=temp | BV(7-i);
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x7
        CLR     C
        SUBB    A,R2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
//  146     }
//  147     NOP();NOP();NOP();NOP();NOP();
??LCD_SPISendDatas_3:
        nop
        nop
        nop
        nop
        nop
//  148 		
//  149     Data = Data << 1;		   //Êý¾Ý×óÒÆÒ»Î»
        MOV     A,R3
        CLR     C
        RLC     A
        MOV     R3,A
//  150   }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_SPISendDatas_0
//  151   NOP();NOP();NOP();NOP();NOP();NOP();NOP();NOP();
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
//  152   return temp;
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-4
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
        REQUIRE _A_P1
//  153 }
//  154 /*********************************************************************
//  155  * º¯ÊýÃû³Æ£ºhalOLED_control
//  156  * ¹¦    ÄÜ£ºÍ¨¹ý´®ÐÐSPI¿ÚÊäËÍÒ»¸öbyteµÄÊý¾ÝÖÃÄ£×é
//  157  * Èë¿Ú²ÎÊý£ºÊý¾Ýcmd, ÃüÁî¿ØÖÆ OLED_DC
//  158  * ³ö¿Ú²ÎÊý£ºÎÞ
//  159  * ·µ »Ø Öµ£ºÎÞ
//  160  ********************************************************************/
//  161 void halOLED_control(uint8 cmd, uint8 OLED_DC);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  162 void halOLED_control(uint8 cmd, uint8 OLED_DC)
halOLED_control:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function halOLED_control
//  163 {
        FUNCALL halOLED_control, LCD_SPISSSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halOLED_control, LCD_SPI_DC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halOLED_control, LCD_SPI_DC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halOLED_control, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halOLED_control, LCD_SPI_DC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halOLED_control, LCD_SPISSSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  164   LCD_SPISSSet(0);	   //SSÖÃµÍµçÆ½
        ; Setup parameters for call to function LCD_SPISSSet
        MOV     R1,#0x0
        LCALL   ??LCD_SPISSSet?relay
//  165   if(OLED_DC==COMMAND)
        MOV     A,R7
        JNZ     ??halOLED_control_0
//  166   {
//  167     LCD_SPI_DC(0);
        ; Setup parameters for call to function LCD_SPI_DC
        MOV     R1,#0x0
        SJMP    ??halOLED_control_1
//  168   }
//  169   else
//  170   {
//  171     LCD_SPI_DC(1);
??halOLED_control_0:
        ; Setup parameters for call to function LCD_SPI_DC
        MOV     R1,#0x1
??halOLED_control_1:
        LCALL   ??LCD_SPI_DC?relay
//  172   }
//  173   LCD_SPISendDatas(cmd);   //ËÍÖ¸Áî0x80
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     A,R6
        MOV     R1,A
        LCALL   ??LCD_SPISendDatas?relay
//  174   LCD_SPI_DC(1);
        ; Setup parameters for call to function LCD_SPI_DC
        MOV     R1,#0x1
        LCALL   ??LCD_SPI_DC?relay
//  175   LCD_SPISSSet(1);	   //Íê³É²Ù×÷ÖÃSS¸ßµçÆ½
        ; Setup parameters for call to function LCD_SPISSSet
        MOV     R1,#0x1
        LCALL   ??LCD_SPISSSet?relay
//  176 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
//  177 
//  178 /*********************************************************************
//  179  * º¯ÊýÃû³Æ£ºHalLed_SET_XY
//  180  * ¹¦    ÄÜ£ºÉèÖÃ x y µØÖ·
//  181  * Èë¿Ú²ÎÊý£ºx   xµØÖ·
//  182  *           y   yµØÖ·
//  183  * ³ö¿Ú²ÎÊý£ºÎÞ
//  184  * ·µ »Ø Öµ£ºÎÞ
//  185  ********************************************************************/
//  186 void HalLed_SET_XY(unsigned char x,unsigned char y);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  187 void HalLed_SET_XY(unsigned char x,unsigned char y)
HalLed_SET_XY:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalLed_SET_XY
//  188 {
        FUNCALL HalLed_SET_XY, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLed_SET_XY, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLed_SET_XY, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLed_SET_XY, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLed_SET_XY, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLed_SET_XY, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  189   FUNCTION_SET(0x22,COMMAND);	//´«ËÍÖ¸Áî0x22
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x0
        MOV     R1,#0x22
        LCALL   ??Subroutine8_0 & 0xFFFF
//  190   FUNCTION_SET(y,COMMAND);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄYÖáÎ»ÖÃ
??CrossCallReturnLabel_11:
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Subroutine8_0 & 0xFFFF
//  191   FUNCTION_SET(Dis_Y_MAX ,COMMAND);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄYÖáÎ»ÖÃ
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine4 & 0xFFFF
//  192   FUNCTION_SET(0x21,COMMAND);	//´«ËÍÖ¸Áî0x21
??CrossCallReturnLabel_9:
        MOV     R1,#0x21
        LCALL   ??Subroutine8_0 & 0xFFFF
//  193   FUNCTION_SET(x,COMMAND);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄXÖáÎ»ÖÃ
??CrossCallReturnLabel_13:
        MOV     A,R7
        MOV     R1,A
        LCALL   ??Subroutine8_0 & 0xFFFF
//  194   FUNCTION_SET(Dis_X_MAX ,COMMAND);	//ÒªÏÔÊ¾×Ö·ûµÄ×óÉÏ½ÇµÄYÖáÎ»ÖÃ
??CrossCallReturnLabel_14:
        MOV     R1,#0x7f
        LCALL   ??halOLED_control?relay
//  195 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock7
//  196 
//  197 /*********************************************************************
//  198  * º¯ÊýÃû³Æ£ºHalGT20L_TX_CMD
//  199  * ¹¦    ÄÜ£ºGT20LÓ²¼þÐ´Èë¿ØÖÆ
//  200  * Èë¿Ú²ÎÊý£ºcmd   Ð´ÈëÊý¾Ý
//  201  * ³ö¿Ú²ÎÊý£ºÎÞ
//  202  * ·µ »Ø Öµ£ºÎÞ
//  203  ********************************************************************/
//  204 int8 HalGT20L_TX_CMD(uint8 cmd );

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 int8 HalGT20L_TX_CMD(uint8 cmd )
HalGT20L_TX_CMD:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function HalGT20L_TX_CMD
//  206 {
        FUNCALL HalGT20L_TX_CMD, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  207   return LCD_SPISendDatas(cmd);
        ; Setup parameters for call to function LCD_SPISendDatas
        LCALL   ??LCD_SPISendDatas?relay
        CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  208 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  209 
//  210 /*********************************************************************
//  211  * º¯ÊýÃû³Æ£ºhalGT20L_HRD_Font
//  212  * ¹¦    ÄÜ£ºGT23L¶ÁÈ¡×Ö·ûÂëÖµº¯Êý
//  213  * Èë¿Ú²ÎÊý£º Dst ×Ö¿âµØÖ·, no_bytes Ò»¸ö×Ö·ûÐèÒªµÄÂëÖµ ×Ö½ÚÊý ,  *buffer ÂëÖµ
//  214  * ³ö¿Ú²ÎÊý£ºÎÞ
//  215  * ·µ »Ø Öµ£ºÎÞ
//  216  ********************************************************************/
//  217 void halGT20L_HRD_Font(uint16 * Dst, uint8 no_bytes,uint8 *buffer);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 void halGT20L_HRD_Font(uint16 * Dst, uint8 no_bytes,uint8 *buffer)
halGT20L_HRD_Font:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function halGT20L_HRD_Font
//  219 {
        FUNCALL halGT20L_HRD_Font, GT20L_SPI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halGT20L_HRD_Font, GT20L_SPI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 3,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  220     unsigned char i = 0;
//  221     GT20L_SPI(1);                                // enable device
        ; Setup parameters for call to function GT20L_SPI
        MOV     R1,#0x1
        LCALL   ??GT20L_SPI?relay
//  222     HalGT20L_TX_CMD(0x0B);                       // read command
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     R1,#0xb
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_SPISendDatas?relay
//  223     HalGT20L_TX_CMD(Dst[1]);  // send 3 address bytes
//  224     HalGT20L_TX_CMD(((Dst[0]) >> 8));
//  225     HalGT20L_TX_CMD(Dst[0] & 0xFF);
//  226     HalGT20L_TX_CMD(0xFF);                       //dummy byte
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     R1,#-0x1
        LCALL   ??LCD_SPISendDatas?relay
//  227     for (i = 0; i < no_bytes; i++)              // read until no_bytes is reached
        MOV     ?V0 + 2,#0x0
        SJMP    ??halGT20L_HRD_Font_0
//  228     {
//  229       buffer[i] =HalGT20L_TX_CMD(0xFF);    // receive byte and store at address 80H - FFH
??halGT20L_HRD_Font_1:
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     R1,#-0x1
        LCALL   ??LCD_SPISendDatas?relay
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R1
        MOVX    @DPTR,A
//  230     }
        INC     ?V0 + 2
??halGT20L_HRD_Font_0:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 3
        JC      ??halGT20L_HRD_Font_1
//  231     GT20L_SPI(0);                                // disable device
        ; Setup parameters for call to function GT20L_SPI
        MOV     R1,#0x0
        LCALL   ??GT20L_SPI?relay
        CFI EndBlock cfiBlock10
//  232 }
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_5
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_6
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??LCD_SPISendDatas?relay
        ; Setup parameters for call to function LCD_SPISendDatas
        ; Setup parameters for call to function LCD_SPISendDatas
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  233 /*********************************************************************
//  234  * º¯ÊýÃû³Æ£ºhalASCII_Searh_ADDR
//  235  * ¹¦    ÄÜ£ºASCIIÂë×Ö·ûÄÚÂë
//  236  * Èë¿Ú²ÎÊý£ºuint8 ASCIICode,uint16 * CODE_ADDR
//  237  * ³ö¿Ú²ÎÊý£ºÎÞ
//  238  * ·µ »Ø Öµ£ºÎÞ
//  239  ********************************************************************/
//  240 void halASCII_Searh_ADDR(uint8 ASCIICode,uint16 * CODE_ADDR);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  241 void halASCII_Searh_ADDR(uint8 ASCIICode,uint16 * CODE_ADDR)
halASCII_Searh_ADDR:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function halASCII_Searh_ADDR
//  242 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  243   uint16 ASCII_Code_Addr = 0;
//  244  // ASCII_Code_Addr = ((((uint16)ASCIICode) - (uint16)0x20) * 8) +0x66C0;//ÇÐ»»×ÖÌå
//  245   ASCII_Code_Addr = ((((uint16)ASCIICode) - (uint16)0x20) * 8) +0xbfC0;
//  246   CODE_ADDR[0]=ASCII_Code_Addr ;
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#-0x40
        ADD     A,?V0 + 0
        MOV     R4,A
        MOV     A,#-0x42
        ADDC    A,?V0 + 1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  247   CODE_ADDR[1]=0x03;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  248 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19
//  249 
//  250 /*********************************************************************
//  251  * º¯ÊýÃû³Æ£ºLCD_WriteChar
//  252  * ¹¦    ÄÜ£ºÏÔÊ¾ASCIIÂë×Ö·û
//  253  * Èë¿Ú²ÎÊý£ºx  ÒªÏÔÊ¾µÄ×Ö·ûxµØÖ·
//  254  *           y  ÒªÏÔÊ¾µÄ×Ö·ûyµØÖ·
//  255  *           a  ÒªÏÔÊ¾µÄASCIIÂë×Ö·ûÖµ
//  256  * ³ö¿Ú²ÎÊý£ºÎÞ
//  257  * ·µ »Ø Öµ£ºÎÞ
//  258  ********************************************************************/
//  259 void LCD_WriteChar(uint8 x, uint8 y, const char a);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  260 void LCD_WriteChar(uint8 x, uint8 y, const char a)
LCD_WriteChar:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function LCD_WriteChar
//  261 {
        FUNCALL LCD_WriteChar, halASCII_Searh_ADDR
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_WriteChar, halGT20L_HRD_Font
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_WriteChar, HalLed_SET_XY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_WriteChar, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 2,R3
//  262   uint8 i=0;
//  263   uint16 ASCII_CODE_ADDR[2];
//  264   uint8 font_buffer[8];
//  265 
//  266   halASCII_Searh_ADDR(a ,ASCII_CODE_ADDR);
        ; Setup parameters for call to function halASCII_Searh_ADDR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,?V0 + 2
        LCALL   ??halASCII_Searh_ADDR?relay
//  267   halGT20L_HRD_Font(ASCII_CODE_ADDR,8,font_buffer);
        ; Setup parameters for call to function halGT20L_HRD_Font
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x8
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??halGT20L_HRD_Font?relay
//  268   HalLed_SET_XY(x,y);
        ; Setup parameters for call to function HalLed_SET_XY
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ??HalLed_SET_XY?relay
//  269   for(i=0;i<8;i++)
        MOV     ?V0 + 3,#0x0
//  270   {
//  271   FUNCTION_SET(font_buffer[i],DATAs);
??LCD_WriteChar_0:
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x1
        MOV     ?V0 + 0,?V0 + 3
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??halOLED_control?relay
//  272   }
        INC     ?V0 + 3
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_WriteChar_0
//  273 
//  274 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock20
//  275 
//  276 
//  277 /********************************************************************
//  278  * º¯ÊýÃû³Æ£ºLCD_WriteString
//  279  * ¹¦    ÄÜ£ºÔÚx¡¢yÎªÆðÊ¼×ø±ê´¦Ð´ÈëÒ»´®×Ö·û
//  280  * Èë¿Ú²ÎÊý£ºx  XÖá×ø±ê£¬È¡Öµ·¶Î§£º0 - 127
//  281  *           y  YÖá×ø±ê£¬È¡Öµ·¶Î§0-63
//  282  *           p  ÒªÏÔÊ¾µÄ×Ö·û´®
//  283  * ³ö¿Ú²ÎÊý£ºÎÞ
//  284  * ·µ »Ø Öµ£ºÎÞ
//  285  ********************************************************************/
//  286 void LCD_WriteString(uint8 x, uint8 y, const char *p);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  287 void LCD_WriteString(uint8 x, uint8 y, const char *p)
LCD_WriteString:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function LCD_WriteString
//  288 {
        FUNCALL LCD_WriteString, LCD_WriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        SJMP    ??LCD_WriteString_0
//  289   while(*p != 0)
//  290   {
//  291     LCD_WriteChar(x, y, *p);
//  292     x += 7;
//  293     if(x > Dis_X_MAX)
//  294     {
//  295       x = Dis_Zero;
//  296       if((Dis_Y_MAX - y) < Y_Witch) break;
//  297       else y += 1;
??LCD_WriteString_1:
        INC     ?V0 + 1
//  298     }
//  299     p+=1;
??LCD_WriteString_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
??LCD_WriteString_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R3,A
        JZ      ??LCD_WriteString_3
        ; Setup parameters for call to function LCD_WriteChar
        MOV     R2,?V0 + 1
        MOV     R1,?V0 + 0
        LCALL   ??LCD_WriteChar?relay
        MOV     A,#0x7
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        CLR     C
        SUBB    A,#-0x80
        JC      ??LCD_WriteString_2
        MOV     DPTR,#Dis_Zero
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 2,?V0 + 1
        MOV     A,#0x7
        CLR     C
        SUBB    A,?V0 + 2
        LCALL   ?Subroutine5 & 0xFFFF
//  300   }
??CrossCallReturnLabel_3:
        JNC     ??LCD_WriteString_1
//  301 }
??LCD_WriteString_3:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock21
//  302 
//  303 /********************************************************************
//  304  * º¯ÊýÃû³Æ£ºLCD_WriteStringL
//  305  * ¹¦    ÄÜ£ºÔÚx¡¢yÎªÆðÊ¼×ø±ê´¦Ð´ÈëÒ»´®×Ö·û
//  306  * Èë¿Ú²ÎÊý£ºx  XÖá×ø±ê£¬È¡Öµ·¶Î§£º0 - 127
//  307  *           y  YÖá×ø±ê£¬È¡Öµ·¶Î§0-63
//  308  *           p  ÒªÏÔÊ¾µÄ×Ö·û´®
//  309  *           l  ÒªÏÔÊ¾µÄ×Ö·û´®³¤¶È
//  310  * ³ö¿Ú²ÎÊý£ºÎÞ
//  311  * ·µ »Ø Öµ£ºÎÞ
//  312  ********************************************************************/
//  313 void LCD_WriteStringL(uint8 x, uint8 y, const char *p ,uint16 l);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  314 void LCD_WriteStringL(uint8 x, uint8 y, const char *p ,uint16 l)
LCD_WriteStringL:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function LCD_WriteStringL
//  315 {
        FUNCALL LCD_WriteStringL, LCD_WriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??LCD_WriteStringL_0
//  316   while(l != 0)
//  317   {
//  318     LCD_WriteChar(x, y, *p);
//  319     x += 7;
//  320     if(x > Dis_X_MAX)
//  321     {
//  322       x = Dis_Zero;
//  323       if((Dis_Y_MAX - y) < Y_Witch) break;
//  324       else y += 1;
??LCD_WriteStringL_1:
        INC     ?V0 + 3
//  325     }
//  326     p+=1;
??LCD_WriteStringL_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  327     l-=1;
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
??LCD_WriteStringL_0:
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        JNZ     ??LCD_WriteStringL_3
        MOV     A,?V0 + 1
??LCD_WriteStringL_3:
        JZ      ??LCD_WriteStringL_4
        ; Setup parameters for call to function LCD_WriteChar
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,?V0 + 3
        MOV     R1,?V0 + 2
        LCALL   ??LCD_WriteChar?relay
        MOV     A,#0x7
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
        CLR     C
        SUBB    A,#-0x80
        JC      ??LCD_WriteStringL_2
        MOV     DPTR,#Dis_Zero
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 4,?V0 + 3
        MOV     A,#0x7
        CLR     C
        SUBB    A,?V0 + 4
        LCALL   ?Subroutine5 & 0xFFFF
//  328   }
??CrossCallReturnLabel_4:
        JNC     ??LCD_WriteStringL_1
//  329 }
??LCD_WriteStringL_4:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     R0,A
        CLR     A
        SUBB    A,#0x0
        MOV     R1,A
        MOV     DPTR,#Y_Witch
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  330 
//  331 
//  332 
//  333 /********************************************************************
//  334  * º¯ÊýÃû³Æ£ºLCD_SetBackLight
//  335  * ¹¦    ÄÜ£ºÉèÖÃ±³¹âÁÁ¶ÈµÈ¼¶
//  336  * Èë¿Ú²ÎÊý£ºDeg  ÁÁ¶ÈµÈ¼¶0~127
//  337  * ³ö¿Ú²ÎÊý£ºÎÞ
//  338  * ·µ »Ø Öµ£ºÎÞ
//  339  ********************************************************************/
//  340 void LCD_SetBackLight(uint8 Deg);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 void LCD_SetBackLight(uint8 Deg)
LCD_SetBackLight:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function LCD_SetBackLight
//  342 {
        FUNCALL LCD_SetBackLight, GT20L_SPI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SetBackLight, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SetBackLight, LCD_SPISendDatas
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SetBackLight, GT20L_SPI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  343   GT20L_SPI(1);                                // enable device
        ; Setup parameters for call to function GT20L_SPI
        MOV     R1,#0x1
        LCALL   ??GT20L_SPI?relay
//  344   HalGT20L_TX_CMD(0x81);
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     R1,#-0x7f
        LCALL   ??LCD_SPISendDatas?relay
//  345   LCD_SPISendDatas(Deg);	   //±³¹âÉèÖÃÁÁ¶ÈÖµ
        ; Setup parameters for call to function LCD_SPISendDatas
        MOV     A,R6
        MOV     R1,A
        LCALL   ??LCD_SPISendDatas?relay
//  346   GT20L_SPI(0);
        ; Setup parameters for call to function GT20L_SPI
        MOV     R1,#0x0
        LCALL   ??GT20L_SPI?relay
//  347 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock26
//  348 
//  349 
//  350 /*********************************************************************
//  351  * º¯ÊýÃû³Æ£ºLCD_Clear
//  352  * ¹¦    ÄÜ£ºLCDÇåÆÁ
//  353  * Èë¿Ú²ÎÊý£ºÎÞ
//  354  * ³ö¿Ú²ÎÊý£ºÎÞ
//  355  * ·µ »Ø Öµ£ºÎÞ
//  356 
//  357  ********************************************************************/
//  358 void LCD_Clear(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  359 void LCD_Clear(void)
LCD_Clear:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function LCD_Clear
//  360 {
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, halOLED_control
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  361   uint8 i,j;
//  362   //ÇåÆÁ²Ù×÷
//  363   FUNCTION_SET(0x22,COMMAND);
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x0
        MOV     R1,#0x22
        LCALL   ?Subroutine3 & 0xFFFF
//  364   FUNCTION_SET(0,COMMAND);
//  365   FUNCTION_SET(7,COMMAND);
??CrossCallReturnLabel_0:
        LCALL   ?Subroutine4 & 0xFFFF
//  366   FUNCTION_SET(0x21,COMMAND);
??CrossCallReturnLabel_10:
        MOV     R1,#0x21
        LCALL   ?Subroutine3 & 0xFFFF
//  367   FUNCTION_SET(0,COMMAND);
//  368   FUNCTION_SET(127,COMMAND);
??CrossCallReturnLabel_1:
        MOV     R1,#0x7f
        LCALL   ??halOLED_control?relay
//  369 
//  370   for(i=0;i<8;i++)
        MOV     R7,#0x8
//  371   {
//  372     for(j=0;j<128;j++)
??LCD_Clear_0:
        MOV     R6,#-0x80
//  373       FUNCTION_SET(0x00,DATAs);
??LCD_Clear_1:
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x1
        MOV     R1,#0x0
        LCALL   ??halOLED_control?relay
        DEC     R6
        MOV     A,R6
        JNZ     ??LCD_Clear_1
//  374   }
        DEC     R7
        MOV     A,R7
        JNZ     ??LCD_Clear_0
//  375 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock27
//  376 
//  377 
//  378 
//  379 /*********************************************************************
//  380  * º¯ÊýÃû³Æ£ºLCD_Init
//  381  * ¹¦    ÄÜ£ºLCD³õÊ¼»¯
//  382  * Èë¿Ú²ÎÊý£ºÎÞ
//  383  * ³ö¿Ú²ÎÊý£ºÎÞ
//  384  * ·µ »Ø Öµ£ºÎÞ
//  385  ********************************************************************/
//  386 void LCD_Init(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  387 void LCD_Init(void)
LCD_Init:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function LCD_Init
//  388 {
        FUNCALL LCD_Init, LCD_TimeDelay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_TimeDelay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, halOLED_control
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_SetBackLight
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  389   P0DIR |= (0x01<<0);  // P0.0ÎªÊä³ö
        ORL     0xfd,#0x1
//  390   P1DIR |= (0x01<<2);  // P1.2ÎªÊä³ö
        ORL     0xfe,#0x4
//  391   P1DIR |= (0x01<<5);  // P1.5ÎªÊä³ö
        ORL     0xfe,#0x20
//  392   P1DIR |= (0x01<<6);  // P1.6ÎªÊä³ö
        ORL     0xfe,#0x40
//  393 
//  394   P1DIR &= (0X7F);  // P1.7ÎªÊäÈë
        ANL     0xfe,#0x7f
//  395   P2DIR |= (0x01<<1);  // P2.1ÎªÊä³ö
        ORL     0xff,#0x2
//  396   P2DIR |= (0x01<<2);  // P2.2ÎªÊä³ö
        ORL     0xff,#0x4
//  397 
//  398   /* ¸´Î»LCD */
//  399   L_LCD_RESETn();
        CLR     0x80.0
//  400   LCD_TimeDelay(3000);
        ; Setup parameters for call to function LCD_TimeDelay
        MOV     R2,#-0x48
        MOV     R3,#0xb
        LCALL   ??LCD_TimeDelay?relay
//  401   H_LCD_RESETn();
        SETB    0x80.0
//  402   LCD_TimeDelay(3000);
        ; Setup parameters for call to function LCD_TimeDelay
        MOV     R2,#-0x48
        MOV     R3,#0xb
        LCALL   ??LCD_TimeDelay?relay
//  403 
//  404   //Charge Pump Setting
//  405   FUNCTION_SET(0x8d,COMMAND);
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x0
        MOV     R1,#-0x73
        LCALL   ??Subroutine8_0 & 0xFFFF
//  406   FUNCTION_SET(0x14,COMMAND);
??CrossCallReturnLabel_15:
        MOV     R1,#0x14
        LCALL   ??Subroutine8_0 & 0xFFFF
//  407   FUNCTION_SET(0xaf,COMMAND);
??CrossCallReturnLabel_16:
        MOV     R1,#-0x51
        LCALL   ??Subroutine8_0 & 0xFFFF
//  408   //Set Display Clock
//  409   FUNCTION_SET(0xD5,COMMAND);
??CrossCallReturnLabel_17:
        MOV     R1,#-0x2b
        LCALL   ??Subroutine8_0 & 0xFFFF
//  410   FUNCTION_SET(0xF0,COMMAND);
??CrossCallReturnLabel_18:
        MOV     R1,#-0x10
        LCALL   ??Subroutine8_0 & 0xFFFF
//  411   //Set Pre-charge Period
//  412   FUNCTION_SET(0xD9,COMMAND);
??CrossCallReturnLabel_19:
        MOV     R1,#-0x27
        LCALL   ??Subroutine8_0 & 0xFFFF
//  413   FUNCTION_SET(0x11,COMMAND);
??CrossCallReturnLabel_20:
        MOV     R1,#0x11
        LCALL   ??Subroutine8_0 & 0xFFFF
//  414   //Set VCOMH Deselect Level
//  415   FUNCTION_SET(0xDb,COMMAND);
??CrossCallReturnLabel_21:
        MOV     R1,#-0x25
        LCALL   ?Subroutine3 & 0xFFFF
//  416   FUNCTION_SET(0x0,COMMAND);
//  417   //Set Norma Display
//  418   FUNCTION_SET(0xa6,COMMAND);
??CrossCallReturnLabel_2:
        MOV     R1,#-0x5a
        LCALL   ??Subroutine8_0 & 0xFFFF
//  419   //Entire Display ON
//  420   //FUNCTION_SET(0xa5,COMMAND);
//  421   //Set Contrast Control
//  422   FUNCTION_SET(0x81,COMMAND);
??CrossCallReturnLabel_22:
        MOV     R1,#-0x7f
        LCALL   ??Subroutine8_0 & 0xFFFF
//  423   FUNCTION_SET(0xff,COMMAND);  //1-256
??CrossCallReturnLabel_23:
        MOV     R1,#-0x1
        LCALL   ??Subroutine8_0 & 0xFFFF
//  424   //Set Segment Re-map
//  425   FUNCTION_SET(0xa1,COMMAND);
??CrossCallReturnLabel_24:
        MOV     R1,#-0x5f
        LCALL   ??Subroutine8_0 & 0xFFFF
//  426   //Set COM Output Scan Direction
//  427   FUNCTION_SET(0xc8,COMMAND);
??CrossCallReturnLabel_25:
        MOV     R1,#-0x38
        LCALL   ??Subroutine8_0 & 0xFFFF
//  428   //Set Memory Addressing Mode
//  429   FUNCTION_SET(0x20,COMMAND);
??CrossCallReturnLabel_26:
        MOV     R1,#0x20
        LCALL   ??Subroutine8_0 & 0xFFFF
//  430   FUNCTION_SET(0x00,COMMAND);
??CrossCallReturnLabel_27:
        MOV     R1,#0x0
        LCALL   ??halOLED_control?relay
//  431   LCD_SetBackLight(100); // µ÷½Ú±³¹âÁÁ¶È
        ; Setup parameters for call to function LCD_SetBackLight
        MOV     R1,#0x64
        LCALL   ??LCD_SetBackLight?relay
//  432 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock28
        REQUIRE _A_P0
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     R1,#0x7
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond36) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond36) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond36) CFA_SP SP+-5
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond37) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond37) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond37) CFA_SP SP+-5
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond38) CFA_SP SP+-5
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond39) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond39) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond39) CFA_SP SP+-5
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond40) CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond41) CFA_SP SP+-5
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond42) CFA_SP SP+-5
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond43) CFA_SP SP+-5
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond44) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond44) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond44) CFA_SP SP+-5
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond45) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond45) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond45) CFA_SP SP+-5
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond46) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond46) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond46) CFA_SP SP+-5
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond47) CFA_SP SP+-5
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        LCALL   ??halOLED_control?relay
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x0
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond54) CFA_SP SP+-5
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        LCALL   ??halOLED_control?relay
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??halOLED_control?relay
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        ; Setup parameters for call to function halOLED_control
        MOV     R2,#0x0
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for X_Witch>`:
        DB 6

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for Y_Witch>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for X_Witch_cn>`:
        DB 16

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for Y_Witch_cn>`:
        DB 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_TimeDelay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_TimeDelay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SPISSSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SPISSSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SPI_DC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SPI_DC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GT20L_SPI?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GT20L_SPI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SPISendDatas?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SPISendDatas

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halOLED_control?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halOLED_control

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLed_SET_XY?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLed_SET_XY

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalGT20L_TX_CMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalGT20L_TX_CMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halGT20L_HRD_Font?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halGT20L_HRD_Font

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halASCII_Searh_ADDR?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halASCII_Searh_ADDR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WriteChar?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WriteChar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WriteString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WriteStringL?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WriteStringL

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetBackLight?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetBackLight

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Clear?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Clear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Init

        END
//  433 
//  434 
//  435 
//  436 
//  437 
// 
// 960 bytes in segment BANKED_CODE
//  96 bytes in segment BANK_RELAYS
//   6 bytes in segment SFR_AN
//   4 bytes in segment XDATA_I
//   4 bytes in segment XDATA_ID
//   1 byte  in segment XDATA_Z
// 
// 1 060 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 6 bytes shared)
//     5 bytes of XDATA memory
//
//Errors: none
//Warnings: none
