###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:42:06 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\hal\common\hal_ #
#                          assert.c                                           #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\hal\common\hal_assert.c" -D ZTOOL_P1 -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D            #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\hal_assert.lst                 #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\hal_assert.r51                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2010-03-26 18:16:44 -0700 (Fri, 26 Mar 2010) $
      4            Revision:       $Revision: 22029 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
     52              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
     53            /* for access to debug data */
     54            #include "mac_rx.h"
     55            #include "mac_tx.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                       Local Prototypes
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          void halAssertHazardLights(void);
     63          
     64          
     65          /**************************************************************************************************
     66           * @fn          halAssertHandler
     67           *
     68           * @brief       Logic to handle an assert.
     69           *
     70           * @param       none
     71           *
     72           * @return      none
     73           **************************************************************************************************
     74           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void halAssertHandler(void)
   \                     halAssertHandler:
     76          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     77            /* execute code that handles asserts */
     78          #ifdef ASSERT_RESET
     79            HAL_SYSTEM_RESET();
     80          #else
     81            halAssertHazardLights();
   \   000004                ; Setup parameters for call to function halAssertHazardLights
   \   000004   12....       LCALL   ??halAssertHazardLights?relay
     82          #endif
     83          
     84          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
     85          
     86          
     87          /**************************************************************************************************
     88           * @fn          halAssertHazardLights
     89           *
     90           * @brief       Blink LEDs to indicate an error.
     91           *
     92           * @param       none
     93           *
     94           * @return      none
     95           **************************************************************************************************
     96           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
     98          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     99            enum
    100            {
    101              DEBUG_DATA_RSTACK_HIGH_OFS,
    102              DEBUG_DATA_RSTACK_LOW_OFS,
    103              DEBUG_DATA_TX_ACTIVE_OFS,
    104              DEBUG_DATA_RX_ACTIVE_OFS,
    105          
    106          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    107              DEBUG_DATA_INT_MASK_OFS,
    108          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    109              DEBUG_DATA_INT_MASK0_OFS,
    110              DEBUG_DATA_INT_MASK1_OFS,
    111          #endif
    112          
    113              DEBUG_DATA_SIZE
    114            };
    115          
    116            uint8 buttonHeld;
    117            uint8 debugData[DEBUG_DATA_SIZE];
    118          
    119            /* disable all interrupts before anything else */
    120            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR     0xa8.7
    121          
    122            /*-------------------------------------------------------------------------------
    123             *  Initialize LEDs and turn them off.
    124             */
    125            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL     0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV     A,0x9d
   \   000011   A2E6         MOV     C,0xE0 /* A   */.6
   \   000013   50FA         JNC     ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   78F8         MOV     R0,#-0x8
   \   000018   7901         MOV     R1,#0x1
   \                     ??halAssertHazardLights_1:
   \   00001A   00           NOP
   \   00001B   E8           MOV     A,R0
   \   00001C   24FF         ADD     A,#-0x1
   \   00001E   18           DEC     R0
   \   00001F   E9           MOV     A,R1
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   7001         JNZ     ??halAssertHazardLights_2
   \   000026   E9           MOV     A,R1
   \                     ??halAssertHazardLights_2:
   \   000027   70F1         JNZ     ??halAssertHazardLights_1
   \   000029   75C600       MOV     0xc6,#0x0
   \                     ??halAssertHazardLights_3:
   \   00002C   E59E         MOV     A,0x9e
   \   00002E   70FC         JNZ     ??halAssertHazardLights_3
   \   000030   43BE04       ORL     0xbe,#0x4
   \   000033   7408         MOV     A,#0x8
   \   000035   906270       MOV     DPTR,#0x6270
   \   000038   F0           MOVX    @DPTR,A
   \   000039   43FD01       ORL     0xfd,#0x1
   \   00003C   43FE02       ORL     0xfe,#0x2
   \   00003F                ; Setup parameters for call to function MAC_RfFrontendSetup
   \   00003F   12....       LCALL   ??MAC_RfFrontendSetup?relay
    126          
    127            HAL_TURN_OFF_LED1();
   \   000042   D280         SETB    0x80.0
    128            HAL_TURN_OFF_LED2();
   \   000044   D281         SETB    0x80.1
   \   000046   8019         SJMP    ??halAssertHazardLights_4
    129          
    130            /*-------------------------------------------------------------------------------
    131             *  Master infinite loop.
    132             */
    133            for (;;)
    134            {
    135              buttonHeld = 0;
    136          
    137              /*-------------------------------------------------------------------------------
    138               *  "Hazard lights" loop.  A held keypress will exit this loop.
    139               */
    140              do
    141              {
    142                HAL_LED_BLINK_DELAY();
    143          
    144                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    145          #if (HAL_NUM_LEDS >= 1)
    146                HAL_TOGGLE_LED1();
    147          #if (HAL_NUM_LEDS >= 2)
    148                HAL_TOGGLE_LED2();
    149          #if (HAL_NUM_LEDS >= 3)
    150                HAL_TOGGLE_LED3();
    151          #if (HAL_NUM_LEDS >= 4)
    152                HAL_TOGGLE_LED4();
    153          #endif
    154          #endif
    155          #endif
    156          #endif
    157          
    158                /* escape hatch to continue execution, set escape to '1' to continue execution */
    159                {
    160                  static uint8 escape = 0;
    161                  if (escape)
    162                  {
    163                    escape = 0;
    164                    return;
    165                  }
    166                }
    167          
    168                /* break out of loop if button is held long enough */
    169                if (HAL_PUSH_BUTTON1())
    170                {
    171                  buttonHeld++;
    172                }
    173                else
    174                {
    175                  buttonHeld = 0;
    176                }
    177              }
    178              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
    179          
    180              /*-------------------------------------------------------------------------------
    181               *  Just exited from "hazard lights" loop.
    182               */
    183          
    184              /* turn off all LEDs */
    185              HAL_TURN_OFF_LED1();
    186              HAL_TURN_OFF_LED2();
    187          
    188              /* wait for button release */
    189              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    190          
    191              /*-------------------------------------------------------------------------------
    192               *  Load debug data into memory.
    193               */
    194          #ifdef HAL_MCU_AVR
    195              {
    196                uint8 * pStack;
    197                pStack = (uint8 *) SP;
    198                pStack++; /* point to return address on stack */
    199                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    200                pStack++;
    201                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    202              }
    203              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    204          #endif
    205          
    206          #if (defined HAL_MCU_CC2430)
    207              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    208          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    209              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
    210              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
    211          #endif
    212          
    213          
    214          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
    215              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
    216              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
    217              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
    218          #endif
    219          
    220             /* initialize for data dump loop */
    221              {
    222                uint8 iBit;
    223                uint8 iByte;
    224          
    225                iBit  = 0;
    226                iByte = 0;
    227          
    228                /*-------------------------------------------------------------------------------
    229                 *  Data dump loop.  A button press cycles data bits to an LED.
    230                 */
    231                while (iByte < DEBUG_DATA_SIZE)
    232                {
    233                  /* wait for key press */
    234                  while(!HAL_PUSH_BUTTON1());
    235          
    236                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    237                  HAL_TURN_ON_LED1();
    238                  if (iBit == 0)
    239                  {
    240                    HAL_TURN_ON_LED2();
    241                  }
    242                  else
    243                  {
    244                    HAL_TURN_OFF_LED2();
    245                  }
    246          
    247                  /* wait for debounced key release */
    248                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    249          
    250                  /* turn off all LEDs */
    251                  HAL_TURN_OFF_LED1();
    252                  HAL_TURN_OFF_LED2();
    253          
    254                  /* output value of data bit to LED1 */
    255                  if (debugData[iByte] & (1 << (7 - iBit)))
    256                  {
    257                    HAL_TURN_ON_LED1();
    258                  }
    259                  else
    260                  {
    261                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_5:
   \   000048   D280         SETB    0x80.0
    262                  }
    263          
    264                  /* advance to next bit */
    265                  iBit++;
   \                     ??halAssertHazardLights_6:
   \   00004A   0B           INC     R3
    266                  if (iBit == 8)
   \   00004B   7408         MOV     A,#0x8
   \   00004D   6B           XRL     A,R3
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??halAssertHazardLights_7 & 0xFFFF
    267                  {
    268                    iBit = 0;
   \   000053   7B00         MOV     R3,#0x0
    269                    iByte++;
   \   000055   0C           INC     R4
    270                  }
   \   000056   EC           MOV     A,R4
   \   000057   C3           CLR     C
   \   000058   9406         SUBB    A,#0x6
   \   00005A   5003         JNC     $+5
   \   00005C   02....       LJMP    ??halAssertHazardLights_7 & 0xFFFF
    271                }
    272              }
    273          
    274              /*
    275               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    276               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    277               *  the flashing loop which uses a toggle operation to change LED states.
    278               */
    279              HAL_TURN_OFF_LED1();
   \   00005F   D280         SETB    0x80.0
   \                     ??halAssertHazardLights_4:
   \   000061   7A00         MOV     R2,#0x0
   \   000063   8006         SJMP    ??halAssertHazardLights_8
   \                     ??halAssertHazardLights_9:
   \   000065   0A           INC     R2
   \   000066   740A         MOV     A,#0xa
   \   000068   6A           XRL     A,R2
   \   000069   606E         JZ      ??halAssertHazardLights_10
   \                     ??halAssertHazardLights_8:
   \   00006B   90....       MOV     DPTR,#__Constant_0
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?L_MOV_X
   \   000073   7406         MOV     A,#0x6
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?L_MOV_TO_X
   \   00007D   8012         SJMP    ??halAssertHazardLights_11
   \                     ??halAssertHazardLights_12:
   \   00007F   90....       MOV     DPTR,#__Constant_1
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?L_MOV_X
   \   000087   7406         MOV     A,#0x6
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?L_ADD_TO_X
   \                     ??halAssertHazardLights_11:
   \   000091   7406         MOV     A,#0x6
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   C082         PUSH    DPL
   \   000098   C083         PUSH    DPH
   \   00009A   90....       MOV     DPTR,#__Constant_5800
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?L_MOV_X
   \   0000A2   D083         POP     DPH
   \   0000A4   D082         POP     DPL
   \   0000A6   78..         MOV     R0,#?V0 + 0
   \   0000A8   12....       LCALL   ?UL_GT_X
   \   0000AB   40D2         JC      ??halAssertHazardLights_12
   \   0000AD   A280         MOV     C,0x80.0
   \   0000AF   5004         JNC     ??halAssertHazardLights_13
   \   0000B1   C280         CLR     0x80.0
   \   0000B3   8002         SJMP    ??halAssertHazardLights_14
   \                     ??halAssertHazardLights_13:
   \   0000B5   D280         SETB    0x80.0
   \                     ??halAssertHazardLights_14:
   \   0000B7   A281         MOV     C,0x80.1
   \   0000B9   5004         JNC     ??halAssertHazardLights_15
   \   0000BB   C281         CLR     0x80.1
   \   0000BD   8002         SJMP    ??halAssertHazardLights_16
   \                     ??halAssertHazardLights_15:
   \   0000BF   D281         SETB    0x80.1
   \                     ??halAssertHazardLights_16:
   \   0000C1   90....       MOV     DPTR,#??escape
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   600C         JZ      ??halAssertHazardLights_17
   \   0000C7   E4           CLR     A
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   740A         MOV     A,#0xa
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   7F04         MOV     R7,#0x4
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??halAssertHazardLights_17:
   \   0000D3   A286         MOV     C,0x80.6
   \   0000D5   508E         JNC     ??halAssertHazardLights_9
   \   0000D7   8088         SJMP    ??halAssertHazardLights_4
   \                     ??halAssertHazardLights_10:
   \   0000D9   D280         SETB    0x80.0
   \   0000DB   D281         SETB    0x80.1
   \   0000DD   7800         MOV     R0,#0x0
   \   0000DF   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_18:
   \   0000E1   A286         MOV     C,0x80.6
   \   0000E3   4004         JC      ??halAssertHazardLights_19
   \   0000E5   7800         MOV     R0,#0x0
   \   0000E7   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_19:
   \   0000E9   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000EC   40F3         JC      ??halAssertHazardLights_18
   \   0000EE   9061A3       MOV     DPTR,#0x61a3
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   C0E0         PUSH    A
   \   0000F4   7404         MOV     A,#0x4
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   D0E0         POP     A
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   9061A4       MOV     DPTR,#0x61a4
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   C0E0         PUSH    A
   \   000102   7405         MOV     A,#0x5
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   90....       MOV     DPTR,#macTxActive
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   D0E0         POP     A
   \   000117   F0           MOVX    @DPTR,A
   \   000118   90....       MOV     DPTR,#macRxActive
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C0E0         PUSH    A
   \   00011E   7403         MOV     A,#0x3
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   \   000126   7B00         MOV     R3,#0x0
   \   000128   7C00         MOV     R4,#0x0
   \                     ??halAssertHazardLights_7:
   \   00012A   A286         MOV     C,0x80.6
   \   00012C   40FC         JC      ??halAssertHazardLights_7
   \   00012E   C280         CLR     0x80.0
   \   000130   EB           MOV     A,R3
   \   000131   7004         JNZ     ??halAssertHazardLights_20
   \   000133   C281         CLR     0x80.1
   \   000135   8002         SJMP    ??halAssertHazardLights_21
   \                     ??halAssertHazardLights_20:
   \   000137   D281         SETB    0x80.1
   \                     ??halAssertHazardLights_21:
   \   000139   7800         MOV     R0,#0x0
   \   00013B   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_22:
   \   00013D   A286         MOV     C,0x80.6
   \   00013F   4004         JC      ??halAssertHazardLights_23
   \   000141   7800         MOV     R0,#0x0
   \   000143   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_23:
   \   000145   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000148   40F3         JC      ??halAssertHazardLights_22
   \   00014A   D280         SETB    0x80.0
   \   00014C   D281         SETB    0x80.1
   \   00014E   75..01       MOV     ?V0 + 0,#0x1
   \   000151   75..00       MOV     ?V0 + 1,#0x0
   \   000154   7407         MOV     A,#0x7
   \   000156   C3           CLR     C
   \   000157   9B           SUBB    A,R3
   \   000158   78..         MOV     R0,#?V0 + 0
   \   00015A   12....       LCALL   ?S_SHL
   \   00015D   C0..         PUSH    ?V0 + 0
   \   00015F   8C..         MOV     ?V0 + 0,R4
   \   000161   85..82       MOV     DPL,?XSP + 0
   \   000164   85..83       MOV     DPH,?XSP + 1
   \   000167   E582         MOV     A,DPL
   \   000169   25..         ADD     A,?V0 + 0
   \   00016B   F582         MOV     DPL,A
   \   00016D   E583         MOV     A,DPH
   \   00016F   3400         ADDC    A,#0x0
   \   000171   F583         MOV     DPH,A
   \   000173   D0E0         POP     A
   \   000175   FA           MOV     R2,A
   \   000176   E0           MOVX    A,@DPTR
   \   000177   5A           ANL     A,R2
   \   000178   7003         JNZ     $+5
   \   00017A   02....       LJMP    ??halAssertHazardLights_5 & 0xFFFF
   \   00017D   C280         CLR     0x80.0
   \   00017F   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
   \   000182                REQUIRE _A_IEN0
   \   000182                REQUIRE SLEEPCMD
   \   000182                REQUIRE CLKCONCMD
   \   000182                REQUIRE _A_P0
   \   000182                REQUIRE SLEEPSTA
   \   000182                REQUIRE CLKCONSTA
   \   000182                REQUIRE P0DIR
   \   000182                REQUIRE P1DIR
    280            }
    281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   94F4         SUBB    A,#-0xc
   \   00000C   E9           MOV     A,R1
   \   00000D   9401         SUBB    A,#0x1
   \   00000F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000011   65D0         XRL     A,PSW
   \   000013   33           RLC     A
   \   000014   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHandler?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHazardLights?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHazardLights
    282          
    283          
    284          /* ------------------------------------------------------------------------------------------------
    285           *                                    Compile Time Assertions
    286           * ------------------------------------------------------------------------------------------------
    287           */
    288          
    289          /* integrity check of type sizes */
    290          HAL_ASSERT_SIZE(  int8, 1);
    291          HAL_ASSERT_SIZE( uint8, 1);
    292          HAL_ASSERT_SIZE( int16, 2);
    293          HAL_ASSERT_SIZE(uint16, 2);
    294          HAL_ASSERT_SIZE( int32, 4);
    295          HAL_ASSERT_SIZE(uint32, 4);
    296          
    297          
    298          /**************************************************************************************************
    299          */

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     halAssertHandler               2      0      0
       -> halAssertHazardLights     4      0      0
     halAssertHazardLights          2      0     22
       -> MAC_RfFrontendSetup       0      0     44


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_P0                            1
     SLEEPSTA                         1
     CLKCONSTA                        1
     _A_IEN0                          1
     SLEEPCMD                         1
     CLKCONCMD                        1
     P0DIR                            1
     P1DIR                            1
     halAssertHandler                14
     halAssertHazardLights          386
     ?Subroutine0                    21
     escape                           1
     __Constant_0                     4
     __Constant_1                     4
     __Constant_5800                  4
     ??halAssertHandler?relay         6
     ??halAssertHazardLights?relay    6

 
 421 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   8 bytes in segment SFR_AN
  12 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 433 bytes of CODE  memory
   0 bytes of CONST memory (+ 12 bytes shared)
   0 bytes of DATA  memory (+  8 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: none
