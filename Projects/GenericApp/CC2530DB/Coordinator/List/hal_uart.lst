###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:41:45 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\hal\target\CC25 #
#                          30EB\hal_uart.c                                    #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\hal\target\CC2530EB\hal_uart.c" -D        #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D         #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\hal_uart.lst                   #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\hal_uart.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "stdio.h"
     44          #include "string.h"
     45          
     46          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     47          #include "hal_defs.h"
     48          #include "hal_types.h"
     49          #include "hal_uart.h"
     50          
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * TYPEDEFS
     57           */
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          /*********************************************************************
     64           * GLOBAL VARIABLES
     65           */
     66          
     67          /*********************************************************************
     68           * GLOBAL FUNCTIONS
     69           */
     70          
     71          /*********************************************************************
     72           * LOCAL VARIABLES
     73           */
     74          
     75          /*********************************************************************
     76           * LOCAL FUNCTIONS
     77           */
     78          
     79          #if HAL_UART_DMA
     80          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   E5FF         MOV     A,0xff
   \   000009   85FFFF       MOV     0xff,0xff
   \   00000C   53F1FE       ANL     0xf1,#0xfe
   \   00000F   43F30C       ORL     0xf3,#0xc
   \   000012   E5F3         MOV     A,0xf3
   \   000014   53F2F3       ANL     0xf2,#0xf3
   \   000017   E5F2         MOV     A,0xf2
   \   000019   758680       MOV     0x86,#-0x80
   \   00001C   75C480       MOV     0xc4,#-0x80
   \   00001F   7470         MOV     A,#0x70
   \   000021   90....       MOV     DPTR,#(dmaCh1234 + 26)
   \   000024   F0           MOVX    @DPTR,A
   \   000025   74C1         MOV     A,#-0x3f
   \   000027   90....       MOV     DPTR,#(dmaCh1234 + 27)
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   90....       MOV     DPTR,#(dmaCh1234 + 28)
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   541F         ANL     A,#0x1f
   \   000031   F0           MOVX    @DPTR,A
   \   000032   740F         MOV     A,#0xf
   \   000034   90....       MOV     DPTR,#(dmaCh1234 + 30)
   \   000037   F0           MOVX    @DPTR,A
   \   000038   744A         MOV     A,#0x4a
   \   00003A   90....       MOV     DPTR,#(dmaCh1234 + 31)
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   7470         MOV     A,#0x70
   \   000040   90....       MOV     DPTR,#(dmaCh1234 + 16)
   \   000043   F0           MOVX    @DPTR,A
   \   000044   74C1         MOV     A,#-0x3f
   \   000046   90....       MOV     DPTR,#(dmaCh1234 + 17)
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   90....       MOV     DPTR,#(dmaCh1234 + 20)
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   541F         ANL     A,#0x1f
   \   000050   F0           MOVX    @DPTR,A
   \   000051   74CE         MOV     A,#-0x32
   \   000053   90....       MOV     DPTR,#(dmaCh1234 + 22)
   \   000056   F0           MOVX    @DPTR,A
   \   000057   90....       MOV     DPTR,#(dmaCh1234 + 23)
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   540F         ANL     A,#0xf
   \   00005D   4410         ORL     A,#0x10
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   74..         MOV     A,#((dmaCfg >> 8) & 0xff)
   \   000062   90....       MOV     DPTR,#(dmaCh1234 + 18)
   \   000065   F0           MOVX    @DPTR,A
   \   000066   74..         MOV     A,#(dmaCfg & 0xff)
   \   000068   90....       MOV     DPTR,#(dmaCh1234 + 19)
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   7480         MOV     A,#-0x80
   \   00006E   90....       MOV     DPTR,#(dmaCh1234 + 21)
   \   000071   F0           MOVX    @DPTR,A
   \   000072   E4           CLR     A
   \   000073   90....       MOV     DPTR,#(dmaCh1234 + 20)
   \   000076   F0           MOVX    @DPTR,A
   \   000077   7412         MOV     A,#0x12
   \   000079   90....       MOV     DPTR,#(dmaCh1234 + 23)
   \   00007C   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00007F                REQUIRE U0CSR
   \   00007F                REQUIRE P0SEL
   \   00007F                REQUIRE P2DIR
   \   00007F                REQUIRE U0UCR
   \   00007F                REQUIRE PERCFG
   \   00007F                REQUIRE ADCCFG

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine20_0
   \   000001                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   90....       MOV     DPTR,#(dmaCfg + 524)
   \   000016   E8           MOV     A,R0
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FC           MOV     R4,A
   \   000022   7403         MOV     A,#0x3
   \   000024   6C           XRL     A,R4
   \   000025   6005         JZ      ??HalUARTOpenDMA_0
   \   000027   7404         MOV     A,#0x4
   \   000029   6C           XRL     A,R4
   \   00002A   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002C   75C2D8       MOV     0xc2,#-0x28
   \   00002F   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000031   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for HalUARTOpenDMA>_0`:
   \   000038   00           DB        0
   \   000039   07           DB        7
   \   00003A   00           DB        0
   \   00003B   ....         DW        ??HalUARTOpenDMA_3
   \   00003D   01           DB        1
   \   00003E   ....         DW        ??HalUARTOpenDMA_4
   \   000040   02           DB        2
   \   000041   ....         DW        ??HalUARTOpenDMA_5
   \   000043   03           DB        3
   \   000044   ....         DW        ??HalUARTOpenDMA_6
   \   000046   11           DB        17
   \   000047   ....         DW        ??HalUARTOpenDMA_7
   \   000049   12           DB        18
   \   00004A   ....         DW        ??HalUARTOpenDMA_8
   \   00004C   13           DB        19
   \   00004D   ....         DW        ??HalUARTOpenDMA_9
   \   00004F   ....         DW        ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_7:
   \   000051   75C505       MOV     0xc5,#0x5
   \                     ??HalUARTOpenDMA_11:
   \   000054   748C         MOV     A,#-0x74
   \   000056   802D         SJMP    ??HalUARTOpenDMA_12
   \                     ??HalUARTOpenDMA_8:
   \   000058   75C506       MOV     0xc5,#0x6
   \   00005B   80F7         SJMP    ??HalUARTOpenDMA_11
   \                     ??HalUARTOpenDMA_9:
   \   00005D   75C507       MOV     0xc5,#0x7
   \   000060   7446         MOV     A,#0x46
   \   000062   8021         SJMP    ??HalUARTOpenDMA_12
   \                     ??HalUARTOpenDMA_3:
   \   000064   75C508       MOV     0xc5,#0x8
   \   000067   7423         MOV     A,#0x23
   \   000069   801A         SJMP    ??HalUARTOpenDMA_12
   \                     ??HalUARTOpenDMA_4:
   \   00006B   75C509       MOV     0xc5,#0x9
   \   00006E   7412         MOV     A,#0x12
   \   000070   8013         SJMP    ??HalUARTOpenDMA_12
   \                     ??HalUARTOpenDMA_5:
   \   000072   75C50A       MOV     0xc5,#0xa
   \   000075   7409         MOV     A,#0x9
   \   000077   800C         SJMP    ??HalUARTOpenDMA_12
   \                     ??HalUARTOpenDMA_6:
   \   000079   75C50A       MOV     0xc5,#0xa
   \   00007C   7406         MOV     A,#0x6
   \   00007E   8005         SJMP    ??HalUARTOpenDMA_12
   \                     ??HalUARTOpenDMA_10:
   \   000080   75C50B       MOV     0xc5,#0xb
   \   000083   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_12:
   \   000085   90....       MOV     DPTR,#(dmaCfg + 520)
   \   000088   F0           MOVX    @DPTR,A
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   600D         JZ      ??HalUARTOpenDMA_13
   \   000092   75C442       MOV     0xc4,#0x42
   \   000095   43F310       ORL     0xf3,#0x10
   \   000098   C285         CLR     0x80.5
   \   00009A   43FD20       ORL     0xfd,#0x20
   \   00009D   8003         SJMP    ??HalUARTOpenDMA_14
   \                     ??HalUARTOpenDMA_13:
   \   00009F   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_14:
   \   0000A2   9070C1       MOV     DPTR,#0x70c1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   90....       MOV     DPTR,#dmaCfg
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E4           CLR     A
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   75D1F7       MOV     0xd1,#-0x9
   \   0000B0   75D608       MOV     0xd6,#0x8
   \   0000B3                ; Setup parameters for call to function osal_memset
   \   0000B3   FC           MOV     R4,A
   \   0000B4   7D01         MOV     R5,#0x1
   \   0000B6   74FF         MOV     A,#-0x1
   \   0000B8   65C2         XRL     A,0xc2
   \   0000BA   F9           MOV     R1,A
   \   0000BB   7A..         MOV     R2,#(dmaCfg & 0xff)
   \   0000BD   7B..         MOV     R3,#((dmaCfg >> 8) & 0xff)
   \   0000BF   12....       LCALL   ??osal_memset?relay
   \   0000C2   438640       ORL     0x86,#0x40
   \   0000C5   E4           CLR     A
   \   0000C6   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000CD   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000D0                REQUIRE _A_P0
   \   0000D0                REQUIRE U0CSR
   \   0000D0                REQUIRE P0SEL
   \   0000D0                REQUIRE P0DIR
   \   0000D0                REQUIRE U0BAUD
   \   0000D0                REQUIRE U0UCR
   \   0000D0                REQUIRE U0GCR
   \   0000D0                REQUIRE DMAIRQ
   \   0000D0                REQUIRE DMAARM

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(unsigned char *, uint16)
   \                     HalUARTReadDMA:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   8027         SJMP    ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E5..         MOV     A,?V0 + 0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   85C2..       MOV     ?V0 + 0,0xc2
   \   00001A   74FF         MOV     A,#-0x1
   \   00001C   65..         XRL     A,?V0 + 0
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000023   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000026   4002         JC      ??HalUARTReadDMA_2
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   00002A   E8           MOV     A,R0
   \   00002B   2401         ADD     A,#0x1
   \   00002D   08           INC     R0
   \   00002E   E9           MOV     A,R1
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F9           MOV     R1,A
   \                     ??HalUARTReadDMA_0:
   \   000032   C3           CLR     C
   \   000033   E8           MOV     A,R0
   \   000034   9C           SUBB    A,R4
   \   000035   E9           MOV     A,R1
   \   000036   9D           SUBB    A,R5
   \   000037   500C         JNC     ??HalUARTReadDMA_3
   \   000039   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   65C2         XRL     A,0xc2
   \   000043   60C6         JZ      ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000045   C285         CLR     0x80.5
   \   000047   E8           MOV     A,R0
   \   000048   FA           MOV     R2,A
   \   000049   E9           MOV     A,R1
   \   00004A   FB           MOV     R3,A
   \   00004B                REQUIRE ?Subroutine1
   \   00004B                REQUIRE _A_P0
   \   00004B                REQUIRE U0BAUD
   \   00004B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   34..         ADDC    A,#((dmaCfg >> 8) & 0xff)
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#(dmaCfg + 256)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C3           CLR     C
   \   000005   33           RLC     A
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   EE           MOV     A,R6
   \   00000B   24..         ADD     A,#(dmaCfg & 0xff)
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E5..         MOV     A,?V0 + 1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#(dmaCfg + 256)
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   04           INC     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   C3           CLR     C
   \   00000D   9480         SUBB    A,#-0x80
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
   \                     HalUARTWriteDMA:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000C   2C           ADD     A,R4
   \   00000D   F8           MOV     R0,A
   \   00000E   E4           CLR     A
   \   00000F   3D           ADDC    A,R5
   \   000010   F9           MOV     R1,A
   \   000011   C3           CLR     C
   \   000012   E8           MOV     A,R0
   \   000013   9481         SUBB    A,#-0x7f
   \   000015   E9           MOV     A,R1
   \   000016   9400         SUBB    A,#0x0
   \   000018   4007         JC      ??HalUARTWriteDMA_0
   \   00001A   7A00         MOV     R2,#0x0
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000021   E5A8         MOV     A,0xa8
   \   000023   FA           MOV     R2,A
   \   000024   C2AF         CLR     0xa8.7
   \   000026   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000029   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00002C   EA           MOV     A,R2
   \   00002D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002F   92AF         MOV     0xa8.7,C
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   801A         SJMP    ??CrossCallReturnLabel_6
   \                     ??HalUARTWriteDMA_2:
   \   000037   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00003A   C0E0         PUSH    A
   \   00003C   85....       MOV     ?V0 + 2,?V0 + 0
   \   00003F   75..00       MOV     ?V0 + 3,#0x0
   \   000042   7407         MOV     A,#0x7
   \   000044   78..         MOV     R0,#?V0 + 2
   \   000046   12....       LCALL   ?S_SHL
   \   000049   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00004C   D0E0         POP     A
   \   00004E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000051   C3           CLR     C
   \   000052   EA           MOV     A,R2
   \   000053   9C           SUBB    A,R4
   \   000054   EB           MOV     A,R3
   \   000055   9D           SUBB    A,R5
   \   000056   40DF         JC      ??HalUARTWriteDMA_2
   \   000058   A2AF         MOV     C,0xa8.7
   \   00005A   E4           CLR     A
   \   00005B   92E0         MOV     0xE0 /* A   */.0,C
   \   00005D   F5..         MOV     ?V0 + 0,A
   \   00005F   C2AF         CLR     0xa8.7
   \   000061   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000064   E0           MOVX    A,@DPTR
   \   000065   65..         XRL     A,?V0 + 7
   \   000067   6039         JZ      ??HalUARTWriteDMA_3
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006D   92AF         MOV     0xa8.7,C
   \   00006F   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B00         MOV     R3,#0x0
   \   000076   801A         SJMP    ??CrossCallReturnLabel_7
   \                     ??HalUARTWriteDMA_4:
   \   000078   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00007B   C0E0         PUSH    A
   \   00007D   85....       MOV     ?V0 + 2,?V0 + 0
   \   000080   75..00       MOV     ?V0 + 3,#0x0
   \   000083   7407         MOV     A,#0x7
   \   000085   78..         MOV     R0,#?V0 + 2
   \   000087   12....       LCALL   ?S_SHL
   \   00008A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00008D   D0E0         POP     A
   \   00008F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000092   C3           CLR     C
   \   000093   EA           MOV     A,R2
   \   000094   9C           SUBB    A,R4
   \   000095   EB           MOV     A,R3
   \   000096   9D           SUBB    A,R5
   \   000097   40DF         JC      ??HalUARTWriteDMA_4
   \   000099   A2AF         MOV     C,0xa8.7
   \   00009B   E4           CLR     A
   \   00009C   92E0         MOV     0xE0 /* A   */.0,C
   \   00009E   F5..         MOV     ?V0 + 0,A
   \   0000A0   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_3:
   \   0000A2   85..82       MOV     DPL,?V0 + 7
   \   0000A5   A882         MOV     R0,DPL
   \   0000A7   E8           MOV     A,R0
   \   0000A8   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000AB   E5..         MOV     A,?V0 + 6
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   7006         JNZ     ??HalUARTWriteDMA_5
   \   0000B4   7401         MOV     A,#0x1
   \   0000B6   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000B9   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_5:
   \   0000BA   E5..         MOV     A,?V0 + 0
   \   0000BC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BE   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000C0   7F08         MOV     R7,#0x8
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C5                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 6
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   000007   F8           MOV     R0,A
   \   000008   E4           CLR     A
   \   000009   34..         ADDC    A,#(((dmaCfg + 260) >> 8) & 0xff)
   \   00000B   F9           MOV     R1,A
   \   00000C   E5..         MOV     A,?V0 + 2
   \   00000E   28           ADD     A,R0
   \   00000F   F582         MOV     DPL,A
   \   000011   E5..         MOV     A,?V0 + 3
   \   000013   39           ADDC    A,R1
   \   000014   F583         MOV     DPH,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 7,A
   \   000003   F582         MOV     DPL,A
   \   000005   8582..       MOV     ?V0 + 0,DPL
   \   000008   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 6,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   05..         INC     ?V0 + 6
   \   000003   EA           MOV     A,R2
   \   000004   2401         ADD     A,#0x1
   \   000006   0A           INC     R2
   \   000007   EB           MOV     A,R3
   \   000008   3400         ADDC    A,#0x0
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV     A,#0x1
   \   000002   68           XRL     A,R0
   \   000003                REQUIRE ??Subroutine19_0
   \   000003                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#(((dmaCfg + 516) >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   90....       MOV     DPTR,#(dmaCfg + 256)
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00000F   706B         JNZ     ??HalUARTPollDMA_0
   \   000011   EA           MOV     A,R2
   \   000012   FF           MOV     R7,A
   \                     ??HalUARTPollDMA_1:
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000017   700D         JNZ     ??HalUARTPollDMA_2
   \   000019   0F           INC     R7
   \   00001A   EF           MOV     A,R7
   \   00001B   C3           CLR     C
   \   00001C   9480         SUBB    A,#-0x80
   \   00001E   4002         JC      ??HalUARTPollDMA_3
   \   000020   7F00         MOV     R7,#0x0
   \                     ??HalUARTPollDMA_3:
   \   000022   EA           MOV     A,R2
   \   000023   6F           XRL     A,R7
   \   000024   70ED         JNZ     ??HalUARTPollDMA_1
   \                     ??HalUARTPollDMA_2:
   \   000026   90....       MOV     DPTR,#(dmaCfg + 258)
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FB           MOV     R3,A
   \   00002B   90....       MOV     DPTR,#(dmaCfg + 257)
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6F           XRL     A,R7
   \   000030   600F         JZ      ??HalUARTPollDMA_4
   \   000032   EF           MOV     A,R7
   \   000033   F0           MOVX    @DPTR,A
   \   000034   EB           MOV     A,R3
   \   000035   7006         JNZ     ??HalUARTPollDMA_5
   \   000037   E595         MOV     A,0x95
   \   000039   90....       MOV     DPTR,#(dmaCfg + 259)
   \   00003C   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_5:
   \   00003D   74C6         MOV     A,#-0x3a
   \   00003F   8020         SJMP    ??HalUARTPollDMA_6
   \                     ??HalUARTPollDMA_4:
   \   000041   EB           MOV     A,R3
   \   000042   6021         JZ      ??HalUARTPollDMA_7
   \   000044   90....       MOV     DPTR,#(dmaCfg + 259)
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   E595         MOV     A,0x95
   \   00004B   C3           CLR     C
   \   00004C   9A           SUBB    A,R2
   \   00004D   FA           MOV     R2,A
   \   00004E   C3           CLR     C
   \   00004F   9B           SUBB    A,R3
   \   000050   500E         JNC     ??HalUARTPollDMA_8
   \   000052   90....       MOV     DPTR,#(dmaCfg + 258)
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C3           CLR     C
   \   000057   9A           SUBB    A,R2
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E595         MOV     A,0x95
   \   00005B   90....       MOV     DPTR,#(dmaCfg + 259)
   \   00005E   8004         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_8:
   \   000060   E4           CLR     A
   \                     ??HalUARTPollDMA_6:
   \   000061   90....       MOV     DPTR,#(dmaCfg + 258)
   \                     ??HalUARTPollDMA_9:
   \   000064   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   000065                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000065   12....       LCALL   ??HalUARTRxAvailDMA?relay
   \   000068   8A..         MOV     ?V0 + 0,R2
   \   00006A   8B..         MOV     ?V0 + 1,R3
   \   00006C   A8..         MOV     R0,?V0 + 0
   \   00006E   A9..         MOV     R1,?V0 + 1
   \   000070   C3           CLR     C
   \   000071   E8           MOV     A,R0
   \   000072   9470         SUBB    A,#0x70
   \   000074   E9           MOV     A,R1
   \   000075   9400         SUBB    A,#0x0
   \   000077   400A         JC      ??HalUARTPollDMA_10
   \   000079   0E           INC     R6
   \   00007A   8024         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_0:
   \   00007C   E4           CLR     A
   \   00007D   90....       MOV     DPTR,#(dmaCfg + 258)
   \   000080   F0           MOVX    @DPTR,A
   \   000081   801D         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_10:
   \   000083   C3           CLR     C
   \   000084   E8           MOV     A,R0
   \   000085   9440         SUBB    A,#0x40
   \   000087   E9           MOV     A,R1
   \   000088   9400         SUBB    A,#0x0
   \   00008A   4006         JC      ??HalUARTPollDMA_12
   \   00008C   0E           INC     R6
   \   00008D   0E           INC     R6
   \   00008E   D285         SETB    0x80.5
   \   000090   800E         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_12:
   \   000092   E8           MOV     A,R0
   \   000093   7001         JNZ     ??HalUARTPollDMA_13
   \   000095   E9           MOV     A,R1
   \                     ??HalUARTPollDMA_13:
   \   000096   6008         JZ      ??HalUARTPollDMA_11
   \   000098   90....       MOV     DPTR,#(dmaCfg + 258)
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   7002         JNZ     ??HalUARTPollDMA_11
   \   00009E   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_11:
   \   0000A0   90....       MOV     DPTR,#(dmaCfg + 519)
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6006         JZ      ??HalUARTPollDMA_14
   \   0000A6   E4           CLR     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   D2E4         SETB    0xE0 /* A   */.4
   \   0000AB   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_14:
   \   0000AC   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   601D         JZ      ??HalUARTPollDMA_15
   \   0000B2   E595         MOV     A,0x95
   \   0000B4   FB           MOV     R3,A
   \   0000B5   90....       MOV     DPTR,#(dmaCfg + 520)
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   C0E0         PUSH    A
   \   0000BB   90....       MOV     DPTR,#(dmaCfg + 521)
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FA           MOV     R2,A
   \   0000C0   EB           MOV     A,R3
   \   0000C1   C3           CLR     C
   \   0000C2   9A           SUBB    A,R2
   \   0000C3   FA           MOV     R2,A
   \   0000C4   D0E0         POP     A
   \   0000C6   C3           CLR     C
   \   0000C7   9A           SUBB    A,R2
   \   0000C8   5005         JNC     ??HalUARTPollDMA_15
   \   0000CA   E4           CLR     A
   \   0000CB   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000CE   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_15:
   \   0000CF   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6058         JZ      ??HalUARTPollDMA_16
   \   0000D5   90....       MOV     DPTR,#(dmaCfg + 522)
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   7052         JNZ     ??HalUARTPollDMA_16
   \   0000DB   E4           CLR     A
   \   0000DC   90....       MOV     DPTR,#(dmaCfg + 523)
   \   0000DF   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E2   12....       LCALL   ?S_SHL
   \   0000E5   E5..         MOV     A,?V0 + 0
   \   0000E7   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   0000E9   E5..         MOV     A,?V0 + 1
   \   0000EB   34..         ADDC    A,#(((dmaCfg + 260) >> 8) & 0xff)
   \   0000ED   90....       MOV     DPTR,#(dmaCh1234 + 24)
   \   0000F0   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000F3   12....       LCALL   ?S_SHL
   \   0000F6   E5..         MOV     A,?V0 + 0
   \   0000F8   24..         ADD     A,#((dmaCfg + 4) & 0xff)
   \   0000FA   90....       MOV     DPTR,#(dmaCh1234 + 25)
   \   0000FD   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000100   90....       MOV     DPTR,#(dmaCh1234 + 29)
   \   000103   F0           MOVX    @DPTR,A
   \   000104   90....       MOV     DPTR,#(dmaCh1234 + 28)
   \   000107   E0           MOVX    A,@DPTR
   \   000108   54E0         ANL     A,#0xe0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   90....       MOV     DPTR,#(dmaCfg + 518)
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6401         XRL     A,#0x1
   \   000112   F0           MOVX    @DPTR,A
   \   000113   A2AF         MOV     C,0xa8.7
   \   000115   E4           CLR     A
   \   000116   92E0         MOV     0xE0 /* A   */.0,C
   \   000118   FA           MOV     R2,A
   \   000119   C2AF         CLR     0xa8.7
   \   00011B   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_17:
   \   00011E   00           NOP
   \   00011F   E5D6         MOV     A,0xd6
   \   000121   A2E4         MOV     C,0xE0 /* A   */.4
   \   000123   50F9         JNC     ??HalUARTPollDMA_17
   \   000125   75D1EF       MOV     0xd1,#-0x11
   \   000128   75D710       MOV     0xd7,#0x10
   \   00012B   8023         SJMP    ??HalUARTPollDMA_18
   \                     ??HalUARTPollDMA_16:
   \   00012D   A2AF         MOV     C,0xa8.7
   \   00012F   E4           CLR     A
   \   000130   92E0         MOV     0xE0 /* A   */.0,C
   \   000132   FA           MOV     R2,A
   \   000133   C2AF         CLR     0xa8.7
   \   000135   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000138   6016         JZ      ??HalUARTPollDMA_18
   \   00013A   E5D6         MOV     A,0xd6
   \   00013C   A2E4         MOV     C,0xE0 /* A   */.4
   \   00013E   4010         JC      ??HalUARTPollDMA_18
   \   000140   E5D1         MOV     A,0xd1
   \   000142   A2E4         MOV     C,0xE0 /* A   */.4
   \   000144   400A         JC      ??HalUARTPollDMA_18
   \   000146   EA           MOV     A,R2
   \   000147   A2E0         MOV     C,0xE0 /* A   */.0
   \   000149   92AF         MOV     0xa8.7,C
   \   00014B                ; Setup parameters for call to function HalUARTIsrDMA
   \   00014B   12....       LCALL   ??HalUARTIsrDMA?relay
   \   00014E   8005         SJMP    ??HalUARTPollDMA_19
   \                     ??HalUARTPollDMA_18:
   \   000150   EA           MOV     A,R2
   \   000151   A2E0         MOV     C,0xE0 /* A   */.0
   \   000153   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_19:
   \   000155   EE           MOV     A,R6
   \   000156   601B         JZ      ??HalUARTPollDMA_20
   \   000158   90....       MOV     DPTR,#(dmaCfg + 524)
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F8           MOV     R0,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F9           MOV     R1,A
   \   000160   8882         MOV     DPL,R0
   \   000162   8983         MOV     DPH,R1
   \   000164   E582         MOV     A,DPL
   \   000166   7002         JNZ     ??HalUARTPollDMA_21
   \   000168   E583         MOV     A,DPH
   \                     ??HalUARTPollDMA_21:
   \   00016A   6007         JZ      ??HalUARTPollDMA_20
   \   00016C                ; Setup parameters for indirect call
   \   00016C   EE           MOV     A,R6
   \   00016D   FA           MOV     R2,A
   \   00016E   7900         MOV     R1,#0x0
   \   000170   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_20:
   \   000173   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000176                REQUIRE _A_P0
   \   000176                REQUIRE ST0
   \   000176                REQUIRE _A_IEN0
   \   000176                REQUIRE U0BAUD
   \   000176                REQUIRE DMAIRQ
   \   000176                REQUIRE DMAARM
   \   000176                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(dmaCfg + 518)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 0,A
   \   000007   75..00       MOV     ?V0 + 1,#0x0
   \   00000A   7407         MOV     A,#0x7
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#(dmaCfg & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   34..         ADDC    A,#((dmaCfg >> 8) & 0xff)
   \   000002   F583         MOV     DPH,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   65C2         XRL     A,0xc2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#(dmaCfg + 256)
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00000F   7033         JNZ     ??HalUARTRxAvailDMA_0
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   \                     ??HalUARTRxAvailDMA_1:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   E9           MOV     A,R1
   \   000018   FD           MOV     R5,A
   \   000019   EC           MOV     A,R4
   \   00001A   C3           CLR     C
   \   00001B   33           RLC     A
   \   00001C   FC           MOV     R4,A
   \   00001D   ED           MOV     A,R5
   \   00001E   33           RLC     A
   \   00001F   FD           MOV     R5,A
   \   000020   EC           MOV     A,R4
   \   000021   24..         ADD     A,#(dmaCfg & 0xff)
   \   000023   F582         MOV     DPL,A
   \   000025   ED           MOV     A,R5
   \   000026   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000029   7008         JNZ     ??HalUARTRxAvailDMA_2
   \   00002B   EA           MOV     A,R2
   \   00002C   2401         ADD     A,#0x1
   \   00002E   0A           INC     R2
   \   00002F   EB           MOV     A,R3
   \   000030   3400         ADDC    A,#0x0
   \   000032   FB           MOV     R3,A
   \                     ??HalUARTRxAvailDMA_2:
   \   000033   E8           MOV     A,R0
   \   000034   2401         ADD     A,#0x1
   \   000036   08           INC     R0
   \   000037   E9           MOV     A,R1
   \   000038   3400         ADDC    A,#0x0
   \   00003A   F9           MOV     R1,A
   \   00003B   C3           CLR     C
   \   00003C   E8           MOV     A,R0
   \   00003D   9480         SUBB    A,#-0x80
   \   00003F   E9           MOV     A,R1
   \   000040   9400         SUBB    A,#0x0
   \   000042   40D1         JC      ??HalUARTRxAvailDMA_1
   \                     ??HalUARTRxAvailDMA_0:
   \   000044   80..         SJMP    ??Subroutine20_0
   \   000046                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#(dmaCfg + 518)
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7401         MOV     A,#0x1
   \   000013   90....       MOV     DPTR,#(dmaCfg + 519)
   \   000016   F0           MOVX    @DPTR,A
   \   000017   E595         MOV     A,0x95
   \   000019   90....       MOV     DPTR,#(dmaCfg + 521)
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   7401         MOV     A,#0x1
   \   00001F   90....       MOV     DPTR,#(dmaCfg + 522)
   \   000022   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000025   6006         JZ      ??HalUARTIsrDMA_0
   \   000027   7401         MOV     A,#0x1
   \   000029   90....       MOV     DPTR,#(dmaCfg + 523)
   \   00002C   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002D   80..         SJMP    ??Subroutine20_0
   \   00002F                REQUIRE ST0
   \   00002F                REQUIRE DMAIRQ
     81          #endif
     82          #if HAL_UART_ISR
     83          #include "_hal_uart_isr.c"
     84          #endif
     85          #if HAL_UART_USB
     86          #include "_hal_uart_usb.c"
     87          #endif
     88          
     89          /******************************************************************************
     90           * @fn      HalUARTInit
     91           *
     92           * @brief   Initialize the UART
     93           *
     94           * @param   none
     95           *
     96           * @return  none
     97           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     98          void HalUARTInit(void)
   \                     HalUARTInit:
     99          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    100          #if HAL_UART_DMA
    101            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   ??HalUARTInitDMA?relay
    102          #endif
    103          #if HAL_UART_ISR
    104            HalUARTInitISR();
    105          #endif
    106          #if HAL_UART_USB
    107            HalUARTInitUSB();
    108          #endif
    109          }
   \   000007   80..         SJMP    ??Subroutine20_0
    110          
    111          /******************************************************************************
    112           * @fn      HalUARTOpen
    113           *
    114           * @brief   Open a port according tp the configuration specified by parameter.
    115           *
    116           * @param   port   - UART port
    117           *          config - contains configuration information
    118           *
    119           * @return  Status of the function call
    120           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    121          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    122          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    123            (void)port;
    124            (void)config;
    125          
    126          #if (HAL_UART_DMA == 1)
    127            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   ??HalUARTOpenDMA?relay
    128          #endif
    129          #if (HAL_UART_DMA == 2)
    130            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    131          #endif
    132          #if (HAL_UART_ISR == 1)
    133            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    134          #endif
    135          #if (HAL_UART_ISR == 2)
    136            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    137          #endif
    138          #if (HAL_UART_USB)
    139            HalUARTOpenUSB(config);
    140          #endif
    141            
    142            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   02....       LJMP    ?Subroutine2 & 0xFFFF
    143          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    144          
    145          /*****************************************************************************
    146           * @fn      HalUARTRead
    147           *
    148           * @brief   Read a buffer from the UART
    149           *
    150           * @param   port - USART module designation
    151           *          buf  - valid data buffer at least 'len' bytes in size
    152           *          len  - max length number of bytes to copy to 'buf'
    153           *
    154           * @return  length of buffer that was read
    155           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    157          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    158            (void)port;
    159           (void)buf;
    160            (void)len;
    161          
    162          #if (HAL_UART_DMA == 1)
    163            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL   ??HalUARTReadDMA?relay
   \   00000B   8004         SJMP    ??HalUARTRead_1
    164          #endif
    165          #if (HAL_UART_DMA == 2)
    166            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    167          #endif
    168          #if (HAL_UART_ISR == 1)
    169            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    170          #endif
    171          #if (HAL_UART_ISR == 2)
    172            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    173          #endif
    174          
    175          #if HAL_UART_USB
    176            return HalUARTRx(buf, len);
    177          #else
    178            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
    179          #endif
    180          }
    181          /*****************************************************************************
    182           * @fn      HalUARTRead
    183           *
    184           * @brief   Read a buffer from the UART
    185           *
    186           * @param   port - USART module designation
    187           *          buf  - valid data buffer at least 'len' bytes in size
    188           *          len  - max length number of bytes to copy to 'buf'
    189           *
    190           * @return  length of buffer that was read
    191           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          uint16 HalUARTCLER(uint8 port,uint16 len)
   \                     HalUARTCLER:
    193          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    194            (void)port;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTclerDMA(len);
   \   000005   E9           MOV     A,R1
   \   000006   7043         JNZ     ??HalUARTCLER_0
   \   000008   7C00         MOV     R4,#0x0
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   801C         SJMP    ??HalUARTCLER_1
   \                     ??HalUARTCLER_2:
   \   00000E   85C2..       MOV     ?V0 + 0,0xc2
   \   000011   74FF         MOV     A,#-0x1
   \   000013   65..         XRL     A,?V0 + 0
   \   000015   F5..         MOV     ?V0 + 1,A
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00001E   4002         JC      ??HalUARTCLER_3
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   \                     ??HalUARTCLER_3:
   \   000022   EC           MOV     A,R4
   \   000023   2401         ADD     A,#0x1
   \   000025   0C           INC     R4
   \   000026   ED           MOV     A,R5
   \   000027   3400         ADDC    A,#0x0
   \   000029   FD           MOV     R5,A
   \                     ??HalUARTCLER_1:
   \   00002A   C3           CLR     C
   \   00002B   EC           MOV     A,R4
   \   00002C   9A           SUBB    A,R2
   \   00002D   ED           MOV     A,R5
   \   00002E   9B           SUBB    A,R3
   \   00002F   5012         JNC     ??HalUARTCLER_4
   \   000031   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000034   FE           MOV     R6,A
   \   000035   EF           MOV     A,R7
   \   000036   34..         ADDC    A,#((dmaCfg >> 8) & 0xff)
   \   000038   FF           MOV     R7,A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   65C2         XRL     A,0xc2
   \   000041   60CB         JZ      ??HalUARTCLER_2
   \                     ??HalUARTCLER_4:
   \   000043   C285         CLR     0x80.5
   \   000045   EC           MOV     A,R4
   \   000046   FA           MOV     R2,A
   \   000047   ED           MOV     A,R5
   \   000048   FB           MOV     R3,A
   \   000049   8004         SJMP    ??HalUARTCLER_5
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTclerDMA(len);
    202          #endif
    203            return 0;
   \                     ??HalUARTCLER_0:
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   7B00         MOV     R3,#0x0
   \                     ??HalUARTCLER_5:
   \   00004F   7F03         MOV     R7,#0x3
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000054                REQUIRE _A_P0
   \   000054                REQUIRE U0BAUD
    204          }
    205          
    206          /******************************************************************************
    207           * @fn      HalUARTWrite
    208           *
    209           * @brief   Write a buffer to the UART.
    210           *
    211           * @param   port - UART port
    212           *          buf  - pointer to the buffer that will be written, not freed
    213           *          len  - length of
    214           *
    215           * @return  length of the buffer that was sent
    216           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    218          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    219            (void)port;
    220            (void)buf;
    221            (void)len;
    222          
    223          #if (HAL_UART_DMA == 1)
    224            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   ??HalUARTWriteDMA?relay
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    225          #endif
    226          #if (HAL_UART_DMA == 2)
    227            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    228          #endif
    229          #if (HAL_UART_ISR == 1)
    230            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    231          #endif
    232          #if (HAL_UART_ISR == 2)
    233            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    234          #endif
    235          
    236          #if HAL_UART_USB
    237            HalUARTTx(buf, len);
    238            return len;
    239          #else
    240            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011                REQUIRE ?Subroutine2
   \   000011                ; // Fall through to label ?Subroutine2
    241          #endif
    242          }
    243          
    244          //=====================================================================
    245          //If you don't use vsprintf(), the code size is reduced very much.

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          int printf(const char *fmt,...)
   \                     printf:
    247          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 258
   \   000005   7582FE       MOV     DPL,#-0x2
   \   000008   7583FE       MOV     DPH,#-0x2
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
    248            int strLen;
    249            
    250            va_list ap;
    251            char string[256];
    252          
    253            va_start(ap,fmt);
   \   00000E   75820C       MOV     DPL,#0xc
   \   000011   758301       MOV     DPH,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_16
   \   000017   A882         MOV     R0,DPL
   \   000019   A983         MOV     R1,DPH
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E8           MOV     A,R0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E9           MOV     A,R1
   \   000025   F0           MOVX    @DPTR,A
    254            vsprintf(string,fmt,ap);
   \   000026                ; Setup parameters for call to function vsprintf
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   8582..       MOV     ?V0 + 0,DPL
   \   00002F   8583..       MOV     ?V0 + 1,DPH
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   EA           MOV     A,R2
   \   000038   FC           MOV     R4,A
   \   000039   EB           MOV     A,R3
   \   00003A   FD           MOV     R5,A
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   AA82         MOV     R2,DPL
   \   000042   AB83         MOV     R3,DPH
   \   000044   12....       LCALL   ??vsprintf?relay
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    255            strLen=strlen(string);
   \   00004C                ; Setup parameters for call to function strlen
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   12....       LCALL   ??strlen?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   AE..         MOV     R6,?V0 + 0
   \   00005E   AF..         MOV     R7,?V0 + 1
    256            HalUARTWrite(HAL_UART_PORT_0, (uint8*)string, strLen);
   \   000060                ; Setup parameters for call to function HalUARTWrite
   \   000060   EE           MOV     A,R6
   \   000061   FC           MOV     R4,A
   \   000062   EF           MOV     A,R7
   \   000063   FD           MOV     R5,A
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   12....       LCALL   ??HalUARTWrite?relay
    257            va_end(ap);
    258            
    259            return strLen;
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   758202       MOV     DPL,#0x2
   \   000079   758301       MOV     DPH,#0x1
   \   00007C   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00007F   02....       LJMP    ?Subroutine1 & 0xFFFF
    260          }
    261          
    262          /******************************************************************************
    263           * @fn      HalUARTSuspend
    264           *
    265           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    266           *
    267           * @param   None
    268           *
    269           * @return  None
    270           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    272          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    273          #if HAL_UART_DMA
    274            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    275          #endif
    276          #if HAL_UART_ISR
    277            HalUARTSuspendISR();
    278          #endif
    279          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    280          
    281          /******************************************************************************
    282           * @fn      HalUARTResume
    283           *
    284           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    285           *
    286           * @param   None
    287           *
    288           * @return  None
    289           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    290          void HalUARTResume( void )
   \                     HalUARTResume:
    291          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    292          #if HAL_UART_DMA
    293            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    294          #endif
    295          #if HAL_UART_ISR
    296            HalUARTResumeISR();
    297          #endif
    298          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE _A_P0
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
    299          
    300          /***************************************************************************************************
    301           * @fn      HalUARTPoll
    302           *
    303           * @brief   Poll the UART.
    304           *
    305           * @param   none
    306           *
    307           * @return  none
    308           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void HalUARTPoll(void)
   \                     HalUARTPoll:
    310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    311          #if HAL_UART_DMA
    312            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   ??HalUARTPollDMA?relay
    313          #endif
    314          #if HAL_UART_ISR
    315            HalUARTPollISR();
    316          #endif
    317          #if HAL_UART_USB
    318            HalUARTPollUSB();
    319          #endif
    320          }
   \   000007   02....       LJMP    ??Subroutine20_0 & 0xFFFF
    321          
    322          /**************************************************************************************************
    323           * @fn      Hal_UART_RxBufLen()
    324           *
    325           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    326           *
    327           * @param   port - UART port
    328           *
    329           * @return  length of current Rx Buffer
    330           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    332          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    333            (void)port;
    334          
    335          #if (HAL_UART_DMA == 1)
    336            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   ??HalUARTRxAvailDMA?relay
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    337          #endif
    338          #if (HAL_UART_DMA == 2)
    339            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    340          #endif
    341          #if (HAL_UART_ISR == 1)
    342            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    343          #endif
    344          #if (HAL_UART_ISR == 2)
    345            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    346          #endif
    347          #if HAL_UART_USB
    348            return HalUARTRxAvailUSB();
    349          #else
    350            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
    351          #endif
    352          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTInitDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTOpenDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTReadDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTWriteDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTPollDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTRxAvailDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTIsrDMA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTOpen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTCLER?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTCLER

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??printf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    printf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTSuspend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTResume?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalUARTPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Hal_UART_RxBufLen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    353          
    354          /******************************************************************************
    355          ******************************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     HalUARTCLER                0      0     11
     HalUARTInit                2      0      0
       -> HalUARTInitDMA        4      0      0
     HalUARTInitDMA             2      0      0
     HalUARTIsrDMA              3      0     10
     HalUARTOpen                0      0      9
       -> HalUARTOpenDMA        0      0     18
     HalUARTOpenDMA             2      0      9
       -> osal_memset           4      0      0
     HalUARTPoll                2      0      0
       -> HalUARTPollDMA        4      0      0
     HalUARTPollDMA             1      0     10
       -> HalUARTRxAvailDMA     0      0     20
       -> HalUARTIsrDMA         0      0     20
     HalUARTRead                0      0      9
       -> HalUARTReadDMA        0      0     18
     HalUARTReadDMA             1      0     19
     HalUARTResume              0      0      0
     HalUARTRxAvailDMA          2      0     10
     HalUARTSuspend             0      0      0
     HalUARTWrite               0      0    277
       -> HalUARTWriteDMA       0      0     18
     HalUARTWriteDMA            1      0     25
     Hal_UART_RxBufLen          0      0      9
       -> HalUARTRxAvailDMA     0      0     18
     printf                     0      0    270
       -> vsprintf              0      0    540
       -> strlen                0      0    536
       -> HalUARTWrite          0      0    536


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _A_P0                        1
     U0CSR                        1
     ST0                          1
     _A_IEN0                      1
     P0IEN                        1
     U0BAUD                       1
     U0UCR                        1
     U0GCR                        1
     DMAIRQ                       1
     DMAARM                       1
     DMAREQ                       1
     PERCFG                       1
     ADCCFG                       1
     P0SEL                        1
     P0DIR                        1
     P2DIR                        1
     dmaCfg                     526
     HalUARTInitDMA             127
     ?Subroutine0                 1
     ??Subroutine20_0             7
     HalUARTOpenDMA             208
     HalUARTReadDMA              75
     ?Subroutine1                 5
     ?Subroutine9                11
     ?Subroutine15               14
     ?Subroutine4                16
     HalUARTWriteDMA            197
     ?Subroutine13               10
     ?Subroutine11               23
     ?Subroutine8                15
     ?Subroutine6                12
     ?Subroutine10                4
     ?Subroutine12                3
     ??Subroutine19_0             4
     ?Subroutine16                4
     ?Subroutine18               10
     ?Subroutine14                9
     HalUARTPollDMA             374
     ?Subroutine5                15
     ?Subroutine7                16
     ?Subroutine17                9
     ?Subroutine3                 5
     HalUARTRxAvailDMA           70
     HalUARTIsrDMA               47
     HalUARTInit                  9
     HalUARTOpen                 16
     ?Subroutine2                 5
     HalUARTRead                 20
     HalUARTCLER                 84
     HalUARTWrite                17
     printf                     130
     HalUARTSuspend              11
     HalUARTResume               14
     HalUARTPoll                 10
     Hal_UART_RxBufLen           20
     ??HalUARTInitDMA?relay       6
     ??HalUARTOpenDMA?relay       6
     ??HalUARTReadDMA?relay       6
     ??HalUARTWriteDMA?relay      6
     ??HalUARTPollDMA?relay       6
     ??HalUARTRxAvailDMA?relay    6
     ??HalUARTIsrDMA?relay        6
     ??HalUARTInit?relay          6
     ??HalUARTOpen?relay          6
     ??HalUARTRead?relay          6
     ??HalUARTCLER?relay          6
     ??HalUARTWrite?relay         6
     ??printf?relay               6
     ??HalUARTSuspend?relay       6
     ??HalUARTResume?relay        6
     ??HalUARTPoll?relay          6
     ??Hal_UART_RxBufLen?relay    6

 
 1 627 bytes in segment BANKED_CODE
   102 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
   526 bytes in segment XDATA_Z
 
 1 729 bytes of CODE  memory
     0 bytes of DATA  memory (+ 16 bytes shared)
   526 bytes of XDATA memory

Errors: none
Warnings: none
