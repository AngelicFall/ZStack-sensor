###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:41:56 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\stack\zdo\ZDObj #
#                          ect.c                                              #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\stack\zdo\ZDObject.c" -D ZTOOL_P1 -D      #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D            #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\ZDObject.lst                   #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\ZDObject.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2010-06-28 16:08:35 -0700 (Mon, 28 Jun 2010) $
      4            Revision:       $Revision: 22835 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          
     63          #if defined MT_ZDO_CB_FUNC
     64          #include "MT.h"
     65          #endif
     66          
     67          #include "OnBoard.h"
     68          
     69          /* HAL */
     70          #include "hal_lcd.h"
     71          
     72          /*********************************************************************
     73           * MACROS
     74           */
     75          
     76          /*********************************************************************
     77           * CONSTANTS
     78           */
     79          // NLME Stub Implementations
     80          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     81          
     82          // Status fields used by ZDO_ProcessMgmtRtgReq
     83          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     84          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     86          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          #if defined ( REFLECTOR )
     92          typedef struct
     93          {
     94            byte SrcTransSeq;
     95            zAddrType_t SrcAddr;
     96            uint16 LocalCoordinator;
     97            byte epIntf;
     98            uint16 ProfileID;
     99            byte numInClusters;
    100            uint16 *inClusters;
    101            byte numOutClusters;
    102            uint16 *outClusters;
    103            byte SecurityUse;
    104            byte status;
    105          } ZDO_EDBind_t;
    106          #endif // defined ( REFLECTOR )
    107          
    108          enum
    109          {
    110            ZDMATCH_INIT,           // Initialized
    111            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    112            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    113          };
    114          
    115          enum
    116          {
    117            ZDMATCH_SENDING_NOT,
    118            ZDMATCH_SENDING_UNBIND,
    119            ZDMATCH_SENDING_BIND
    120          };
    121          
    122          /*********************************************************************
    123           * GLOBAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL VARIABLES
    128           */
    129          
    130          /*********************************************************************
    131           * EXTERNAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    138          
    139          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    141          #endif
    142          
    143          #if defined ( MANAGED_SCAN )
    144            uint32 managedScanNextChannel = 0;
    145            uint32 managedScanChannelMask = 0;
    146            uint8  managedScanTimesPerChannel = 0;
    147          #endif
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTIONS
    155           */
    156          static void ZDODeviceSetup( void );
    157          #if defined ( MANAGED_SCAN )
    158            static void ZDOManagedScan_Next( void );
    159          #endif
    160          #if defined ( REFLECTOR )
    161            static void ZDO_RemoveEndDeviceBind( void );
    162            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    163          #endif
    164          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    165                                          byte numList2, uint16 *list2, uint16 *pMatches );
    166          static void ZDO_RemoveMatchMemory( void );
    167          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    168          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    169          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    170          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    171          
    172          /*********************************************************************
    173           * @fn          ZDO_Init
    174           *
    175           * @brief       ZDObject and ZDProfile initialization.
    176           *
    177           * @param       none
    178           *
    179           * @return      none
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void ZDO_Init( void )
   \                     ZDO_Init:
    182          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    183            // Initialize ZD items
    184            #if defined ( REFLECTOR )
    185            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    186            #endif
    187          
    188            // Initialize default ZDO_UseExtendedPANID to the APS one.
    189            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#(AIB_apsUseExtendedPANID & 0xff)
   \   00000D   7D..         MOV     R5,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   00000F   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000011   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
    190          
    191            // Setup the device - type of device to create.
    192            ZDODeviceSetup();
   \   000016   90....       MOV     DPTR,#ZG_BUILD_COORDINATOR_TYPE
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7002         JNZ     ??ZDO_Init_0
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \                     ??ZDO_Init_0:
   \   00001E   6003         JZ      ??ZDO_Init_1
   \   000020                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000020   12....       LCALL   ??NLME_CoordinatorInit?relay
   \                     ??ZDO_Init_1:
   \   000023   90....       MOV     DPTR,#ZG_DEVICE_COORDINATOR_TYPE
   \   000026   E0           MOVX    A,@DPTR
   \   000027   7002         JNZ     ??ZDO_Init_2
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \                     ??ZDO_Init_2:
   \   00002B   6004         JZ      ??ZDO_Init_3
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   8002         SJMP    ??ZDO_Init_4
   \                     ??ZDO_Init_3:
   \   000031   7901         MOV     R1,#0x1
   \                     ??ZDO_Init_4:
   \   000033                ; Setup parameters for call to function APS_ReflectorInit
   \   000033   12....       LCALL   ??APS_ReflectorInit?relay
   \   000036   90....       MOV     DPTR,#ZG_BUILD_JOINING_TYPE
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   7002         JNZ     ??ZDO_Init_5
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \                     ??ZDO_Init_5:
   \   00003E   6003         JZ      ??ZDO_Init_6
   \   000040                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000040   12....       LCALL   ??NLME_DeviceJoiningInit?relay
    193          }
   \                     ??ZDO_Init_6:
   \   000043   80..         SJMP    ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    194          
    195          #if defined ( MANAGED_SCAN )
    196          /*********************************************************************
    197           * @fn      ZDOManagedScan_Next()
    198           *
    199           * @brief   Setup a managed scan.
    200           *
    201           * @param   none
    202           *
    203           * @return  none
    204           */
    205          static void ZDOManagedScan_Next( void )
    206          {
    207            // Is it the first time
    208            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    209            {
    210              // Setup the defaults
    211              managedScanNextChannel  = 1;
    212          
    213              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    214                managedScanNextChannel <<= 1;
    215          
    216              managedScanChannelMask = managedScanNextChannel;
    217              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    218            }
    219            else
    220            {
    221              // Do we need to go to the next channel
    222              if ( managedScanTimesPerChannel == 0 )
    223              {
    224                // Find next active channel
    225                managedScanChannelMask  = managedScanNextChannel;
    226                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    227              }
    228              else
    229              {
    230                managedScanTimesPerChannel--;
    231          
    232                if ( managedScanTimesPerChannel == 0 )
    233                {
    234                  managedScanNextChannel  <<= 1;
    235                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    236                    managedScanNextChannel <<= 1;
    237          
    238                  if ( managedScanNextChannel == 0 )
    239                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    240                }
    241              }
    242            }
    243          }
    244          #endif // MANAGED_SCAN
    245          
    246          /*********************************************************************
    247           * @fn      ZDODeviceSetup()
    248           *
    249           * @brief   Call set functions depending on the type of device compiled.
    250           *
    251           * @param   none
    252           *
    253           * @return  none
    254           */
    255          static void ZDODeviceSetup( void )
    256          {
    257            if ( ZG_BUILD_COORDINATOR_TYPE )
    258            {
    259              NLME_CoordinatorInit();
    260            }
    261          
    262          #if defined ( REFLECTOR )
    263            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    264          #endif
    265          
    266            if ( ZG_BUILD_JOINING_TYPE )
    267            {
    268              NLME_DeviceJoiningInit();
    269            }
    270          }
    271          
    272          /*********************************************************************
    273           * @fn          ZDO_StartDevice
    274           *
    275           * @brief       This function starts a device in a network.
    276           *
    277           * @param       logicalType     - Device type to start
    278           *              startMode       - indicates mode of device startup
    279           *              beaconOrder     - indicates time betwen beacons
    280           *              superframeOrder - indicates length of active superframe
    281           *
    282           * @return      none
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    285          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
   \   00000E   8B..         MOV     ?V0 + 0,R3
    286            ZStatus_t ret;
    287          #if defined ( ZIGBEE_FREQ_AGILITY )
    288            static uint8 discRetries = 0;
    289          #endif
    290          #if defined ( ZIGBEE_COMMISSIONING )
    291            static uint8 scanCnt = 0;
    292          #endif
    293          
    294            ret = ZUnsupportedMode;
   \   000010   75..12       MOV     ?V0 + 4,#0x12
    295          
    296            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   000013   90....       MOV     DPTR,#ZG_BUILD_COORDINATOR_TYPE
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7002         JNZ     ??ZDO_StartDevice_0
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \                     ??ZDO_StartDevice_0:
   \   00001B   6065         JZ      ??ZDO_StartDevice_1
   \   00001D   EE           MOV     A,R6
   \   00001E   7062         JNZ     ??ZDO_StartDevice_1
    297            {
    298              if ( startMode == MODE_HARD )
   \   000020   7402         MOV     A,#0x2
   \   000022   6F           XRL     A,R7
   \   000023   7040         JNZ     ??ZDO_StartDevice_2
    299              {
    300                devState = DEV_COORD_STARTING;
   \   000025   7408         MOV     A,#0x8
   \   000027   90....       MOV     DPTR,#devState
   \   00002A   F0           MOVX    @DPTR,A
    301                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    302                                                   zgDefaultStartingScanDuration, beaconOrder,
    303                                                    superframeOrder, false );
   \   00002B                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   00002B   75..00       MOV     ?V0 + 4,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 4
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   EC           MOV     A,R4
   \   000034   F5..         MOV     ?V0 + 4,A
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   EB           MOV     A,R3
   \   00003C   F5..         MOV     ?V0 + 4,A
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   90....       MOV     DPTR,#zgDefaultChannelList
   \   000046   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000049   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   7C..         MOV     R4,#(zgApsUseExtendedPANID & 0xff)
   \   000050   7D..         MOV     R5,#((zgApsUseExtendedPANID >> 8) & 0xff)
   \   000052   90....       MOV     DPTR,#zgConfigPANID
   \   000055   12....       LCALL   ??Subroutine188_0 & 0xFFFF
    304              }
   \                     ??CrossCallReturnLabel_305:
   \   000058   12....       LCALL   ??NLME_NetworkFormationRequest?relay
   \   00005B   7407         MOV     A,#0x7
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDO_StartDevice_3:
   \   000060   E9           MOV     A,R1
   \   000061   F5..         MOV     ?V0 + 4,A
   \   000063   801D         SJMP    ??ZDO_StartDevice_1
    305              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_2:
   \   000065   7401         MOV     A,#0x1
   \   000067   6F           XRL     A,R7
   \   000068   7011         JNZ     ??ZDO_StartDevice_4
    306              {
    307                // Just start the coordinator
    308                devState = DEV_COORD_STARTING;
   \   00006A   7408         MOV     A,#0x8
   \   00006C   90....       MOV     DPTR,#devState
   \   00006F   F0           MOVX    @DPTR,A
    309                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   000070                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000070   7B00         MOV     R3,#0x0
   \   000072   AA..         MOV     R2,?V0 + 0
   \   000074   A9..         MOV     R1,?V0 + 0
   \   000076   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   000079   80E5         SJMP    ??ZDO_StartDevice_3
    310              }
    311              else
    312              {
    313          #if defined( SERIAL_DEBUG_SUPPORTED )
    314                printf("StartDevice ERR\nMODE unknown\n");
   \                     ??ZDO_StartDevice_4:
   \   00007B                ; Setup parameters for call to function printf
   \   00007B   7A..         MOV     R2,#(`?<Constant "StartDevice ERR\\nMODE ...">` & 0xff)
   \   00007D   7B..         MOV     R3,#((`?<Constant "StartDevice ERR\\nMODE ...">` >> 8) & 0xff)
   \   00007F   12....       LCALL   ??printf?relay
    315          #endif
    316              }
    317            }
    318          
    319            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \                     ??ZDO_StartDevice_1:
   \   000082   90....       MOV     DPTR,#ZG_BUILD_JOINING_TYPE
   \   000085   E0           MOVX    A,@DPTR
   \   000086   7002         JNZ     ??ZDO_StartDevice_5
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \                     ??ZDO_StartDevice_5:
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??ZDO_StartDevice_6 & 0xFFFF
   \   00008F   7401         MOV     A,#0x1
   \   000091   6E           XRL     A,R6
   \   000092   6008         JZ      ??ZDO_StartDevice_7
   \   000094   7402         MOV     A,#0x2
   \   000096   6E           XRL     A,R6
   \   000097   6003         JZ      $+5
   \   000099   02....       LJMP    ??ZDO_StartDevice_6 & 0xFFFF
    320            {
    321              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_7:
   \   00009C   EF           MOV     A,R7
   \   00009D   6005         JZ      ??ZDO_StartDevice_8
   \   00009F   7403         MOV     A,#0x3
   \   0000A1   6F           XRL     A,R7
   \   0000A2   7018         JNZ     ??ZDO_StartDevice_9
    322              {
    323                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_8:
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?Subroutine37 & 0xFFFF
    324          
    325            #if defined( MANAGED_SCAN )
    326                ZDOManagedScan_Next();
    327                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    328            #else
    329                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    330              #if defined ( ZIGBEE_FREQ_AGILITY )
    331                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    332                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    333                {
    334                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    335                  // change will not be recieved. On these devices or routers that have
    336                  // lost the network, an active scan shall be conducted on the Default
    337                  // Channel list using the extended PANID to find the network. If the
    338                  // extended PANID isn't found using the Default Channel list, an scan
    339                  // should be completed using all channels.
    340                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    341                }
    342              #endif // ZIGBEE_FREQ_AGILITY
    343              #if defined ( ZIGBEE_COMMISSIONING )
    344                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    345                {
    346                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    347                  // application specific means, the device shall conduct an active scan
    348                  // on the Default Channel list and join the PAN with the same
    349                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    350                  // on all channels.
    351                  // When devices rejoin the network and the PAN is not found from
    352                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    353                }
    354              #endif // ZIGBEE_COMMISSIONING
    355            #endif
    356              }
   \                     ??CrossCallReturnLabel_51:
   \   0000A9   12....       LCALL   ?L_MOV_X
   \   0000AC   AA..         MOV     R2,?V0 + 4
   \   0000AE   AB..         MOV     R3,?V0 + 5
   \   0000B0   AC..         MOV     R4,?V0 + 6
   \   0000B2   AD..         MOV     R5,?V0 + 7
   \   0000B4   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \                     ??ZDO_StartDevice_10:
   \   0000B7   E9           MOV     A,R1
   \   0000B8   F5..         MOV     ?V0 + 4,A
   \   0000BA   8065         SJMP    ??ZDO_StartDevice_6
    357              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_9:
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   6F           XRL     A,R7
   \   0000BF   7059         JNZ     ??ZDO_StartDevice_11
    358              {
    359                if ( logicalType == NODETYPE_ROUTER )
   \   0000C1   7401         MOV     A,#0x1
   \   0000C3   6E           XRL     A,R6
   \   0000C4   703F         JNZ     ??ZDO_StartDevice_12
    360                {
    361                  ZMacScanCnf_t scanCnf;
    362                  devState = DEV_NWK_ORPHAN;
   \   0000C6   740A         MOV     A,#0xa
   \   0000C8   90....       MOV     DPTR,#devState
   \   0000CB   F0           MOVX    @DPTR,A
    363          
    364                  /* if router and nvram is available, fake successful orphan scan */
    365                  scanCnf.hdr.Status = ZSUCCESS;
   \   0000CC   7401         MOV     A,#0x1
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E4           CLR     A
   \   0000D2   F0           MOVX    @DPTR,A
    366                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   7403         MOV     A,#0x3
   \   0000DA   F0           MOVX    @DPTR,A
    367                  scanCnf.UnscannedChannels = 0;
   \   0000DB   90....       MOV     DPTR,#__Constant_0
   \   0000DE   78..         MOV     R0,#?V0 + 4
   \   0000E0   12....       LCALL   ?L_MOV_X
   \   0000E3   7404         MOV     A,#0x4
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   E5..         MOV     A,?V0 + 4
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E5..         MOV     A,?V0 + 5
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E5..         MOV     A,?V0 + 6
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E5..         MOV     A,?V0 + 7
   \   0000F6   F0           MOVX    @DPTR,A
    368                  scanCnf.ResultListSize = 0;
   \   0000F7   7408         MOV     A,#0x8
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E4           CLR     A
   \   0000FD   12....       LCALL   ?Subroutine25 & 0xFFFF
    369                  nwk_ScanJoiningOrphan(&scanCnf);
   \                     ??CrossCallReturnLabel_19:
   \   000100   12....       LCALL   ??nwk_ScanJoiningOrphan?relay
    370          
    371                  ret = ZSuccess;
   \   000103   8030         SJMP    ??ZDO_StartDevice_13
    372                }
    373                else
    374                {
    375                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_12:
   \   000105   740A         MOV     A,#0xa
   \   000107   12....       LCALL   ?Subroutine37 & 0xFFFF
    376                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    377                                                zgDefaultStartingScanDuration );
    378                }
    379              }
   \                     ??CrossCallReturnLabel_52:
   \   00010A   12....       LCALL   ?L_MOV_X
   \   00010D   AA..         MOV     R2,?V0 + 4
   \   00010F   AB..         MOV     R3,?V0 + 5
   \   000111   AC..         MOV     R4,?V0 + 6
   \   000113   AD..         MOV     R5,?V0 + 7
   \   000115   12....       LCALL   ??NLME_OrphanJoinRequest?relay
   \   000118   809D         SJMP    ??ZDO_StartDevice_10
    380              else
    381              {
    382          #if defined( SERIAL_DEBUG_SUPPORTED )
    383                printf("StartDevice ERR\nMODE unknown\n");
   \                     ??ZDO_StartDevice_11:
   \   00011A                ; Setup parameters for call to function printf
   \   00011A   7A..         MOV     R2,#(`?<Constant "StartDevice ERR\\nMODE ...">` & 0xff)
   \   00011C   7B..         MOV     R3,#((`?<Constant "StartDevice ERR\\nMODE ...">` >> 8) & 0xff)
   \   00011E   12....       LCALL   ??printf?relay
    384          #endif
    385              }
    386            }
    387          
    388            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_6:
   \   000121   E5..         MOV     A,?V0 + 4
   \   000123   6010         JZ      ??ZDO_StartDevice_13
    389              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \   000125                ; Setup parameters for call to function osal_start_timerEx
   \   000125   7CE8         MOV     R4,#-0x18
   \   000127   7D03         MOV     R5,#0x3
   \   000129   7A01         MOV     R2,#0x1
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   90....       MOV     DPTR,#ZDAppTaskID
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F9           MOV     R1,A
   \   000132   12....       LCALL   ??osal_start_timerEx?relay
    390          }
   \                     ??ZDO_StartDevice_13:
   \   000135   740B         MOV     A,#0xb
   \   000137                REQUIRE ?Subroutine11
   \   000137                ; // Fall through to label ?Subroutine11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine193_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000004                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000004   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#zgDefaultChannelList
   \   00000C   78..         MOV     R0,#?V0 + 4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    391          
    392          /**************************************************************************************************
    393           * @fn          zdoSendStateChangeMsg
    394           *
    395           * @brief       Helper function for ZDO_UpdateNwkStatus.
    396           *
    397           * input parameters
    398           *
    399           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    400           * @param       state - The current device state.
    401           *
    402           * output parameters
    403           *
    404           * None.
    405           *
    406           * @return      None.
    407           **************************************************************************************************
    408           */
    409          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    410          {
    411            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    412          
    413            if (NULL == pMsg)
    414            {
    415              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    416              {
    417                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    418                // try again later when more Heap may be available.
    419                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    420              }
    421              else
    422              {
    423                pMsg->event = ZDO_STATE_CHANGE;
    424                pMsg->status = state;
    425          
    426                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    427              }
    428            }
    429            else
    430            {
    431              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    432              pMsg->status = state;
    433            }
    434          }
    435          
    436          /**************************************************************************************************
    437           * @fn          ZDO_UpdateNwkStatus
    438           *
    439           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    440           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    441           *              than one registered EndPoint, it will only receive one notification per state
    442           *              change. Although the device may go through a sequence of state changes, the
    443           *              Application task may only receive notification of the final, steady-state state
    444           *              because it has the lowest priority and never even runs to receive the intermediate
    445           *              state change notifications.
    446           *
    447           * input parameters
    448           *
    449           * @param       state - The current device state.
    450           *
    451           * output parameters
    452           *
    453           * None.
    454           *
    455           * @return      None.
    456           **************************************************************************************************
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    459          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
    460            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   8014         SJMP    ??CrossCallReturnLabel_175
    461          
    462            while (pItem != NULL)
    463            {
    464              if (pItem->epDesc->endPoint != ZDO_EP)
    465              {
    466                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V0 + 1
   \   000017   F0           MOVX    @DPTR,A
    467              }
    468          
    469              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000024   FF           MOV     R7,A
   \   000025   EE           MOV     A,R6
   \   000026   7001         JNZ     ??ZDO_UpdateNwkStatus_2
   \   000028   EF           MOV     A,R7
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000029   604D         JZ      ??ZDO_UpdateNwkStatus_3
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   60DF         JZ      ??ZDO_UpdateNwkStatus_1
   \   000039   A3           INC     DPTR
   \   00003A   12....       LCALL   ??Subroutine199_0 & 0xFFFF
    470            }
   \                     ??CrossCallReturnLabel_353:
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F                ; Setup parameters for call to function osal_msg_find
   \   00003F   7AD1         MOV     R2,#-0x2f
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_find?relay
   \   000045   EA           MOV     A,R2
   \   000046   7001         JNZ     ??ZDO_UpdateNwkStatus_4
   \   000048   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000049   70C5         JNZ     ??ZDO_UpdateNwkStatus_0
   \   00004B                ; Setup parameters for call to function osal_msg_allocate
   \   00004B   7A02         MOV     R2,#0x2
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_msg_allocate?relay
   \   000052   EA           MOV     A,R2
   \   000053   7001         JNZ     ??ZDO_UpdateNwkStatus_5
   \   000055   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_5:
   \   000056   700E         JNZ     ??ZDO_UpdateNwkStatus_6
   \   000058                ; Setup parameters for call to function osal_set_event
   \   000058   7A10         MOV     R2,#0x10
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   90....       MOV     DPTR,#ZDAppTaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??osal_set_event?relay
   \   000064   80B2         SJMP    ??ZDO_UpdateNwkStatus_1
   \                     ??ZDO_UpdateNwkStatus_6:
   \   000066   74D1         MOV     A,#-0x2f
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E5..         MOV     A,?V0 + 1
   \   000070   F0           MOVX    @DPTR,A
   \   000071                ; Setup parameters for call to function osal_msg_send
   \   000071   A9..         MOV     R1,?V0 + 0
   \   000073   12....       LCALL   ??osal_msg_send?relay
   \   000076   80A0         SJMP    ??ZDO_UpdateNwkStatus_1
    471          #if defined MT_ZDO_CB_FUNC
    472            zdoSendStateChangeMsg(state, MT_TaskID);
    473          #endif
    474          
    475            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000078                ; Setup parameters for call to function NLME_GetShortAddr
   \   000078   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00007B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007E   12....       LCALL   ?Subroutine33 & 0xFFFF
    476            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_33:
   \   000081                ; Setup parameters for call to function NLME_GetExtAddr
   \   000081   12....       LCALL   ??NLME_GetExtAddr?relay
    477          }
   \   000084                REQUIRE ?Subroutine2
   \   000084                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   E8           MOV     A,R0
   \   000004   FE           MOV     R6,A
   \   000005   E9           MOV     A,R1
   \   000006   22           RET
    478          
    479          #if defined ( REFLECTOR )
    480          /*********************************************************************
    481           * @fn          ZDO_RemoveEndDeviceBind
    482           *
    483           * @brief       Remove the end device bind
    484           *
    485           * @param  none
    486           *
    487           * @return      none
    488           */
    489          static void ZDO_RemoveEndDeviceBind( void )
    490          {
    491            if ( ZDO_EDBind != NULL )
    492            {
    493              // Free the RAM
    494              if ( ZDO_EDBind->inClusters != NULL )
    495                osal_mem_free( ZDO_EDBind->inClusters );
    496              if ( ZDO_EDBind->outClusters != NULL )
    497                osal_mem_free( ZDO_EDBind->outClusters );
    498              osal_mem_free( ZDO_EDBind );
    499              ZDO_EDBind = NULL;
    500            }
    501          }
    502          #endif // REFLECTOR
    503          
    504          #if defined ( REFLECTOR )
    505          /*********************************************************************
    506           * @fn          ZDO_RemoveEndDeviceBind
    507           *
    508           * @brief       Remove the end device bind
    509           *
    510           * @param  none
    511           *
    512           * @return      none
    513           */
    514          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    515          {
    516            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    517          
    518          #if defined( SERIAL_DEBUG_SUPPORTED )
    519            printf("End Device Bind\n");
    520            if ( Status == ZDP_SUCCESS )
    521              printf("Success Sent\n");
    522            else
    523              printf("Timeout\n");
    524          #endif
    525          
    526          }
    527          #endif // REFLECTOR
    528          
    529          /*********************************************************************
    530           * @fn          ZDO_CompareClusterLists
    531           *
    532           * @brief       Compare one list to another list
    533           *
    534           * @param       numList1 - number of items in list 1
    535           * @param       list1 - first list of cluster IDs
    536           * @param       numList2 - number of items in list 2
    537           * @param       list2 - second list of cluster IDs
    538           * @param       pMatches - buffer to put matches
    539           *
    540           * @return      number of matches
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    543                                    byte numList2, uint16 *list2, uint16 *pMatches )
    544          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8C..         MOV     ?V0 + 0,R4
   \   000009   740F         MOV     A,#0xf
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000011   7411         MOV     A,#0x11
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine87 & 0xFFFF
    545            byte x, y;
    546            uint16 z;
    547            byte numMatches = 0;
   \                     ??CrossCallReturnLabel_142:
   \   000019   75..00       MOV     ?V0 + 1,#0x0
    548          
    549            // Check the first in against the seconds out
    550            for ( x = 0; x < numList1; x++ )
   \   00001C   75..00       MOV     ?V0 + 6,#0x0
   \   00001F   804A         SJMP    ??ZDO_CompareClusterLists_0
    551            {
    552              for ( y = 0; y < numList2; y++ )
    553              {
    554                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   E5..         MOV     A,?V0 + 3
   \   000023   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 5,A
    555                if ( list1[x] == z )
   \   00002C   E5..         MOV     A,?V0 + 6
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   FE           MOV     R6,A
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   FF           MOV     R7,A
   \   000034   EA           MOV     A,R2
   \   000035   2E           ADD     A,R6
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   3F           ADDC    A,R7
   \   00003A   F583         MOV     DPH,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V0 + 4
   \   00003F   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V0 + 5
   \                     ??ZDO_CompareClusterLists_2:
   \   000045   7019         JNZ     ??ZDO_CompareClusterLists_3
    556                  pMatches[numMatches++] = z;
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   C3           CLR     C
   \   00004A   33           RLC     A
   \   00004B   FE           MOV     R6,A
   \   00004C   E4           CLR     A
   \   00004D   33           RLC     A
   \   00004E   FF           MOV     R7,A
   \   00004F   EC           MOV     A,R4
   \   000050   2E           ADD     A,R6
   \   000051   F582         MOV     DPL,A
   \   000053   ED           MOV     A,R5
   \   000054   3F           ADDC    A,R7
   \   000055   F583         MOV     DPH,A
   \   000057   E5..         MOV     A,?V0 + 4
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E5..         MOV     A,?V0 + 5
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   05..         INC     ?V0 + 1
    557              }
   \                     ??ZDO_CompareClusterLists_3:
   \   000060   05..         INC     ?V0 + 3
   \                     ??ZDO_CompareClusterLists_4:
   \   000062   E5..         MOV     A,?V0 + 3
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V0 + 0
   \   000067   40B8         JC      ??ZDO_CompareClusterLists_1
   \   000069   05..         INC     ?V0 + 6
   \                     ??ZDO_CompareClusterLists_0:
   \   00006B   E5..         MOV     A,?V0 + 6
   \   00006D   C3           CLR     C
   \   00006E   95..         SUBB    A,?V0 + 2
   \   000070   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000072   75..00       MOV     ?V0 + 3,#0x0
   \   000075   80EB         SJMP    ??ZDO_CompareClusterLists_4
    558            }
    559          
    560            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000077   A9..         MOV     R1,?V0 + 1
   \   000079   02....       LJMP    ??Subroutine200_0 & 0xFFFF
    561          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FE           MOV     R6,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FF           MOV     R7,A
   \   000006   E8           MOV     A,R0
   \   000007   2E           ADD     A,R6
   \   000008   F582         MOV     DPL,A
   \   00000A   E9           MOV     A,R1
   \   00000B   3F           ADDC    A,R7
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    562          
    563          /*********************************************************************
    564           * Utility functions
    565           */
    566          
    567          /*********************************************************************
    568           * @fn          ZDO_CompareByteLists
    569           *
    570           * @brief       Compares two lists for matches.
    571           *
    572           * @param       ACnt  - number of entries in list A
    573           * @param       AList  - List A
    574           * @param       BCnt  - number of entries in list B
    575           * @param       BList  - List B
    576           *
    577           * @return      true if a match is found
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    580          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   740C         MOV     A,#0xc
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine192_0 & 0xFFFF
    581            byte x, y;
    582          
    583            for ( x = 0; x < ACnt; x++ )
   \                     ??CrossCallReturnLabel_333:
   \   00000F   75..00       MOV     ?V0 + 2,#0x0
   \   000012   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000014   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_0:
   \   000016   E5..         MOV     A,?V0 + 2
   \   000018   C3           CLR     C
   \   000019   95..         SUBB    A,?V0 + 3
   \   00001B   5031         JNC     ??ZDO_AnyClusterMatches_2
    584            {
    585              for ( y = 0; y < BCnt; y++ )
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   8001         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000021   0D           INC     R5
   \                     ??ZDO_AnyClusterMatches_3:
   \   000022   ED           MOV     A,R5
   \   000023   C3           CLR     C
   \   000024   9C           SUBB    A,R4
   \   000025   50ED         JNC     ??ZDO_AnyClusterMatches_1
    586              {
    587                if ( AList[x] == BList[y] )
   \   000027   E5..         MOV     A,?V0 + 2
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   FE           MOV     R6,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   FF           MOV     R7,A
   \   00002F   EA           MOV     A,R2
   \   000030   2E           ADD     A,R6
   \   000031   F582         MOV     DPL,A
   \   000033   EB           MOV     A,R3
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00003A   F5..         MOV     ?V0 + 1,A
   \   00003C   ED           MOV     A,R5
   \   00003D   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000040   65..         XRL     A,?V0 + 0
   \   000042   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   65..         XRL     A,?V0 + 1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000048   70D7         JNZ     ??ZDO_AnyClusterMatches_4
    588                {
    589                  return true;
   \   00004A   7901         MOV     R1,#0x1
   \   00004C   8002         SJMP    ??ZDO_AnyClusterMatches_6
    590                }
    591              }
    592            }
    593          
    594            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00004E   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF
    595          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    596          
    597          /*********************************************************************
    598           * Callback functions from ZDProfile
    599           */
    600          
    601          /*********************************************************************
    602           * @fn          ZDO_ProcessNodeDescReq
    603           *
    604           * @brief       This function processes and responds to the
    605           *              Node_Desc_req message.
    606           *
    607           * @param       inMsg - incoming message
    608           *
    609           * @return      none
    610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    611          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    612          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine63 & 0xFFFF
    613            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    614            NodeDescriptorFormat_t *desc = NULL;
    615          
    616            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_104:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    617            {
    618              desc = &ZDO_Config_Node_Descriptor;
    619            }
    620          
    621            if ( desc != NULL )
    622            {
    623              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#(ZDO_Config_Node_Descriptor & 0xff)
   \   000012   75....       MOV     ?V0 + 1,#((ZDO_Config_Node_Descriptor >> 8) & 0xff)
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessNodeDescReq_2
    624            }
    625            else
    626            {
    627              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    628                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine61 & 0xFFFF
    629            }
   \                     ??CrossCallReturnLabel_102:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    630          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP    ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000007   FC           MOV     R4,A
   \   000008   E9           MOV     A,R1
   \   000009   FD           MOV     R5,A
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6C           XRL     A,R4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000006   FD           MOV     R5,A
   \   000007   7C80         MOV     R4,#-0x80
   \   000009   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00000C   EE           MOV     A,R6
   \   00000D   240F         ADD     A,#0xf
   \   00000F   F582         MOV     DPL,A
   \   000011   EF           MOV     A,R7
   \   000012   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000015   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000018   7404         MOV     A,#0x4
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   EA           MOV     A,R2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    631          
    632          /*********************************************************************
    633           * @fn          ZDO_ProcessPowerDescReq
    634           *
    635           * @brief       This function processes and responds to the
    636           *              Node_Power_req message.
    637           *
    638           * @param       inMsg  - incoming request
    639           *
    640           * @return      none
    641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    643          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine63 & 0xFFFF
    644            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    645            NodePowerDescriptorFormat_t *desc = NULL;
    646          
    647            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_105:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    648            {
    649              desc = &ZDO_Config_Power_Descriptor;
    650            }
    651          
    652            if ( desc != NULL )
    653            {
    654              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#(ZDO_Config_Power_Descriptor & 0xff)
   \   000012   75....       MOV     ?V0 + 1,#((ZDO_Config_Power_Descriptor >> 8) & 0xff)
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessPowerDescReq_2
    655            }
    656            else
    657            {
    658              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    659                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine61 & 0xFFFF
    660            }
   \                     ??CrossCallReturnLabel_103:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    661          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP    ??Subroutine183_0
    662          
    663          /*********************************************************************
    664           * @fn          ZDO_ProcessSimpleDescReq
    665           *
    666           * @brief       This function processes and responds to the
    667           *              Simple_Desc_req message.
    668           *
    669           * @param       inMsg - incoming message (request)
    670           *
    671           * @return      none
    672           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine182_0
   \   000002                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    673          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    674          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    675            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    676            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00001B   E4           CLR     A
   \   00001C   2C           ADD     A,R4
   \   00001D   FA           MOV     R2,A
    677            byte endPoint = inMsg->asdu[2];
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
    678            byte free = false;
   \   000026   75..00       MOV     ?V0 + 1,#0x0
    679            byte stat = ZDP_SUCCESS;
   \   000029   75..00       MOV     ?V0 + 0,#0x0
    680          
    681            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002C   6004         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   00002E   94F1         SUBB    A,#-0xf
   \   000030   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    682            {
    683              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000032   75..82       MOV     ?V0 + 0,#-0x7e
   \   000035   8031         SJMP    ??ZDO_ProcessSimpleDescReq_2
    684            }
    685            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000037   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6A           XRL     A,R2
   \   00003C   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000041   7022         JNZ     ??ZDO_ProcessSimpleDescReq_4
    686            {
    687              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000043                ; Setup parameters for call to function afFindSimpleDesc
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??afFindSimpleDesc?relay
   \   000050   E9           MOV     A,R1
   \   000051   F5..         MOV     ?V0 + 1,A
    688              if ( sDesc == NULL )
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7002         JNZ     ??ZDO_ProcessSimpleDescReq_5
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005E   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    689              {
    690                stat = ZDP_NOT_ACTIVE;
   \   000060   75..83       MOV     ?V0 + 0,#-0x7d
   \   000063   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    691              }
    692            }
    693            else
    694            {
    695              if ( ZSTACK_ROUTER_BUILD )
    696              {
    697                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000065   75..81       MOV     ?V0 + 0,#-0x7f
    698              }
    699              else if ( ZSTACK_END_DEVICE_BUILD )
    700              {
    701                stat = ZDP_INVALID_REQTYPE;
    702              }
    703            }
    704          
    705            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000068                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000071   A9..         MOV     R1,?V0 + 0
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ??ZDP_SimpleDescMsg?relay
    706          
    707            if ( free && sDesc )
   \   00007A   E5..         MOV     A,?V0 + 1
   \   00007C   6016         JZ      ??CrossCallReturnLabel_113
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   7002         JNZ     ??ZDO_ProcessSimpleDescReq_6
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000089   6009         JZ      ??CrossCallReturnLabel_113
    708            {
    709              osal_mem_free( sDesc );
   \   00008B                ; Setup parameters for call to function osal_mem_free
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   12....       LCALL   ?Subroutine70 & 0xFFFF
    710            }
    711          }
   \                     ??CrossCallReturnLabel_113:
   \   000094   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   22           RET
    712          
    713          /*********************************************************************
    714           * @fn          ZDO_ProcessActiveEPReq
    715           *
    716           * @brief       This function processes and responds to the
    717           *              Active_EP_req message.
    718           *
    719           * @param       inMsg  - incoming message (request)
    720           *
    721           * @return      none
    722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    723          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    724          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    725            byte cnt = 0;
   \   000009   75..00       MOV     ?V0 + 2,#0x0
    726            uint16 aoi;
    727            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
    728          
    729            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   E9           MOV     A,R1
   \   000015   F5..         MOV     ?V0 + 1,A
    730          
    731            if ( aoi == NLME_GetShortAddr() )
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001A   EA           MOV     A,R2
   \   00001B   65..         XRL     A,?V0 + 0
   \   00001D   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   00001F   EB           MOV     A,R3
   \   000020   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000022   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    732            {
    733              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000024                ; Setup parameters for call to function afNumEndPoints
   \   000024   12....       LCALL   ??afNumEndPoints?relay
   \   000027   E9           MOV     A,R1
   \   000028   14           DEC     A
   \   000029   F5..         MOV     ?V0 + 2,A
    734              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002B                ; Setup parameters for call to function afEndPoints
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   7A..         MOV     R2,#(ZDOBuildBuf & 0xff)
   \   00002F   7B..         MOV     R3,#((ZDOBuildBuf >> 8) & 0xff)
   \   000031   12....       LCALL   ??afEndPoints?relay
   \   000034   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    735            }
    736            else
    737            {
    738              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000036   75..80       MOV     ?V0 + 3,#-0x80
    739            }
    740          
    741            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    742                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000039                ; Setup parameters for call to function ZDP_EPRsp
   \   000039   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00003C   F5..         MOV     ?V0 + 4,A
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   75....       MOV     ?V0 + 4,#(ZDOBuildBuf & 0xff)
   \   000046   75....       MOV     ?V0 + 5,#((ZDOBuildBuf >> 8) & 0xff)
   \   000049   78..         MOV     R0,#?V0 + 4
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   78..         MOV     R0,#?V0 + 2
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   E5..         MOV     A,?V0 + 3
   \   00005A   F5..         MOV     ?V0 + 0,A
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000064   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000067   7A05         MOV     R2,#0x5
   \   000069   7B80         MOV     R3,#-0x80
   \   00006B   12....       LCALL   ??ZDP_EPRsp?relay
   \   00006E   7407         MOV     A,#0x7
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    743          }
   \   000073   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003                REQUIRE ??Subroutine184_0
   \   000003                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine208_0
   \   000006                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    744          
    745          /*********************************************************************
    746           * @fn          ZDO_ConvertOTAClusters
    747           *
    748           * @brief       This function will convert the over-the-air cluster list
    749           *              format to an internal format.
    750           *
    751           * @param       inMsg  - incoming message (request)
    752           *
    753           * @return      pointer to incremented inBuf
    754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    755          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    756          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    757            uint8 x;
    758          
    759            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8027         SJMP    ??ZDO_ConvertOTAClusters_0
    760            {
    761              // convert ota format to internal
    762              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   25..         ADD     A,?V0 + 0
   \   000016   E9           MOV     A,R1
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   EF           MOV     A,R7
   \   00001A   33           RLC     A
   \   00001B   F8           MOV     R0,A
   \   00001C   E4           CLR     A
   \   00001D   33           RLC     A
   \   00001E   F9           MOV     R1,A
   \   00001F   EC           MOV     A,R4
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   ED           MOV     A,R5
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V0 + 1
   \   00002D   F0           MOVX    @DPTR,A
    763              inBuf += sizeof( uint16 );
   \   00002E   12....       LCALL   ?Subroutine124 & 0xFFFF
    764            }
   \                     ??CrossCallReturnLabel_206:
   \   000031   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   9E           SUBB    A,R6
   \   000035   40D4         JC      ??ZDO_ConvertOTAClusters_1
    765            return ( inBuf );
   \   000037   7F03         MOV     R7,#0x3
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
    766          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
    767          
    768          /*********************************************************************
    769           * @fn          ZDO_ProcessMatchDescReq
    770           *
    771           * @brief       This function processes and responds to the
    772           *              Match_Desc_req message.
    773           *
    774           * @param       inMsg  - incoming message (request)
    775           *
    776           * @return      none
    777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    778          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    779          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
    780            uint8 epCnt = 0;
   \   00000E   E4           CLR     A
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    781            uint8 numInClusters;
    782            uint16 *inClusters = NULL;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    783            uint8 numOutClusters;
    784            uint16 *outClusters = NULL;
   \   00001F   F5..         MOV     ?V0 + 14,A
   \   000021   F5..         MOV     ?V0 + 15,A
    785            epList_t *epDesc;
    786            SimpleDescriptionFormat_t *sDesc = NULL;
    787            uint8 allocated;
    788            uint8 *msg;
    789            uint16 aoi;
    790            uint16 profileID;
    791          
    792            // Parse the incoming message
    793            msg = inMsg->asdu;
   \   000023   12....       LCALL   ?Subroutine59 & 0xFFFF
    794            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_491:
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   EA           MOV     A,R2
   \   00002B   F5..         MOV     ?V0 + 2,A
   \   00002D   E9           MOV     A,R1
   \   00002E   F5..         MOV     ?V0 + 3,A
    795            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   EA           MOV     A,R2
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   E9           MOV     A,R1
   \   000045   F5..         MOV     ?V0 + 1,A
    796            msg += 4;
   \   000047   EE           MOV     A,R6
   \   000048   2404         ADD     A,#0x4
   \   00004A   FE           MOV     R6,A
   \   00004B   EF           MOV     A,R7
   \   00004C   3400         ADDC    A,#0x0
   \   00004E   FF           MOV     R7,A
   \   00004F                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00004F   AA..         MOV     R2,?V0 + 2
   \   000051   AB..         MOV     R3,?V0 + 3
    797          
    798            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000053   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000056   E9           MOV     A,R1
   \   000057   6401         XRL     A,#0x1
   \   000059   702D         JNZ     ??ZDO_ProcessMatchDescReq_0
    799            {
    800              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    801                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00005B                ; Setup parameters for call to function ZDP_EPRsp
   \   00005B   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   75..00       MOV     ?V0 + 0,#0x0
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000074   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000077   75..80       MOV     ?V0 + 0,#-0x80
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    802              return;
   \   000085   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    803            }
    804            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000088                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000088   AA..         MOV     R2,?V0 + 2
   \   00008A   AB..         MOV     R3,?V0 + 3
   \   00008C   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00008F   E9           MOV     A,R1
   \   000090   700E         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   000092   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000095   E0           MOVX    A,@DPTR
   \   000096   65..         XRL     A,?V0 + 2
   \   000098   7004         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   65..         XRL     A,?V0 + 3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   00009E   70BB         JNZ     ??ZDO_ProcessMatchDescReq_1
    805            {
    806              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    807                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    808              return;
    809            }
    810          
    811            if ((numInClusters = *msg++) &&
    812                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000A0   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000A3   8A..         MOV     ?V0 + 3,R2
   \   0000A5   6038         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000A7                ; Setup parameters for call to function osal_mem_alloc
   \   0000A7   C3           CLR     C
   \   0000A8   33           RLC     A
   \   0000A9   FA           MOV     R2,A
   \   0000AA   E4           CLR     A
   \   0000AB   33           RLC     A
   \   0000AC   FB           MOV     R3,A
   \   0000AD   12....       LCALL   ??osal_mem_alloc?relay
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   7002         JNZ     ??ZDO_ProcessMatchDescReq_6
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000C2   601B         JZ      ??ZDO_ProcessMatchDescReq_5
    813            {
    814              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000C4                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine87 & 0xFFFF
    815            }
   \                     ??CrossCallReturnLabel_144:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   FB           MOV     R3,A
   \   0000D0   A9..         MOV     R1,?V0 + 3
   \   0000D2   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000D5   8A..         MOV     ?V0 + 4,R2
   \   0000D7   8B..         MOV     ?V0 + 5,R3
   \   0000D9   AE..         MOV     R6,?V0 + 4
   \   0000DB   AF..         MOV     R7,?V0 + 5
   \   0000DD   8003         SJMP    ??ZDO_ProcessMatchDescReq_7
    816            else
    817            {
    818              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000DF   75..00       MOV     ?V0 + 3,#0x0
    819            }
    820          
    821            if ((numOutClusters = *msg++) &&
    822                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   0000E2   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000E5   8A..         MOV     ?V0 + 2,R2
   \   0000E7   601C         JZ      ??ZDO_ProcessMatchDescReq_8
   \   0000E9                ; Setup parameters for call to function osal_mem_alloc
   \   0000E9   C3           CLR     C
   \   0000EA   33           RLC     A
   \   0000EB   FA           MOV     R2,A
   \   0000EC   E4           CLR     A
   \   0000ED   33           RLC     A
   \   0000EE   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000F1   7001         JNZ     ??ZDO_ProcessMatchDescReq_9
   \   0000F3   EB           MOV     A,R3
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0000F4   600F         JZ      ??ZDO_ProcessMatchDescReq_8
    823            {
    824              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0000F6                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F6   AC..         MOV     R4,?V0 + 14
   \   0000F8   AD..         MOV     R5,?V0 + 15
   \   0000FA   EE           MOV     A,R6
   \   0000FB   FA           MOV     R2,A
   \   0000FC   EF           MOV     A,R7
   \   0000FD   FB           MOV     R3,A
   \   0000FE   A9..         MOV     R1,?V0 + 2
   \   000100   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000103   8003         SJMP    ??ZDO_ProcessMatchDescReq_10
    825            }
    826            else
    827            {
    828              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000105   75..00       MOV     ?V0 + 2,#0x0
    829            }
    830          
    831            // First count the number of endpoints that match.
    832            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000108   90....       MOV     DPTR,#epList
   \   00010B   804E         SJMP    ??ZDO_ProcessMatchDescReq_11
    833            while ( epDesc )
    834            {
    835              // Don't search endpoint 0 and check if response is allowed
    836              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    837              {
    838                if ( epDesc->pfnDescCB )
    839                {
    840                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    841                  allocated = TRUE;
    842                }
    843                else
    844                {
    845                  sDesc = epDesc->epDesc->simpleDesc;
    846                  allocated = FALSE;
    847                }
    848          
    849                if ( sDesc && sDesc->AppProfId == profileID )
    850                {
    851                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    852          
    853                  // Are there matching input clusters?
    854                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    855                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    856                      // Are there matching output clusters?
    857                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    858                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    859                  {
    860                    // Notify the endpoint of the match.
    861                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    862                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    863          
    864                    if (pRspSent)
    865                    {
    866                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    867                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    868                      pRspSent->numInClusters = numInClusters;
    869                      pRspSent->numOutClusters = numOutClusters;
    870          
    871                      if (numInClusters)
    872                      {
    873                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    874                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    875                      }
    876                      else
    877                      {
    878                        pRspSent->pInClusters = NULL;
    879                      }
    880          
    881                      if (numOutClusters)
    882                      {
    883                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    884                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    885                      }
    886                      else
    887                      {
    888                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00010D   E4           CLR     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   F0           MOVX    @DPTR,A
    889                      }
    890          
    891                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000111                ; Setup parameters for call to function osal_msg_send
   \   000111   EE           MOV     A,R6
   \   000112   FA           MOV     R2,A
   \   000113   EF           MOV     A,R7
   \   000114   FB           MOV     R3,A
   \   000115   85..82       MOV     DPL,?V0 + 10
   \   000118   85..83       MOV     DPH,?V0 + 11
   \   00011B   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00011E   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000121   F9           MOV     R1,A
   \   000122   12....       LCALL   ??osal_msg_send?relay
    892                    }
    893          
    894                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000125   85..82       MOV     DPL,?V0 + 8
   \   000128   85..83       MOV     DPH,?V0 + 9
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   C0E0         PUSH    A
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   E0           MOVX    A,@DPTR
   \   000135   24..         ADD     A,#(ZDOBuildBuf & 0xff)
   \   000137   F582         MOV     DPL,A
   \   000139   E4           CLR     A
   \   00013A   34..         ADDC    A,#((ZDOBuildBuf >> 8) & 0xff)
   \   00013C   F583         MOV     DPH,A
   \   00013E   D0E0         POP     A
   \   000140   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000143   04           INC     A
   \   000144   F0           MOVX    @DPTR,A
    895                  }
    896                }
    897          
    898                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000145   E5..         MOV     A,?V0 + 7
   \   000147   6007         JZ      ??ZDO_ProcessMatchDescReq_16
    899                {
    900                  osal_mem_free( sDesc );
   \   000149                ; Setup parameters for call to function osal_mem_free
   \   000149   AA..         MOV     R2,?V0 + 8
   \   00014B   AB..         MOV     R3,?V0 + 9
   \   00014D   12....       LCALL   ??osal_mem_free?relay
    901                }
    902              }
    903              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000150   85..82       MOV     DPL,?V0 + 10
   \   000153   85..83       MOV     DPH,?V0 + 11
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F5..         MOV     ?V0 + 10,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F5..         MOV     ?V0 + 11,A
   \   000162   E5..         MOV     A,?V0 + 10
   \   000164   7002         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   000166   E5..         MOV     A,?V0 + 11
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000168   7003         JNZ     $+5
   \   00016A   02....       LJMP    ??ZDO_ProcessMatchDescReq_18 & 0xFFFF
   \   00016D   85..82       MOV     DPL,?V0 + 10
   \   000170   85..83       MOV     DPH,?V0 + 11
   \   000173   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000176   FA           MOV     R2,A
   \   000177   E9           MOV     A,R1
   \   000178   FB           MOV     R3,A
   \   000179   8A82         MOV     DPL,R2
   \   00017B   8B83         MOV     DPH,R3
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   60D0         JZ      ??ZDO_ProcessMatchDescReq_16
   \   000180   85..82       MOV     DPL,?V0 + 10
   \   000183   85..83       MOV     DPH,?V0 + 11
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   E0           MOVX    A,@DPTR
   \   000189   A2E0         MOV     C,0xE0 /* A   */.0
   \   00018B   50C3         JNC     ??ZDO_ProcessMatchDescReq_16
   \   00018D   85..82       MOV     DPL,?V0 + 10
   \   000190   85..83       MOV     DPH,?V0 + 11
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000199   FC           MOV     R4,A
   \   00019A   E9           MOV     A,R1
   \   00019B   FD           MOV     R5,A
   \   00019C   EC           MOV     A,R4
   \   00019D   7001         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   00019F   ED           MOV     A,R5
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0001A0   8A82         MOV     DPL,R2
   \   0001A2   8B83         MOV     DPH,R3
   \   0001A4   6014         JZ      ??ZDO_ProcessMatchDescReq_20
   \   0001A6                ; Setup parameters for indirect call
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FA           MOV     R2,A
   \   0001A8   7901         MOV     R1,#0x1
   \   0001AA   8C82         MOV     DPL,R4
   \   0001AC   8D83         MOV     DPH,R5
   \   0001AE   12....       LCALL   ?CALL_IND
   \   0001B1   8A..         MOV     ?V0 + 8,R2
   \   0001B3   8B..         MOV     ?V0 + 9,R3
   \   0001B5   75..01       MOV     ?V0 + 7,#0x1
   \   0001B8   800D         SJMP    ??ZDO_ProcessMatchDescReq_21
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F5..         MOV     ?V0 + 8,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F5..         MOV     ?V0 + 9,A
   \   0001C4   75..00       MOV     ?V0 + 7,#0x0
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0001C7   E5..         MOV     A,?V0 + 8
   \   0001C9   7002         JNZ     ??ZDO_ProcessMatchDescReq_22
   \   0001CB   E5..         MOV     A,?V0 + 9
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0001CD   7003         JNZ     $+5
   \   0001CF   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001D2   85..82       MOV     DPL,?V0 + 8
   \   0001D5   85..83       MOV     DPH,?V0 + 9
   \   0001D8   A3           INC     DPTR
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   65..         XRL     A,?V0 + 0
   \   0001DC   7004         JNZ     ??ZDO_ProcessMatchDescReq_23
   \   0001DE   A3           INC     DPTR
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0001E2   6003         JZ      $+5
   \   0001E4   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001E7                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001E7   85..82       MOV     DPL,?V0 + 8
   \   0001EA   85..83       MOV     DPH,?V0 + 9
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001F7   85..82       MOV     DPL,?V0 + 8
   \   0001FA   85..83       MOV     DPH,?V0 + 9
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   FC           MOV     R4,A
   \   000205   7403         MOV     A,#0x3
   \   000207   12....       LCALL   ?XSTACK_DISP0_8
   \   00020A   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00020D   A9..         MOV     R1,?V0 + 3
   \   00020F   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000212   7402         MOV     A,#0x2
   \   000214   12....       LCALL   ?DEALLOC_XSTACK8
   \   000217   E9           MOV     A,R1
   \   000218   7038         JNZ     ??ZDO_ProcessMatchDescReq_24
   \   00021A                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00021A   85..82       MOV     DPL,?V0 + 8
   \   00021D   85..83       MOV     DPH,?V0 + 9
   \   000220   A3           INC     DPTR
   \   000221   A3           INC     DPTR
   \   000222   A3           INC     DPTR
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00022D   85..82       MOV     DPL,?V0 + 8
   \   000230   85..83       MOV     DPH,?V0 + 9
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   FC           MOV     R4,A
   \   00023E   AA..         MOV     R2,?V0 + 14
   \   000240   AB..         MOV     R3,?V0 + 15
   \   000242   A9..         MOV     R1,?V0 + 2
   \   000244   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000247   7402         MOV     A,#0x2
   \   000249   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024C   E9           MOV     A,R1
   \   00024D   7003         JNZ     $+5
   \   00024F   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000252                ; Setup parameters for call to function osal_msg_allocate
   \   000252   E5..         MOV     A,?V0 + 3
   \   000254   25..         ADD     A,?V0 + 2
   \   000256   C3           CLR     C
   \   000257   33           RLC     A
   \   000258   240A         ADD     A,#0xa
   \   00025A   FA           MOV     R2,A
   \   00025B   7B00         MOV     R3,#0x0
   \   00025D   12....       LCALL   ??osal_msg_allocate?relay
   \   000260   8A..         MOV     ?V0 + 4,R2
   \   000262   8B..         MOV     ?V0 + 5,R3
   \   000264   AE..         MOV     R6,?V0 + 4
   \   000266   AF..         MOV     R7,?V0 + 5
   \   000268   EE           MOV     A,R6
   \   000269   7001         JNZ     ??ZDO_ProcessMatchDescReq_25
   \   00026B   EF           MOV     A,R7
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   00026C   7003         JNZ     $+5
   \   00026E   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000271   74D2         MOV     A,#-0x2e
   \   000273   8E82         MOV     DPL,R6
   \   000275   8F83         MOV     DPH,R7
   \   000277   F0           MOVX    @DPTR,A
   \   000278   85..82       MOV     DPL,?V0 + 12
   \   00027B   85..83       MOV     DPH,?V0 + 13
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000283   E8           MOV     A,R0
   \   000284   F0           MOVX    @DPTR,A
   \   000285   A3           INC     DPTR
   \   000286   E9           MOV     A,R1
   \   000287   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00028A   A3           INC     DPTR
   \   00028B   A3           INC     DPTR
   \   00028C   E5..         MOV     A,?V0 + 3
   \   00028E   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000291   E5..         MOV     A,?V0 + 2
   \   000293   F0           MOVX    @DPTR,A
   \   000294   EE           MOV     A,R6
   \   000295   2405         ADD     A,#0x5
   \   000297   FA           MOV     R2,A
   \   000298   EF           MOV     A,R7
   \   000299   3400         ADDC    A,#0x0
   \   00029B   FB           MOV     R3,A
   \   00029C   E5..         MOV     A,?V0 + 3
   \   00029E   603A         JZ      ??ZDO_ProcessMatchDescReq_26
   \   0002A0   EE           MOV     A,R6
   \   0002A1   240A         ADD     A,#0xa
   \   0002A3   F8           MOV     R0,A
   \   0002A4   EF           MOV     A,R7
   \   0002A5   3400         ADDC    A,#0x0
   \   0002A7   F9           MOV     R1,A
   \   0002A8   8A82         MOV     DPL,R2
   \   0002AA   8B83         MOV     DPH,R3
   \   0002AC   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   0002AF                ; Setup parameters for call to function osal_memcpy
   \   0002AF   7401         MOV     A,#0x1
   \   0002B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   F5..         MOV     ?V0 + 4,A
   \   0002B7   A3           INC     DPTR
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   F5..         MOV     ?V0 + 5,A
   \   0002BB   75..00       MOV     ?V0 + 6,#0x0
   \   0002BE   78..         MOV     R0,#?V0 + 4
   \   0002C0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002C3   E5..         MOV     A,?V0 + 3
   \   0002C5   C3           CLR     C
   \   0002C6   33           RLC     A
   \   0002C7   FC           MOV     R4,A
   \   0002C8   E4           CLR     A
   \   0002C9   33           RLC     A
   \   0002CA   FD           MOV     R5,A
   \   0002CB   8A82         MOV     DPL,R2
   \   0002CD   8B83         MOV     DPH,R3
   \   0002CF   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   0002D2   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0002D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D8   8008         SJMP    ??ZDO_ProcessMatchDescReq_27
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0002DA   8A82         MOV     DPL,R2
   \   0002DC   8B83         MOV     DPH,R3
   \   0002DE   E4           CLR     A
   \   0002DF   F0           MOVX    @DPTR,A
   \   0002E0   A3           INC     DPTR
   \   0002E1   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0002E2   EE           MOV     A,R6
   \   0002E3   2408         ADD     A,#0x8
   \   0002E5   F582         MOV     DPL,A
   \   0002E7   EF           MOV     A,R7
   \   0002E8   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   0002EB   E5..         MOV     A,?V0 + 2
   \   0002ED   7003         JNZ     $+5
   \   0002EF   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002F2   E5..         MOV     A,?V0 + 3
   \   0002F4   C3           CLR     C
   \   0002F5   33           RLC     A
   \   0002F6   F8           MOV     R0,A
   \   0002F7   E4           CLR     A
   \   0002F8   33           RLC     A
   \   0002F9   F9           MOV     R1,A
   \   0002FA   EE           MOV     A,R6
   \   0002FB   28           ADD     A,R0
   \   0002FC   F8           MOV     R0,A
   \   0002FD   EF           MOV     A,R7
   \   0002FE   39           ADDC    A,R1
   \   0002FF   F9           MOV     R1,A
   \   000300   740A         MOV     A,#0xa
   \   000302   28           ADD     A,R0
   \   000303   FA           MOV     R2,A
   \   000304   E4           CLR     A
   \   000305   39           ADDC    A,R1
   \   000306   FB           MOV     R3,A
   \   000307   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00030A                ; Setup parameters for call to function osal_memcpy
   \   00030A   85....       MOV     ?V0 + 4,?V0 + 14
   \   00030D   85....       MOV     ?V0 + 5,?V0 + 15
   \   000310   75..00       MOV     ?V0 + 6,#0x0
   \   000313   78..         MOV     R0,#?V0 + 4
   \   000315   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000318   E5..         MOV     A,?V0 + 2
   \   00031A   C3           CLR     C
   \   00031B   33           RLC     A
   \   00031C   FC           MOV     R4,A
   \   00031D   E4           CLR     A
   \   00031E   33           RLC     A
   \   00031F   FD           MOV     R5,A
   \   000320   12....       LCALL   ?Subroutine131 & 0xFFFF
    904            }
   \                     ??CrossCallReturnLabel_223:
   \   000323   12....       LCALL   ?DEALLOC_XSTACK8
   \   000326   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
    905          
    906            // Send the message only if at least one match found.
    907            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000329   85..82       MOV     DPL,?XSP + 0
   \   00032C   85..83       MOV     DPH,?XSP + 1
   \   00032F   E0           MOVX    A,@DPTR
   \   000330   6039         JZ      ??ZDO_ProcessMatchDescReq_28
    908            {
    909              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    910                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000332                ; Setup parameters for call to function ZDP_EPRsp
   \   000332   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000335   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000338   75....       MOV     ?V0 + 0,#(ZDOBuildBuf & 0xff)
   \   00033B   75....       MOV     ?V0 + 1,#((ZDOBuildBuf >> 8) & 0xff)
   \   00033E   78..         MOV     R0,#?V0 + 0
   \   000340   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000343   7403         MOV     A,#0x3
   \   000345   12....       LCALL   ?XSTACK_DISP0_8
   \   000348   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00034B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00034E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000351   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000354   75..00       MOV     ?V0 + 0,#0x0
   \   000357   78..         MOV     R0,#?V0 + 0
   \   000359   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035C   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00035F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000362   E9           MOV     A,R1
   \   000363   700D         JNZ     ??ZDO_ProcessMatchDescReq_29
    911              {
    912          #if defined( SERIAL_DEBUG_SUPPORTED )
    913                printf("Match Desc Req\nRsp Sent\n" );
   \   000365                ; Setup parameters for call to function printf
   \   000365   7A..         MOV     R2,#(`?<Constant "Match Desc Req\\nRsp Sent\\n">` & 0xff)
   \   000367   7B..         MOV     R3,#((`?<Constant "Match Desc Req\\nRsp Sent\\n">` >> 8) & 0xff)
   \   000369   8004         SJMP    ??ZDO_ProcessMatchDescReq_30
    914          #endif
    915              }
    916            }
    917            else
    918            {
    919          #if defined( SERIAL_DEBUG_SUPPORTED )
    920              printf("Match Desc Req\nNon Matched\n" );
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   00036B                ; Setup parameters for call to function printf
   \   00036B   7A..         MOV     R2,#(`?<Constant "Match Desc Req\\nNon Ma...">` & 0xff)
   \   00036D   7B..         MOV     R3,#((`?<Constant "Match Desc Req\\nNon Ma...">` >> 8) & 0xff)
   \                     ??ZDO_ProcessMatchDescReq_30:
   \   00036F   12....       LCALL   ??printf?relay
    921          #endif
    922            }
    923          
    924            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_29:
   \   000372   7401         MOV     A,#0x1
   \   000374   12....       LCALL   ?XSTACK_DISP0_8
   \   000377   E0           MOVX    A,@DPTR
   \   000378   7002         JNZ     ??ZDO_ProcessMatchDescReq_31
   \   00037A   A3           INC     DPTR
   \   00037B   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_31:
   \   00037C   6008         JZ      ??CrossCallReturnLabel_114
    925            {
    926              osal_mem_free( inClusters );
   \   00037E                ; Setup parameters for call to function osal_mem_free
   \   00037E   7401         MOV     A,#0x1
   \   000380   12....       LCALL   ?XSTACK_DISP0_8
   \   000383   12....       LCALL   ?Subroutine70 & 0xFFFF
    927            }
    928            
    929            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_114:
   \   000386   E5..         MOV     A,?V0 + 14
   \   000388   7002         JNZ     ??ZDO_ProcessMatchDescReq_32
   \   00038A   E5..         MOV     A,?V0 + 15
   \                     ??ZDO_ProcessMatchDescReq_32:
   \   00038C   6007         JZ      ??ZDO_ProcessMatchDescReq_2
    930            {
    931              osal_mem_free( outClusters );
   \   00038E                ; Setup parameters for call to function osal_mem_free
   \   00038E   AA..         MOV     R2,?V0 + 14
   \   000390   AB..         MOV     R3,?V0 + 15
   \   000392   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000395   7403         MOV     A,#0x3
    932            }
   \   000397                REQUIRE ?Subroutine6
   \   000397                ; // Fall through to label ?Subroutine6
    933          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine185_0
   \   000003                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V0 + 12
   \   00000C   240F         ADD     A,#0xf
   \   00000E   F582         MOV     DPL,A
   \   000010   E5..         MOV     A,?V0 + 13
   \   000012   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000015   7A06         MOV     R2,#0x6
   \   000017   7B80         MOV     R3,#-0x80
   \   000019   12....       LCALL   ??ZDP_EPRsp?relay
   \   00001C   7407         MOV     A,#0x7
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine190_0
   \   000001                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   240E         ADD     A,#0xe
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 13
   \   000008                REQUIRE ??Subroutine212_0
   \   000008                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000003                REQUIRE ??Subroutine213_0
   \   000003                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003                REQUIRE ??Subroutine223_0
   \   000003                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   AE82         MOV     R6,DPL
   \   000009   AF83         MOV     R7,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 14,R2
   \   000006   8B..         MOV     ?V0 + 15,R3
   \   000008   EA           MOV     A,R2
   \   000009   22           RET
    934          
    935          
    936          /*********************************************************************
    937           * @fn      ZDO_ProcessBindUnbindReq()
    938           *
    939           * @brief   Called to process a Bind or Unbind Request message.
    940           *
    941           * @param   inMsg  - incoming message (request)
    942           * @param   pReq - place to put parsed information
    943           *
    944           * @return  none
    945           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    946          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    947          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    948            zAddrType_t SourceAddr;       // Binding Source addres
    949            byte bindStat;
    950          
    951            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    952            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??sAddrExtCpy?relay
    953          
    954          
    955            // If the local device is not the primary binding cache
    956            // check the src address of the bind request.
    957            // If it is not the local device's extended address
    958            // discard the request.
    959            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    960                  (pReq->dstAddress.addrMode != Addr64Bit &&
    961                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000024   E5..         MOV     A,?V0 + 6
   \   000026   240C         ADD     A,#0xc
   \   000028   F5..         MOV     ?V0 + 10,A
   \   00002A   E5..         MOV     A,?V0 + 7
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 11,A
   \   000030                ; Setup parameters for call to function sAddrExtCmp
   \   000030                ; Setup parameters for call to function NLME_GetExtAddr
   \   000030   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000033   EA           MOV     A,R2
   \   000034   FC           MOV     R4,A
   \   000035   EB           MOV     A,R3
   \   000036   FD           MOV     R5,A
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   ??sAddrExtCmp?relay
   \   000043   E9           MOV     A,R1
   \   000044   6012         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000046   EE           MOV     A,R6
   \   000047   2413         ADD     A,#0x13
   \   000049   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   7403         MOV     A,#0x3
   \   000050   6A           XRL     A,R2
   \   000051   600A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   000053   7401         MOV     A,#0x1
   \   000055   6A           XRL     A,R2
   \   000056   6005         JZ      ??ZDO_ProcessBindUnbindReq_1
    962            {
    963              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   7484         MOV     A,#-0x7c
   \   00005A   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    964            }
    965            else
    966            {
    967              // Check source & destination endpoints
    968              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    969                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    970                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00005D   EE           MOV     A,R6
   \   00005E   2408         ADD     A,#0x8
   \   000060   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   601E         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000067   C3           CLR     C
   \   000068   94F1         SUBB    A,#-0xf
   \   00006A   5019         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   00006C   EE           MOV     A,R6
   \   00006D   2414         ADD     A,#0x14
   \   00006F   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000072   7403         MOV     A,#0x3
   \   000074   6A           XRL     A,R2
   \   000075   7013         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000077   85..82       MOV     DPL,?V0 + 2
   \   00007A   85..83       MOV     DPH,?V0 + 3
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000080   C3           CLR     C
   \   000081   94F1         SUBB    A,#-0xf
   \   000083   4005         JC      ??ZDO_ProcessBindUnbindReq_4
    971              {
    972                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000085   7482         MOV     A,#-0x7e
   \   000087   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    973              }
    974              else
    975              {
    976                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00008A   EE           MOV     A,R6
   \   00008B   2409         ADD     A,#0x9
   \   00008D   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000090   EE           MOV     A,R6
   \   000091   240B         ADD     A,#0xb
   \   000093   FE           MOV     R6,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   FF           MOV     R7,A
   \   000098   85..82       MOV     DPL,?V0 + 10
   \   00009B   85..83       MOV     DPH,?V0 + 11
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6421         XRL     A,#0x21
   \   0000A1   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A5   707C         JNZ     ??ZDO_ProcessBindUnbindReq_6
    977                {
    978                  // Assume the table is full
    979                  bindStat = ZDP_TABLE_FULL;
   \   0000A7   7487         MOV     A,#-0x79
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   F0           MOVX    @DPTR,A
    980          
    981                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000B0                ; Setup parameters for call to function bindNumOfEntries
   \   0000B0   12....       LCALL   ??bindNumOfEntries?relay
   \   0000B3   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B6   E4           CLR     A
   \   0000B7   93           MOVC    A,@A+DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   7401         MOV     A,#0x1
   \   0000BB   93           MOVC    A,@A+DPTR
   \   0000BC   F9           MOV     R1,A
   \   0000BD   C3           CLR     C
   \   0000BE   EA           MOV     A,R2
   \   0000BF   98           SUBB    A,R0
   \   0000C0   EB           MOV     A,R3
   \   0000C1   99           SUBB    A,R1
   \   0000C2   4003         JC      $+5
   \   0000C4   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
    982                  {
    983                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    984                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000C7                ; Setup parameters for call to function APSME_BindRequest
   \   0000C7   85..82       MOV     DPL,?V0 + 2
   \   0000CA   85..83       MOV     DPH,?V0 + 3
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F5..         MOV     ?V0 + 2,A
   \   0000D0   78..         MOV     R0,#?V0 + 2
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D5   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0000D8   85..82       MOV     DPL,?V0 + 4
   \   0000DB   85..83       MOV     DPH,?V0 + 5
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   ??APSME_BindRequest?relay
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E8   E9           MOV     A,R1
   \   0000E9   706A         JNZ     ??ZDO_ProcessBindUnbindReq_7
    985                    {
    986                      uint16 nwkAddr;
    987          
    988                      // valid entry
    989                      bindStat = ZDP_SUCCESS;
   \   0000EB   E4           CLR     A
   \   0000EC   85..82       MOV     DPL,?XSP + 0
   \   0000EF   85..83       MOV     DPH,?XSP + 1
   \   0000F2   F0           MOVX    @DPTR,A
    990          
    991                      // Notify to save info into NV
    992                      ZDApp_NVUpdate();
   \   0000F3                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000F3   12....       LCALL   ??ZDApp_NVUpdate?relay
    993          
    994                      // Check for the destination address
    995                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000F6   85..82       MOV     DPL,?V0 + 8
   \   0000F9   85..83       MOV     DPH,?V0 + 9
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   6403         XRL     A,#0x3
   \   0000FF   7054         JNZ     ??ZDO_ProcessBindUnbindReq_7
    996                      {
    997                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   000101                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000101   7401         MOV     A,#0x1
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   AC82         MOV     R4,DPL
   \   000108   AD83         MOV     R5,DPH
   \   00010A   EE           MOV     A,R6
   \   00010B   FA           MOV     R2,A
   \   00010C   EF           MOV     A,R7
   \   00010D   FB           MOV     R3,A
   \   00010E   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   000111   E9           MOV     A,R1
   \   000112   7041         JNZ     ??ZDO_ProcessBindUnbindReq_7
    998                        {
    999                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000114                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000114   7D00         MOV     R5,#0x0
   \   000116   7C00         MOV     R4,#0x0
   \   000118   7900         MOV     R1,#0x0
   \   00011A   EE           MOV     A,R6
   \   00011B   FA           MOV     R2,A
   \   00011C   EF           MOV     A,R7
   \   00011D   FB           MOV     R3,A
   \   00011E   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   000121   8032         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1000                        }
   1001                      }
   1002                    }
   1003                  }
   1004                }
   1005                else // Unbind_req
   1006                {
   1007                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1008                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000123                ; Setup parameters for call to function APSME_UnBindRequest
   \   000123   85..82       MOV     DPL,?V0 + 2
   \   000126   85..83       MOV     DPH,?V0 + 3
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F5..         MOV     ?V0 + 2,A
   \   00012C   78..         MOV     R0,#?V0 + 2
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000131   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000134   12....       LCALL   ??APSME_UnBindRequest?relay
   \   000137   7401         MOV     A,#0x1
   \   000139   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013C   E9           MOV     A,R1
   \   00013D   700D         JNZ     ??ZDO_ProcessBindUnbindReq_8
   1009                  {
   1010                    bindStat = ZDP_SUCCESS;
   \   00013F   E4           CLR     A
   \   000140   85..82       MOV     DPL,?XSP + 0
   \   000143   85..83       MOV     DPH,?XSP + 1
   \   000146   F0           MOVX    @DPTR,A
   1011          
   1012                    // Notify to save info into NV
   1013                    ZDApp_NVUpdate();
   \   000147                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000147   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   00014A   8009         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1014                  }
   1015                  else
   1016                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00014C   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00014E   85..82       MOV     DPL,?XSP + 0
   \   000151   85..83       MOV     DPH,?XSP + 1
   \   000154   F0           MOVX    @DPTR,A
   1017                }
   1018              }
   1019            }
   1020          
   1021            // Send back a response message
   1022            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1023                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1024                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000155                ; Setup parameters for call to function ZDP_SendData
   \   000155   E5..         MOV     A,?V0 + 6
   \   000157   240E         ADD     A,#0xe
   \   000159   F582         MOV     DPL,A
   \   00015B   E5..         MOV     A,?V0 + 7
   \   00015D   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000163   7401         MOV     A,#0x1
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   8582..       MOV     ?V0 + 0,DPL
   \   00016B   8583..       MOV     ?V0 + 1,DPH
   \   00016E   78..         MOV     R0,#?V0 + 0
   \   000170   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000173   85..82       MOV     DPL,?V0 + 10
   \   000176   85..83       MOV     DPH,?V0 + 11
   \   000179   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00017C   4480         ORL     A,#0x80
   \   00017E   F5..         MOV     ?V0 + 1,A
   \   000180   78..         MOV     R0,#?V0 + 0
   \   000182   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000185   7901         MOV     R1,#0x1
   \   000187   E5..         MOV     A,?V0 + 6
   \   000189   2402         ADD     A,#0x2
   \   00018B   FC           MOV     R4,A
   \   00018C   E5..         MOV     A,?V0 + 7
   \   00018E   3400         ADDC    A,#0x0
   \   000190   FD           MOV     R5,A
   \   000191   E5..         MOV     A,?V0 + 6
   \   000193   240F         ADD     A,#0xf
   \   000195   FA           MOV     R2,A
   \   000196   E5..         MOV     A,?V0 + 7
   \   000198   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   00019B   12....       LCALL   ?DEALLOC_XSTACK8
   1025          }
   \   00019E   740C         MOV     A,#0xc
   \   0001A0                REQUIRE ?Subroutine7
   \   0001A0                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine186_0
   \   000003                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   85..83       MOV     DPH,?V0 + 1
   \   00000A                REQUIRE ??Subroutine188_0
   \   00000A                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine197_0
   \   000001                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   12....       LCALL   ??ZDP_SendData?relay
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F5..         MOV     ?V0 + 8,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   85..82       MOV     DPL,?V0 + 8
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   85..82       MOV     DPL,?V0 + 4
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine222_0
   \   000003                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET
   1026          
   1027          /*********************************************************************
   1028           * @fn      ZDO_UpdateAddrManager
   1029           *
   1030           * @brief   Update the Address Manager.
   1031           *
   1032           * @param   nwkAddr - network address
   1033           * @param   extAddr - extended address
   1034           *
   1035           * @return  none
   1036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine181_0
   \   000003                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1037          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1038          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1039            AddrMgrEntry_t addrEntry;
   1040          
   1041            // Update the address manager
   1042            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   E4           CLR     A
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1043            addrEntry.nwkAddr = nwkAddr;
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine33 & 0xFFFF
   1044            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_36:
   \   000019                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000019   7403         MOV     A,#0x3
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine133 & 0xFFFF
   1045            AddrMgrEntryUpdate( &addrEntry );
   1046          }
   \                     ??CrossCallReturnLabel_228:
   \   000021   740D         MOV     A,#0xd
   \   000023   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??AddrMgrExtAddrSet?relay
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   AA82         MOV     R2,DPL
   \   00000F   AB83         MOV     R3,DPH
   \   000011   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \   000014   22           RET
   1047          
   1048          /*********************************************************************
   1049           * @fn      ZDO_ProcessServerDiscReq
   1050           *
   1051           * @brief   Process the Server_Discovery_req message.
   1052           *
   1053           * @param   inMsg  - incoming message (request)
   1054           *
   1055           * @return  none
   1056           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1057          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1058          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine64 & 0xFFFF
   1059            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1060            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_298:
   \   000008   F8           MOV     R0,A
   \   000009   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 8)
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   58           ANL     A,R0
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   59           ANL     A,R1
   \   000013   F5..         MOV     ?V0 + 1,A
   1061          
   1062            if ( matchMask )
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   7002         JNZ     ??ZDO_ProcessServerDiscReq_0
   \   000019   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00001B   601F         JZ      ??ZDO_ProcessServerDiscReq_1
   1063            {
   1064              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1065                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000025   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000028   12....       LCALL   ?Subroutine117 & 0xFFFF
   1066            }
   \                     ??CrossCallReturnLabel_292:
   \   00002B   FD           MOV     R5,A
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000031   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000034   12....       LCALL   ??ZDP_ServerDiscRsp?relay
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   1067          }
   \                     ??ZDO_ProcessServerDiscReq_1:
   \   00003C   02....       LJMP    ??Subroutine183_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine187_0
   \   000004                ; // Fall through to label ??Subroutine187_0
   1068          
   1069          /*********************************************************************
   1070           * Call Back Functions from APS  - API
   1071           */
   1072          
   1073          /*********************************************************************
   1074           * @fn          ZDO_EndDeviceTimeoutCB
   1075           *
   1076           * @brief       This function handles the binding timer for the End
   1077           *              Device Bind command.
   1078           *
   1079           * @param       none
   1080           *
   1081           * @return      none
   1082           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1083          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1084          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1085          #if defined ( REFLECTOR )
   1086            byte stat;
   1087            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7002         JNZ     ??ZDO_EndDeviceTimeoutCB_0
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_1 & 0xFFFF
   1088            {
   1089              stat = ZDO_EDBind->status;
   1090          
   1091              // Send the response message to the first sent
   1092              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1093                                  stat, ZDO_EDBind->SecurityUse );
   \   000017   90....       MOV     DPTR,#ZDO_EDBind
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   2415         ADD     A,#0x15
   \   00001D   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000020   FA           MOV     R2,A
   \   000021   90....       MOV     DPTR,#ZDO_EDBind
   \   000024   E0           MOVX    A,@DPTR
   \   000025   2416         ADD     A,#0x16
   \   000027   08           INC     R0
   \   000028   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#ZDO_EDBind
   \   000035   E0           MOVX    A,@DPTR
   \   000036   2401         ADD     A,#0x1
   \   000038   FC           MOV     R4,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   FD           MOV     R5,A
   \   00003E   90....       MOV     DPTR,#ZDO_EDBind
   \   000041   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000044   C0E0         PUSH    A
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E                ; Setup parameters for call to function ZDP_SendData
   \   00004E   EA           MOV     A,R2
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7401         MOV     A,#0x1
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 0,DPL
   \   00005E   8583..       MOV     ?V0 + 1,DPH
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   75..20       MOV     ?V0 + 0,#0x20
   \   000069   75..80       MOV     ?V0 + 1,#-0x80
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7901         MOV     R1,#0x1
   \   000073   7406         MOV     A,#0x6
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082                ; Setup parameters for call to function printf
   \   000082   7A..         MOV     R2,#(`?<Constant "End Device Bind\\n">` & 0xff)
   \   000084   7B..         MOV     R3,#((`?<Constant "End Device Bind\\n">` >> 8) & 0xff)
   \   000086   12....       LCALL   ??printf?relay
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_2
   \   000092                ; Setup parameters for call to function printf
   \   000092   7A..         MOV     R2,#(`?<Constant "Success Sent\\n">` & 0xff)
   \   000094   7B..         MOV     R3,#((`?<Constant "Success Sent\\n">` >> 8) & 0xff)
   \   000096   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_3
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   000098                ; Setup parameters for call to function printf
   \   000098   7A..         MOV     R2,#(`?<Constant "Timeout\\n">` & 0xff)
   \   00009A   7B..         MOV     R3,#((`?<Constant "Timeout\\n">` >> 8) & 0xff)
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   00009C   12....       LCALL   ??printf?relay
   1094          
   1095              ZDO_RemoveEndDeviceBind();
   \   00009F   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   7002         JNZ     ??ZDO_EndDeviceTimeoutCB_4
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000A7   602F         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   0000A9   90....       MOV     DPTR,#ZDO_EDBind
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   2410         ADD     A,#0x10
   \   0000AF   12....       LCALL   ?Subroutine57 & 0xFFFF
   1096            }
   \                     ??CrossCallReturnLabel_92:
   \   0000B2   7001         JNZ     ??ZDO_EndDeviceTimeoutCB_5
   \   0000B4   EB           MOV     A,R3
   \                     ??ZDO_EndDeviceTimeoutCB_5:
   \   0000B5   6003         JZ      ??ZDO_EndDeviceTimeoutCB_6
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_6:
   \   0000BA   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   2413         ADD     A,#0x13
   \   0000C0   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000C3   7001         JNZ     ??ZDO_EndDeviceTimeoutCB_7
   \   0000C5   EB           MOV     A,R3
   \                     ??ZDO_EndDeviceTimeoutCB_7:
   \   0000C6   6003         JZ      ??ZDO_EndDeviceTimeoutCB_8
   \   0000C8                ; Setup parameters for call to function osal_mem_free
   \   0000C8   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_8:
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   90....       MOV     DPTR,#ZDO_EDBind
   \   0000CE   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000D1   90....       MOV     DPTR,#ZDO_EDBind
   \   0000D4   E4           CLR     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   F0           MOVX    @DPTR,A
   1097          #endif  // REFLECTOR
   1098          }
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000D8   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine203_0
   \   000001                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine210_0
   \   000001                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000003                REQUIRE ??Subroutine218_0
   \   000003                ; // Fall through to label ??Subroutine218_0
   1099          
   1100          /*********************************************************************
   1101           * Optional Management Messages
   1102           */
   1103          
   1104          /*********************************************************************
   1105           * @fn          ZDO_ProcessMgmtLqiReq
   1106           *
   1107           * @brief       This function handles parsing the incoming Management
   1108           *              LQI request and generate the response.
   1109           *
   1110           *   Note:      This function will limit the number of items returned
   1111           *              to ZDO_MAX_LQI_ITEMS items.
   1112           *
   1113           * @param       inMsg - incoming message (request)
   1114           *
   1115           * @return      none
   1116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1117          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1118          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   1119            byte x;
   1120            byte index;
   1121            byte numItems;
   1122            byte maxItems;
   1123            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V0 + 6,#0x0
   \   000011   75..00       MOV     ?V0 + 7,#0x0
   1124            ZDP_MgmtLqiItem_t* item;
   1125            neighborEntry_t    entry;
   1126            byte aItems;
   1127            associated_devices_t *aDevice;
   1128            AddrMgrEntry_t  nwkEntry;
   1129            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000017   F5..         MOV     ?V0 + 12,A
   1130          
   1131            // Get the number of neighbor items
   1132            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000019                ; Setup parameters for call to function NLME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   799C         MOV     R1,#-0x64
   \   000029   12....       LCALL   ??NLME_GetRequest?relay
   1133          
   1134            // Get the number of associated items
   1135            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002C                ; Setup parameters for call to function AssocCount
   \   00002C   7A04         MOV     R2,#0x4
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??AssocCount?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 8,A
   1136          
   1137            // Total number of items
   1138            maxItems += aItems;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   25..         ADD     A,?V0 + 8
   \   00003F   F0           MOVX    @DPTR,A
   1139          
   1140            // Start with the supplied index
   1141            if ( maxItems > StartIndex )
   \   000040   FA           MOV     R2,A
   \   000041   E5..         MOV     A,?V0 + 12
   \   000043   C3           CLR     C
   \   000044   9A           SUBB    A,R2
   \   000045   4003         JC      $+5
   \   000047   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1142            {
   1143              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V0 + 12
   \   00004E   F5..         MOV     ?V0 + 5,A
   1144          
   1145              // limit the size of the list
   1146              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR     C
   \   000051   9404         SUBB    A,#0x4
   \   000053   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1147                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV     ?V0 + 5,#0x3
   1148          
   1149              // Allocate the memory to build the table
   1150              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1151                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV     A,?V0 + 5
   \   00005A   75F01A       MOV     B,#0x1a
   \   00005D   A4           MUL     AB
   \   00005E   FA           MOV     R2,A
   \   00005F   ABF0         MOV     R3,B
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 6,R2
   \   000066   8B..         MOV     ?V0 + 7,R3
   1152          
   1153              if ( table != NULL )
   \   000068   EA           MOV     A,R2
   \   000069   7001         JNZ     ??ZDO_ProcessMgmtLqiReq_2
   \   00006B   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1154              {
   1155                x = 0;
   \   000071   75..00       MOV     ?V0 + 9,#0x0
   1156                item = table;
   \   000074   AE..         MOV     R6,?V0 + 6
   \   000076   AF..         MOV     R7,?V0 + 7
   1157                index = StartIndex;
   \   000078   85....       MOV     ?V0 + 4,?V0 + 12
   \   00007B   02....       LJMP    ??CrossCallReturnLabel_53 & 0xFFFF
   1158          
   1159                // Loop through associated items and build list
   1160                for ( ; x < numItems; x++ )
   1161                {
   1162                  if ( index < aItems )
   1163                  {
   1164                    // get next associated device
   1165                    aDevice = AssocFindDevice( index++ );
   1166          
   1167                    // set basic fields
   1168                    item->panID   = _NIB.nwkPanId;
   1169                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1170                    item->nwkAddr = aDevice->shortAddr;
   1171                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1172                    item->depth   = 0xFF;
   1173                    item->lqi     = aDevice->linkInfo.rxLqi;
   1174          
   1175                    // set extented address
   1176                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1177                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1178          
   1179                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1180                    {
   1181                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1182                    }
   1183                    else
   1184                    {
   1185                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007E                ; Setup parameters for call to function osal_memset
   \   00007E   7C08         MOV     R4,#0x8
   \   000080   7D00         MOV     R5,#0x0
   \   000082   79FF         MOV     R1,#-0x1
   \   000084   AA..         MOV     R2,?V0 + 10
   \   000086   AB..         MOV     R3,?V0 + 11
   \   000088   12....       LCALL   ??osal_memset?relay
   1186                    }
   1187          
   1188                    // use association info to set other fields
   1189                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   00008B   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00008E   EE           MOV     A,R6
   \   00008F   2416         ADD     A,#0x16
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   FB           MOV     R3,A
   \   000096   EE           MOV     A,R6
   \   000097   2415         ADD     A,#0x15
   \   000099   FC           MOV     R4,A
   \   00009A   EF           MOV     A,R7
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   FD           MOV     R5,A
   \   00009E   EE           MOV     A,R6
   \   00009F   2414         ADD     A,#0x14
   \   0000A1   F5..         MOV     ?V0 + 10,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   3400         ADDC    A,#0x0
   \   0000A6   F5..         MOV     ?V0 + 11,A
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   7036         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1190                    {
   1191                      if (  aDevice->shortAddr == 0 )
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000BA   700A         JNZ     ??ZDO_ProcessMgmtLqiReq_8
   1192                      {
   1193                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000BC   E4           CLR     A
   \   0000BD   85..82       MOV     DPL,?V0 + 10
   \   0000C0   85..83       MOV     DPH,?V0 + 11
   \   0000C3   F0           MOVX    @DPTR,A
   1194                        item->depth = 0;
   \   0000C4   800E         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1195                      }
   1196                      else
   1197                      {
   1198                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   1199                        item->depth = _NIB.nodeDepth - 1;
   \   0000CF   90....       MOV     DPTR,#(_NIB + 52)
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0000D4   85..82       MOV     DPL,?V0 + 2
   \   0000D7   85..83       MOV     DPH,?V0 + 3
   \   0000DA   F0           MOVX    @DPTR,A
   1200                      }
   1201          
   1202                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   8C82         MOV     DPL,R4
   \   0000DF   8D83         MOV     DPH,R5
   \   0000E1   F0           MOVX    @DPTR,A
   1203                      item->relation = ZDP_MGMT_REL_PARENT;
   \   0000E2   E4           CLR     A
   \   0000E3   8030         SJMP    ??ZDO_ProcessMgmtLqiReq_10
   1204                    }
   1205                    else
   1206                    {
   1207                      // If not parent, then it's a child
   1208                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000E5   90....       MOV     DPTR,#(_NIB + 52)
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   04           INC     A
   \   0000EA   85..82       MOV     DPL,?V0 + 2
   \   0000ED   85..83       MOV     DPH,?V0 + 3
   \   0000F0   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   1209          
   1210                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_474:
   \   0000F3   C3           CLR     C
   \   0000F4   9403         SUBB    A,#0x3
   \   0000F6   4003         JC      $+5
   \   0000F8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1211                      {
   1212                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   85..82       MOV     DPL,?V0 + 10
   \   000100   85..83       MOV     DPH,?V0 + 11
   \   000103   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   1213          
   1214                        if ( aDevice->nodeRelation == CHILD_RFD )
   \                     ??CrossCallReturnLabel_475:
   \   000106   6401         XRL     A,#0x1
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   1215                        {
   1216                          item->rxOnIdle = FALSE;
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00010D   E4           CLR     A
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   00010E   8C82         MOV     DPL,R4
   \   000110   8D83         MOV     DPH,R5
   \   000112   F0           MOVX    @DPTR,A
   1217                        }
   1218                        else
   1219                        {
   1220                          item->rxOnIdle = TRUE;
   1221                        }
   1222                      }
   1223                      else
   1224                      {
   1225                        item->devType = ZDP_MGMT_DT_ROUTER;
   1226          
   1227                        if ( aDevice->nodeRelation == CHILD_FFD )
   1228                        {
   1229                          item->rxOnIdle = FALSE;
   1230                        }
   1231                        else
   1232                        {
   1233                          item->rxOnIdle = TRUE;
   1234                        }
   1235                      }
   1236          
   1237                      item->relation = ZDP_MGMT_REL_CHILD;
   \   000113   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000115   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000118   E5..         MOV     A,?V0 + 9
   \   00011A   C3           CLR     C
   \   00011B   95..         SUBB    A,?V0 + 5
   \   00011D   4003         JC      $+5
   \   00011F   02....       LJMP    ??CrossCallReturnLabel_54 & 0xFFFF
   \   000122   E5..         MOV     A,?V0 + 4
   \   000124   C3           CLR     C
   \   000125   95..         SUBB    A,?V0 + 8
   \   000127   4003         JC      $+5
   \   000129   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   00012C                ; Setup parameters for call to function AssocFindDevice
   \   00012C   A9..         MOV     R1,?V0 + 4
   \   00012E   12....       LCALL   ??AssocFindDevice?relay
   \   000131   8A..         MOV     ?V0 + 0,R2
   \   000133   8B..         MOV     ?V0 + 1,R3
   \   000135   05..         INC     ?V0 + 4
   \   000137   90....       MOV     DPTR,#(_NIB + 33)
   \   00013A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00013D   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000140   EE           MOV     A,R6
   \   000141   2412         ADD     A,#0x12
   \   000143   F582         MOV     DPL,A
   \   000145   EF           MOV     A,R7
   \   000146   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000149   E8           MOV     A,R0
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   A3           INC     DPTR
   \   00014C   E9           MOV     A,R1
   \   00014D   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000150   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000153   74FF         MOV     A,#-0x1
   \   000155   85..82       MOV     DPL,?V0 + 2
   \   000158   85..83       MOV     DPH,?V0 + 3
   \   00015B   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   C0E0         PUSH    A
   \   000169   EE           MOV     A,R6
   \   00016A   2419         ADD     A,#0x19
   \   00016C   F582         MOV     DPL,A
   \   00016E   EF           MOV     A,R7
   \   00016F   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000172   D0E0         POP     A
   \   000174   F0           MOVX    @DPTR,A
   \   000175   7401         MOV     A,#0x1
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   E4           CLR     A
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00017F   7402         MOV     A,#0x2
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000187   EE           MOV     A,R6
   \   000188   240A         ADD     A,#0xa
   \   00018A   F5..         MOV     ?V0 + 10,A
   \   00018C   EF           MOV     A,R7
   \   00018D   3400         ADDC    A,#0x0
   \   00018F   F5..         MOV     ?V0 + 11,A
   \   000191                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000191   7401         MOV     A,#0x1
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   AA82         MOV     R2,DPL
   \   000198   AB83         MOV     R3,DPH
   \   00019A   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   00019D   E9           MOV     A,R1
   \   00019E   6401         XRL     A,#0x1
   \   0001A0   6003         JZ      $+5
   \   0001A2   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0001A5                ; Setup parameters for call to function sAddrExtCpy
   \   0001A5   7404         MOV     A,#0x4
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   AC82         MOV     R4,DPL
   \   0001AC   AD83         MOV     R5,DPH
   \   0001AE   AA..         MOV     R2,?V0 + 10
   \   0001B0   AB..         MOV     R3,?V0 + 11
   \   0001B2   12....       LCALL   ??sAddrExtCpy?relay
   \   0001B5   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   85..82       MOV     DPL,?V0 + 10
   \   0001BD   85..83       MOV     DPH,?V0 + 11
   \   0001C0   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   0001C3   6403         XRL     A,#0x3
   \   0001C5   7003         JNZ     $+5
   \   0001C7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0001CA   7401         MOV     A,#0x1
   \   0001CC   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   1238                    }
   1239          
   1240                    item++;
   1241                  }
   1242                  else
   1243                  {
   1244                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001CF   E5..         MOV     A,?V0 + 8
   \   0001D1   C3           CLR     C
   \   0001D2   95..         SUBB    A,?V0 + 12
   \   0001D4   4005         JC      ??ZDO_ProcessMgmtLqiReq_16
   1245                      // Start with 1st neighbor
   1246                      index = 0;
   \   0001D6   75..00       MOV     ?V0 + 4,#0x0
   \   0001D9   8018         SJMP    ??ZDO_ProcessMgmtLqiReq_17
   1247                    else
   1248                      // Start with >1st neighbor
   1249                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001DB   E5..         MOV     A,?V0 + 12
   \   0001DD   C3           CLR     C
   \   0001DE   95..         SUBB    A,?V0 + 8
   \   0001E0   F5..         MOV     ?V0 + 4,A
   \   0001E2   800F         SJMP    ??ZDO_ProcessMgmtLqiReq_17
   1250                    break;
   1251                  }
   1252                }
   1253          
   1254                // Loop through neighbor items and finish list
   1255                for ( ; x < numItems; x++ )
   1256                {
   1257                  // Add next neighbor table item
   1258                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1259          
   1260                  // set ZDP_MgmtLqiItem_t fields
   1261                  item->panID    = entry.panId;
   1262                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1263                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1264                  item->nwkAddr  = entry.neighborAddress;
   1265                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1266                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1267                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1268                  item->depth    = 0xFF;
   1269                  item->lqi      = entry.linkInfo.rxLqi;
   1270          
   1271                  if ( item->nwkAddr == 0 )
   1272                  {
   1273                    item->devType = ZDP_MGMT_DT_COORD;
   1274                  }
   1275                  else
   1276                  {
   1277                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001E4   7401         MOV     A,#0x1
   1278                  }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001E6   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001E9   E5..         MOV     A,?V0 + 9
   \   0001EB   C3           CLR     C
   \   0001EC   95..         SUBB    A,?V0 + 5
   \   0001EE   4003         JC      $+5
   \   0001F0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001F3                ; Setup parameters for call to function NLME_GetRequest
   \   0001F3   740E         MOV     A,#0xe
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   AC82         MOV     R4,DPL
   \   0001FA   AD83         MOV     R5,DPH
   \   0001FC   AA..         MOV     R2,?V0 + 4
   \   0001FE   7B00         MOV     R3,#0x0
   \   000200   7987         MOV     R1,#-0x79
   \   000202   12....       LCALL   ??NLME_GetRequest?relay
   \   000205   05..         INC     ?V0 + 4
   \   000207   7418         MOV     A,#0x18
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00020F                ; Setup parameters for call to function osal_memset
   \   00020F   7C08         MOV     R4,#0x8
   \   000211   7D00         MOV     R5,#0x0
   \   000213   79FF         MOV     R1,#-0x1
   \   000215   EE           MOV     A,R6
   \   000216   240A         ADD     A,#0xa
   \   000218   FA           MOV     R2,A
   \   000219   EF           MOV     A,R7
   \   00021A   3400         ADDC    A,#0x0
   \   00021C   FB           MOV     R3,A
   \   00021D   12....       LCALL   ??osal_memset?relay
   \   000220   EE           MOV     A,R6
   \   000221   2412         ADD     A,#0x12
   \   000223   F8           MOV     R0,A
   \   000224   EF           MOV     A,R7
   \   000225   3400         ADDC    A,#0x0
   \   000227   F9           MOV     R1,A
   \   000228   740E         MOV     A,#0xe
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000230   8882         MOV     DPL,R0
   \   000232   8983         MOV     DPH,R1
   \   000234   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000237   EE           MOV     A,R6
   \   000238   2415         ADD     A,#0x15
   \   00023A   F582         MOV     DPL,A
   \   00023C   EF           MOV     A,R7
   \   00023D   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000240   7402         MOV     A,#0x2
   \   000242   F0           MOVX    @DPTR,A
   \   000243   EE           MOV     A,R6
   \   000244   2416         ADD     A,#0x16
   \   000246   F582         MOV     DPL,A
   \   000248   EF           MOV     A,R7
   \   000249   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00024C   7403         MOV     A,#0x3
   \   00024E   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000251   F582         MOV     DPL,A
   \   000253   EF           MOV     A,R7
   \   000254   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000257   74FF         MOV     A,#-0x1
   \   000259   F0           MOVX    @DPTR,A
   \   00025A   741D         MOV     A,#0x1d
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   C0E0         PUSH    A
   \   000262   EE           MOV     A,R6
   \   000263   2419         ADD     A,#0x19
   \   000265   F582         MOV     DPL,A
   \   000267   EF           MOV     A,R7
   \   000268   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00026B   D0E0         POP     A
   \   00026D   F0           MOVX    @DPTR,A
   \   00026E   EE           MOV     A,R6
   \   00026F   2414         ADD     A,#0x14
   \   000271   FA           MOV     R2,A
   \   000272   EF           MOV     A,R7
   \   000273   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000276   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_20
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   00027A   6003         JZ      $+5
   \   00027C   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
   \   00027F   E4           CLR     A
   \   000280   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   1279          
   1280                  item++;
   1281                }
   1282              }
   1283            }
   1284            else
   1285            {
   1286              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000283   75..00       MOV     ?V0 + 5,#0x0
   1287            }
   1288          
   1289            // Send response
   1290            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1291                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000286                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000286   75..00       MOV     ?V0 + 0,#0x0
   \   000289   78..         MOV     R0,#?V0 + 0
   \   00028B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028E   78..         MOV     R0,#?V0 + 6
   \   000290   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000293   E5..         MOV     A,?V0 + 5
   \   000295   F5..         MOV     ?V0 + 0,A
   \   000297   78..         MOV     R0,#?V0 + 0
   \   000299   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029C   E5..         MOV     A,?V0 + 12
   \   00029E   F5..         MOV     ?V0 + 0,A
   \   0002A0   78..         MOV     R0,#?V0 + 0
   \   0002A2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A5   7405         MOV     A,#0x5
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   FD           MOV     R5,A
   \   0002AC   7C00         MOV     R4,#0x0
   \   0002AE   E5..         MOV     A,?V0 + 14
   \   0002B0   2402         ADD     A,#0x2
   \   0002B2   FA           MOV     R2,A
   \   0002B3   E5..         MOV     A,?V0 + 15
   \   0002B5   3400         ADDC    A,#0x0
   \   0002B7   FB           MOV     R3,A
   \   0002B8   E5..         MOV     A,?V0 + 14
   \   0002BA   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0002BD   E5..         MOV     A,?V0 + 15
   \   0002BF   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   0002C2   12....       LCALL   ??ZDP_MgmtLqiRsp?relay
   \   0002C5   7405         MOV     A,#0x5
   \   0002C7   12....       LCALL   ?DEALLOC_XSTACK8
   1292          
   1293            if ( table )
   \   0002CA   E5..         MOV     A,?V0 + 6
   \   0002CC   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_21
   \   0002CE   E5..         MOV     A,?V0 + 7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0002D0   6007         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1294            {
   1295              osal_mem_free( table );
   \   0002D2                ; Setup parameters for call to function osal_mem_free
   \   0002D2   AA..         MOV     R2,?V0 + 6
   \   0002D4   AB..         MOV     R3,?V0 + 7
   \   0002D6   12....       LCALL   ??osal_mem_free?relay
   1296            }
   1297          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002D9   7425         MOV     A,#0x25
   \   0002DB   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   241A         ADD     A,#0x1a
   \   000008   FE           MOV     R6,A
   \   000009   EF           MOV     A,R7
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FF           MOV     R7,A
   \   00000D   05..         INC     ?V0 + 9
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   EF           MOV     A,R7
   \   000007   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function sAddrExtCpy
   \   000008                ; Setup parameters for call to function sAddrExtCpy
   \   000008   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   00000A   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   00000C   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00000F   12....       LCALL   ??sAddrExtCpy?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine192_0
   \   000006                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003                REQUIRE ??Subroutine198_0
   \   000003                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000003                REQUIRE ??Subroutine199_0
   \   000003                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2404         ADD     A,#0x4
   \   000004   F8           MOV     R0,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
   1298          
   1299          /*********************************************************************
   1300           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1301           *
   1302           * @brief       This function handles parsing the incoming Management
   1303           *              Network Discover request and starts the request.
   1304           *
   1305           * @param       inMsg - incoming message (request)
   1306           *
   1307           * @return      none
   1308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1309          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1310          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1311            NLME_ScanFields_t scan;
   1312            uint8             index;
   1313            uint8             *msg;
   1314          
   1315            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine66 & 0xFFFF
   1316            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_106:
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?L_MOV_TO_X
   1317            msg += 4;
   \   00001C   12....       LCALL   ?Subroutine112 & 0xFFFF
   1318            scan.duration = *msg++;
   \                     ??CrossCallReturnLabel_326:
   \   00001F   C0E0         PUSH    A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   D0E0         POP     A
   \   000028   12....       LCALL   ?Subroutine53 & 0xFFFF
   1319            index         = *msg;
   1320            scan.scanType = ZMAC_ACTIVE_SCAN;
   \                     ??CrossCallReturnLabel_86:
   \   00002B   7405         MOV     A,#0x5
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
   1321            scan.scanApp  = NLME_DISC_SCAN;
   \   000033   7406         MOV     A,#0x6
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   1322          
   1323            // Save off the information to be used for the response
   1324            zdappMgmtNwkDiscReqInProgress          = true;
   \   00003B   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00003E   F0           MOVX    @DPTR,A
   1325            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00003F   7402         MOV     A,#0x2
   \   000041   90....       MOV     DPTR,#(zdappMgmtNwkDiscRspAddr + 8)
   \   000044   12....       LCALL   ?Subroutine46 & 0xFFFF
   1326            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_70:
   \   000047   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   00004A   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00004D   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   1327            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_318:
   \   000050   EA           MOV     A,R2
   \   000051   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000054   F0           MOVX    @DPTR,A
   1328            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000055   E5..         MOV     A,?V0 + 0
   \   000057   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00005A   E5..         MOV     A,?V0 + 1
   \   00005C   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00005F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000062   12....       LCALL   ?Subroutine25 & 0xFFFF
   1329          
   1330            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \                     ??CrossCallReturnLabel_20:
   \   000065   12....       LCALL   ??NLME_NwkDiscReq2?relay
   \   000068   E9           MOV     A,R1
   \   000069   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1331            {
   1332              NLME_NwkDiscTerm();
   \   00006B                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00006B   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1333          
   1334              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1335            }
   1336          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00006E   7407         MOV     A,#0x7
   \   000070   02....       LJMP    ?Subroutine11 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FE           MOV     R6,A
   \   000004                REQUIRE ??Subroutine191_0
   \   000004                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000003                REQUIRE ??Subroutine216_0
   \   000003                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   7904         MOV     R1,#0x4
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_build_uint32?relay
   \   000009   8A..         MOV     ?V0 + 4,R2
   \   00000B   8B..         MOV     ?V0 + 5,R3
   \   00000D   8C..         MOV     ?V0 + 6,R4
   \   00000F   8D..         MOV     ?V0 + 7,R5
   \   000011   22           RET
   1337          
   1338          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1339          /*********************************************************************
   1340           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1341           *
   1342           * @brief       This function finishes the processing of the Management
   1343           *              Network Discover Request and generates the response.
   1344           *
   1345           *   Note:      This function will limit the number of items returned
   1346           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1347           *
   1348           * @param       ResultCountSrcAddr - source of the request
   1349           * @param       msg - pointer to incoming message
   1350           * @param       SecurityUse -
   1351           *
   1352           * @return      none
   1353           */
   1354          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1355                                                   networkDesc_t *NetworkList )
   1356          {
   1357            byte count, i;
   1358            networkDesc_t *newDesc = NULL, *pList = NetworkList;
   1359          
   1360            if ( ZSTACK_ROUTER_BUILD )
   1361            {
   1362              // Look for my PanID.
   1363              while ( pList )
   1364              {
   1365                if ( pList->panId == _NIB.nwkPanId )
   1366                {
   1367                  break;
   1368                }
   1369          
   1370          
   1371                if ( !pList->nextDesc )
   1372                {
   1373                  break;
   1374                }
   1375                pList = pList->nextDesc;
   1376              }
   1377          
   1378          
   1379              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1380              // prepend it.
   1381              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1382              {
   1383                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1384                if ( newDesc )
   1385                {
   1386                  byte pJoin;
   1387          
   1388                  newDesc->panId = _NIB.nwkPanId;
   1389                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1390                  newDesc->beaconOrder = _NIB.beaconOrder;
   1391                  newDesc->superFrameOrder = _NIB.superFrameOrder;
   1392                  newDesc->version = NLME_GetProtocolVersion();
   1393                  newDesc->stackProfile = zgStackProfile;
   1394                  //Extended PanID
   1395                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1396          
   1397                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1398                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1399                                                     INVALID_NODE_ADDR);
   1400          
   1401                  newDesc->nextDesc = NetworkList;
   1402                  NetworkList = newDesc;
   1403                  ResultCount++;
   1404                }
   1405              }
   1406            }
   1407          
   1408            // Calc the count and apply a max count.
   1409            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1410            {
   1411              count = 0;
   1412            }
   1413            else
   1414            {
   1415              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1416              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1417              {
   1418                count = ZDO_MAX_NWKDISC_ITEMS;
   1419              }
   1420          
   1421              // Move the list pointer up to the start index.
   1422              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1423              {
   1424                NetworkList = NetworkList->nextDesc;
   1425              }
   1426            }
   1427          
   1428            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1429                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1430                                zdappMgmtNwkDiscStartIndex,
   1431                                count,
   1432                                NetworkList,
   1433                                false );
   1434          
   1435            if ( ZSTACK_ROUTER_BUILD )
   1436            {
   1437              if ( newDesc != NULL )
   1438              {
   1439                osal_mem_free( newDesc );
   1440              }
   1441            }
   1442          
   1443            NLME_NwkDiscTerm();
   1444          }
   1445          #endif
   1446          
   1447          /*********************************************************************
   1448           * @fn          ZDO_ProcessMgmtRtgReq
   1449           *
   1450           * @brief       This function finishes the processing of the Management
   1451           *              Routing Request and generates the response.
   1452           *
   1453           *   Note:      This function will limit the number of items returned
   1454           *              to ZDO_MAX_RTG_ITEMS items.
   1455           *
   1456           * @param       inMsg - incoming message (request)
   1457           *
   1458           * @return      none
   1459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1460          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1461          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   1462            byte x;
   1463            byte maxNumItems;
   1464            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1465            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V0 + 6,R6
   \   000012   8E..         MOV     ?V0 + 7,R6
   1466            rtgItem_t *pList;
   1467            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000017   FF           MOV     R7,A
   1468          
   1469            // Get the number of table items
   1470            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000018                ; Setup parameters for call to function NLME_GetRequest
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799D         MOV     R1,#-0x63
   \   000028   12....       LCALL   ??NLME_GetRequest?relay
   1471          
   1472            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   C3           CLR     C
   \   000035   9A           SUBB    A,R2
   \   000036   507E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1473            {
   1474              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C3           CLR     C
   \   00003A   9F           SUBB    A,R7
   \   00003B   FE           MOV     R6,A
   1475          
   1476              // limit the size of the list
   1477              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003C   C3           CLR     C
   \   00003D   940B         SUBB    A,#0xb
   \   00003F   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1478              {
   1479                numItems = ZDO_MAX_RTG_ITEMS;
   \   000041   7E0A         MOV     R6,#0xa
   1480              }
   1481          
   1482              // Allocate the memory to build the table
   1483              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   EE           MOV     A,R6
   \   000044   75F006       MOV     B,#0x6
   \   000047   A4           MUL     AB
   \   000048   FA           MOV     R2,A
   \   000049   ABF0         MOV     R3,B
   \   00004B   12....       LCALL   ??osal_mem_alloc?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   8A..         MOV     ?V0 + 6,R2
   \   000054   8B..         MOV     ?V0 + 7,R3
   1484          
   1485              if ( pBuf != NULL )
   \   000056   EA           MOV     A,R2
   \   000057   7001         JNZ     ??ZDO_ProcessMgmtRtgReq_2
   \   000059   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   00005A   6058         JZ      ??ZDO_ProcessMgmtRtgReq_3
   1486              {
   1487                // Convert buffer to list
   1488                pList = (rtgItem_t *)pBuf;
   1489          
   1490                // Loop through items and build list
   1491                for ( x = 0; x < numItems; x++ )
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   8022         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   1492                {
   1493                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1494          
   1495                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1496                  switch( pList->status )
   1497                  {
   1498                    case RT_ACTIVE:
   1499                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000061   E4           CLR     A
   \   000062   800D         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1500                      break;
   1501          
   1502                    case RT_DISC:
   1503                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000064   7401         MOV     A,#0x1
   \   000066   8009         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1504                      break;
   1505          
   1506                    case RT_LINK_FAIL:
   1507                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000068   7402         MOV     A,#0x2
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   F0           MOVX    @DPTR,A
   1508          
   1509                    case RT_INIT:
   1510                    case RT_REPAIR:
   1511                    default:
   1512                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00006F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   F0           MOVX    @DPTR,A
   1513                      break;
   1514                  }
   1515          
   1516                  // Increment pointer to next record
   1517                  pList++;
   \   000076   E5..         MOV     A,?V0 + 0
   \   000078   2406         ADD     A,#0x6
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   E5..         MOV     A,?V0 + 1
   \   00007E   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000081   05..         INC     ?V0 + 2
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   C3           CLR     C
   \   000086   9E           SUBB    A,R6
   \   000087   502D         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000089                ; Setup parameters for call to function NLME_GetRequest
   \   000089   AC..         MOV     R4,?V0 + 0
   \   00008B   AD..         MOV     R5,?V0 + 1
   \   00008D   85....       MOV     ?V0 + 8,?V0 + 2
   \   000090   EF           MOV     A,R7
   \   000091   25..         ADD     A,?V0 + 8
   \   000093   FA           MOV     R2,A
   \   000094   E4           CLR     A
   \   000095   3400         ADDC    A,#0x0
   \   000097   FB           MOV     R3,A
   \   000098   798B         MOV     R1,#-0x75
   \   00009A   12....       LCALL   ??NLME_GetRequest?relay
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   2405         ADD     A,#0x5
   \   0000A1   F8           MOV     R0,A
   \   0000A2   E5..         MOV     A,?V0 + 1
   \   0000A4   12....       LCALL   ?Subroutine123 & 0xFFFF
   1518                }
   1519              }
   \                     ??CrossCallReturnLabel_204:
   \   0000A7   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for ZDO_ProcessMgmtRtgReq>_0`:
   \   0000AA   01           DB        1
   \   0000AB   02           DB        2
   \   0000AC   ....         DW        ??ZDO_ProcessMgmtRtgReq_9
   \   0000AE   ....         DW        ??ZDO_ProcessMgmtRtgReq_5
   \   0000B0   ....         DW        ??ZDO_ProcessMgmtRtgReq_7
   \   0000B2   ....         DW        ??ZDO_ProcessMgmtRtgReq_8
   1520              else
   1521              {
   1522                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   0000B4   7E00         MOV     R6,#0x0
   1523              }
   1524            }
   1525          
   1526            // Send response
   1527            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1528                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000B6                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000B6   75..00       MOV     ?V0 + 0,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   78..         MOV     R0,#?V0 + 6
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F5..         MOV     ?V0 + 0,A
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   EF           MOV     A,R7
   \   0000CC   F5..         MOV     ?V0 + 0,A
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D3   7405         MOV     A,#0x5
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FD           MOV     R5,A
   \   0000DA   7C00         MOV     R4,#0x0
   \   0000DC   E5..         MOV     A,?V0 + 4
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   FA           MOV     R2,A
   \   0000E1   E5..         MOV     A,?V0 + 5
   \   0000E3   3400         ADDC    A,#0x0
   \   0000E5   FB           MOV     R3,A
   \   0000E6   E5..         MOV     A,?V0 + 4
   \   0000E8   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000EB   E5..         MOV     A,?V0 + 5
   \   0000ED   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   0000F0   12....       LCALL   ??ZDP_MgmtRtgRsp?relay
   \   0000F3   7405         MOV     A,#0x5
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
   1529          
   1530            if ( pBuf )
   \   0000F8   E5..         MOV     A,?V0 + 6
   \   0000FA   7002         JNZ     ??ZDO_ProcessMgmtRtgReq_10
   \   0000FC   E5..         MOV     A,?V0 + 7
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000FE   6007         JZ      ??ZDO_ProcessMgmtRtgReq_11
   1531            {
   1532              osal_mem_free( pBuf );
   \   000100                ; Setup parameters for call to function osal_mem_free
   \   000100   AA..         MOV     R2,?V0 + 6
   \   000102   AB..         MOV     R3,?V0 + 7
   \   000104   12....       LCALL   ??osal_mem_free?relay
   1533            }
   1534          }
   \                     ??ZDO_ProcessMgmtRtgReq_11:
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C                REQUIRE ?Subroutine8
   \   00010C                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1535          
   1536          /*********************************************************************
   1537           * @fn          ZDO_ProcessMgmtBindReq
   1538           *
   1539           * @brief       This function finishes the processing of the Management
   1540           *              Bind Request and generates the response.
   1541           *
   1542           *   Note:      This function will limit the number of items returned
   1543           *              to ZDO_MAX_BIND_ITEMS items.
   1544           *
   1545           * @param       inMsg - incoming message (request)
   1546           *
   1547           * @return      none
   1548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1550          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   1551          #if defined ( REFLECTOR )
   1552            byte x;
   1553            uint16 maxNumItems;
   1554            uint16 numItems;
   1555            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   \   000011   75..00       MOV     ?V0 + 1,#0x0
   1556            apsBindingItem_t *pList;
   1557            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000017   F5..         MOV     ?V0 + 4,A
   1558            uint8 status;
   1559          
   1560            // Get the number of table items
   1561            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000019                ; Setup parameters for call to function APSME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   79A3         MOV     R1,#-0x5d
   \   000029   12....       LCALL   ??APSME_GetRequest?relay
   1562          
   1563            if ( maxNumItems > StartIndex )
   \   00002C   85..82       MOV     DPL,?V0 + 4
   \   00002F   AA82         MOV     R2,DPL
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   00003A   C3           CLR     C
   \   00003B   EA           MOV     A,R2
   \   00003C   98           SUBB    A,R0
   \   00003D   E4           CLR     A
   \   00003E   99           SUBB    A,R1
   \   00003F   4003         JC      $+5
   \   000041   02....       LJMP    ??ZDO_ProcessMgmtBindReq_0 & 0xFFFF
   1564            {
   1565              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   9A           SUBB    A,R2
   \   00004D   FE           MOV     R6,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   9400         SUBB    A,#0x0
   \   000052   FF           MOV     R7,A
   1566            }
   1567            else
   1568            {
   1569              numItems = 0;
   1570            }
   1571          
   1572            // limit the size of the list
   1573            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000053   C3           CLR     C
   \   000054   EE           MOV     A,R6
   \   000055   9404         SUBB    A,#0x4
   \   000057   EF           MOV     A,R7
   \   000058   9400         SUBB    A,#0x0
   \   00005A   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1574            {
   1575              numItems = ZDO_MAX_BIND_ITEMS;
   \   00005C   7E03         MOV     R6,#0x3
   \   00005E   7F00         MOV     R7,#0x0
   \   000060   8006         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1576            }
   1577          
   1578            // Allocate the memory to build the table
   1579            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000062   EE           MOV     A,R6
   \   000063   7001         JNZ     ??ZDO_ProcessMgmtBindReq_3
   \   000065   EF           MOV     A,R7
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000066   605C         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   EA           MOV     A,R2
   \   00006D   75F015       MOV     B,#0x15
   \   000070   A4           MUL     AB
   \   000071   FA           MOV     R2,A
   \   000072   ACF0         MOV     R4,B
   \   000074   75F015       MOV     B,#0x15
   \   000077   EB           MOV     A,R3
   \   000078   A4           MUL     AB
   \   000079   2C           ADD     A,R4
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   ??osal_mem_alloc?relay
   \   00007E   8A..         MOV     ?V0 + 2,R2
   \   000080   8B..         MOV     ?V0 + 3,R3
   \   000082   8A..         MOV     ?V0 + 0,R2
   \   000084   8B..         MOV     ?V0 + 1,R3
   \   000086   EA           MOV     A,R2
   \   000087   7001         JNZ     ??ZDO_ProcessMgmtBindReq_4
   \   000089   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00008A   6038         JZ      ??ZDO_ProcessMgmtBindReq_0
   1580            {
   1581              status = ZSuccess;
   \   00008C   75..00       MOV     ?V0 + 5,#0x0
   1582          
   1583              // Convert buffer to list
   1584              pList = (apsBindingItem_t *)pBuf;
   1585          
   1586              // Loop through items and build list
   1587              for ( x = 0; x < numItems; x++ )
   \   00008F   75..00       MOV     ?V0 + 6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000092   85....       MOV     ?V0 + 8,?V0 + 6
   \   000095   C3           CLR     C
   \   000096   E5..         MOV     A,?V0 + 8
   \   000098   9E           SUBB    A,R6
   \   000099   E4           CLR     A
   \   00009A   9F           SUBB    A,R7
   \   00009B   502C         JNC     ??ZDO_ProcessMgmtBindReq_6
   1588              {
   1589                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   00009D                ; Setup parameters for call to function APSME_GetRequest
   \   00009D   AC..         MOV     R4,?V0 + 2
   \   00009F   AD..         MOV     R5,?V0 + 3
   \   0000A1   85....       MOV     ?V0 + 10,?V0 + 6
   \   0000A4   85....       MOV     ?V0 + 8,?V0 + 4
   \   0000A7   E5..         MOV     A,?V0 + 8
   \   0000A9   25..         ADD     A,?V0 + 10
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E4           CLR     A
   \   0000AD   3400         ADDC    A,#0x0
   \   0000AF   FB           MOV     R3,A
   \   0000B0   79A2         MOV     R1,#-0x5e
   \   0000B2   12....       LCALL   ??APSME_GetRequest?relay
   1590                pList++;
   \   0000B5   E5..         MOV     A,?V0 + 2
   \   0000B7   2415         ADD     A,#0x15
   \   0000B9   F5..         MOV     ?V0 + 2,A
   \   0000BB   E5..         MOV     A,?V0 + 3
   \   0000BD   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   1591              }
   \                     ??CrossCallReturnLabel_529:
   \   0000C0   05..         INC     ?V0 + 6
   \   0000C2   80CE         SJMP    ??ZDO_ProcessMgmtBindReq_5
   1592          
   1593            }
   1594            else
   1595            {
   1596              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000C4   75..8B       MOV     ?V0 + 5,#-0x75
   1597              numItems = 0;
   \   0000C7   7E00         MOV     R6,#0x0
   1598            }
   1599          
   1600            // Send response
   1601            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1602                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000C9                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000C9   75..00       MOV     ?V0 + 2,#0x0
   \   0000CC   78..         MOV     R0,#?V0 + 2
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   EE           MOV     A,R6
   \   0000D7   F5..         MOV     ?V0 + 2,A
   \   0000D9   78..         MOV     R0,#?V0 + 2
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   E5..         MOV     A,?V0 + 4
   \   0000E0   F5..         MOV     ?V0 + 2,A
   \   0000E2   78..         MOV     R0,#?V0 + 2
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FD           MOV     R5,A
   \   0000EE   AC..         MOV     R4,?V0 + 5
   \   0000F0   E5..         MOV     A,?V0 + 12
   \   0000F2   2402         ADD     A,#0x2
   \   0000F4   FA           MOV     R2,A
   \   0000F5   E5..         MOV     A,?V0 + 13
   \   0000F7   3400         ADDC    A,#0x0
   \   0000F9   FB           MOV     R3,A
   \   0000FA   E5..         MOV     A,?V0 + 12
   \   0000FC   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000FF   E5..         MOV     A,?V0 + 13
   \   000101   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000104   12....       LCALL   ??ZDP_MgmtBindRsp?relay
   \   000107   7405         MOV     A,#0x5
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   1603          
   1604            if ( pBuf )
   \   00010C   E5..         MOV     A,?V0 + 0
   \   00010E   7002         JNZ     ??ZDO_ProcessMgmtBindReq_7
   \   000110   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000112   6007         JZ      ??ZDO_ProcessMgmtBindReq_8
   1605            {
   1606              osal_mem_free( pBuf );
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV     R2,?V0 + 0
   \   000116   AB..         MOV     R3,?V0 + 1
   \   000118   12....       LCALL   ??osal_mem_free?relay
   1607            }
   1608          #else
   1609            (void)inMsg;
   1610          #endif
   1611          }
   \                     ??ZDO_ProcessMgmtBindReq_8:
   \   00011B   7402         MOV     A,#0x2
   \   00011D   02....       LJMP    ?Subroutine7 & 0xFFFF
   1612          
   1613          /*********************************************************************
   1614           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1615           *
   1616           * @brief       This function finishes the processing of the Management
   1617           *              Direct Join Request and generates the response.
   1618           *
   1619           * @param       inMsg - incoming message (request)
   1620           *
   1621           * @return      none
   1622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1623          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1624          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine157 & 0xFFFF
   1625            uint8 *deviceAddr;
   1626            uint8 capInfo;
   1627            uint8 stat;
   1628          
   1629            // Parse the message
   1630            deviceAddr = inMsg->asdu;
   1631            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1632          
   1633            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_339:
   \   00000D   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??NLME_DirectJoinRequest?relay
   \   00001D   E9           MOV     A,R1
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   F0           MOVX    @DPTR,A
   1634          
   1635            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0 + 0,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   8582..       MOV     ?V0 + 0,DPL
   \   000035   8583..       MOV     ?V0 + 1,DPH
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..35       MOV     ?V0 + 0,#0x35
   \   000040   75..80       MOV     ?V0 + 1,#-0x80
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7901         MOV     R1,#0x1
   \   00004A   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1636          }
   \   000050                REQUIRE ?Subroutine12
   \   000050                ; // Fall through to label ?Subroutine12

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine182_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine194_0
   \   000004                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003                REQUIRE ??Subroutine195_0
   \   000003                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005                REQUIRE ??Subroutine196_0
   \   000005                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000003   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000006                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET
   1637          
   1638          /*********************************************************************
   1639           * @fn          ZDO_ProcessMgmtLeaveReq
   1640           *
   1641           * @brief       This function processes a Management Leave Request
   1642           *              and generates the response.
   1643           *
   1644           * @param       inMsg - incoming message (request)
   1645           *
   1646           * @return      none
   1647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1648          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1649          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1650            NLME_LeaveReq_t req;
   1651            ZStatus_t       status;
   1652            uint8           option;
   1653            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine105 & 0xFFFF
   1654          
   1655            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1656                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_181:
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000017   E9           MOV     A,R1
   \   000018   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001A                ; Setup parameters for call to function sAddrExtCmp
   \   00001A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001A   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??sAddrExtCmp?relay
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1657            {
   1658              // Remove this device
   1659              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1660            }
   1661            else
   1662            {
   1663              // Remove child device
   1664              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   EE           MOV     A,R6
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EF           MOV     A,R7
   1665            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000040   12....       LCALL   ?Subroutine35 & 0xFFFF
   1666          
   1667            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_48:
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   1668            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000046   A2E6         MOV     C,0xE0 /* A   */.6
   \   000048   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1669            {
   1670              req.removeChildren = TRUE;
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
   1671            }
   1672          
   1673            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000052   EA           MOV     A,R2
   \   000053   A2E7         MOV     C,0xE0 /* A   */.7
   \   000055   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1674            {
   1675               req.rejoin = TRUE;
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
   1676            }
   1677          
   1678            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   00005F   7405         MOV     A,#0x5
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   1679          
   1680            status = NLME_LeaveReq( &req );
   \   000066                ; Setup parameters for call to function NLME_LeaveReq
   \   000066   7401         MOV     A,#0x1
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??NLME_LeaveReq?relay
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   F0           MOVX    @DPTR,A
   1681          
   1682            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00007A                ; Setup parameters for call to function ZDP_SendData
   \   00007A   75..00       MOV     ?V0 + 2,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   7401         MOV     A,#0x1
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   8582..       MOV     ?V0 + 2,DPL
   \   00008A   8583..       MOV     ?V0 + 3,DPH
   \   00008D   78..         MOV     R0,#?V0 + 2
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   75..34       MOV     ?V0 + 2,#0x34
   \   000095   75..80       MOV     ?V0 + 3,#-0x80
   \   000098   78..         MOV     R0,#?V0 + 2
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7901         MOV     R1,#0x1
   \   00009F   E5..         MOV     A,?V0 + 0
   \   0000A1   2402         ADD     A,#0x2
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E5..         MOV     A,?V0 + 1
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   FD           MOV     R5,A
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   240F         ADD     A,#0xf
   \   0000AD   FA           MOV     R2,A
   \   0000AE   E5..         MOV     A,?V0 + 1
   \   0000B0   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   1683          }
   \   0000B6   7406         MOV     A,#0x6
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
   1684          
   1685          
   1686          /*********************************************************************
   1687           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1688           *
   1689           * @brief       This function processes a Management Permit Join Request
   1690           *              and generates the response.
   1691           *
   1692           * @param       inMsg - incoming message (request)
   1693           *
   1694           * @return      none
   1695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1696          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1697          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine157 & 0xFFFF
   1698            uint8 stat;
   1699            uint8 duration;
   1700            uint8 tcsig;
   1701          
   1702            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1703            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1704          
   1705            // Set the network layer permit join duration
   1706            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_340:
   \   00000D   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??NLME_PermitJoiningRequest?relay
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   1707          
   1708            // Handle the Trust Center Significance
   1709            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1710            {
   1711              if ( tcsig == TRUE )
   1712              {
   1713                ZDSecMgrPermitJoining( duration );
   1714              }
   1715            }
   1716          
   1717            // Send a response if unicast
   1718            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   00001C   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   \   000023   E0           MOVX    A,@DPTR
   \   000024   64FF         XRL     A,#0xff
   \   000026   7004         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   64FF         XRL     A,#0xff
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002C   602B         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1719            {
   1720              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002E                ; Setup parameters for call to function ZDP_SendData
   \   00002E   75..00       MOV     ?V0 + 0,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   8582..       MOV     ?V0 + 0,DPL
   \   00003E   8583..       MOV     ?V0 + 1,DPH
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..36       MOV     ?V0 + 0,#0x36
   \   000049   75..80       MOV     ?V0 + 1,#-0x80
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7901         MOV     R1,#0x1
   \   000053   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   1721            }
   \                     ??CrossCallReturnLabel_345:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   1722          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000059   02....       LJMP    ?Subroutine12 & 0xFFFF
   1723          
   1724          /*
   1725           * This function stub allows the next higher layer to be notified of
   1726           * a permit joining timeout.
   1727           */
   1728          /*********************************************************************
   1729           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1730           *
   1731           * @brief       This function stub allows the next higher layer to be
   1732           *              notified of a permit joining timeout. Currently, this
   1733           *              directly bypasses the APS layer.
   1734           *
   1735           * @param       none
   1736           *
   1737           * @return      none
   1738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1739          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1740          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1741            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1742            // Currently, only the ZDSecMgr needs to be notified
   1743            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1744            {
   1745              ZDSecMgrPermitJoiningTimeout();
   1746            }
   1747            #endif
   1748          }
   \   000000   02....       LJMP    ?BRET
   1749          
   1750          /*********************************************************************
   1751           * @fn          ZDO_ProcessUserDescReq
   1752           *
   1753           * @brief       This function finishes the processing of the User
   1754           *              Descriptor Request and generates the response.
   1755           *
   1756           * @param       inMsg - incoming message (request)
   1757           *
   1758           * @return      none
   1759           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1760          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1761          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine64 & 0xFFFF
   1762            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_299:
   \   00000D   F5..         MOV     ?V0 + 4,A
   \   00000F   E9           MOV     A,R1
   \   000010   F5..         MOV     ?V0 + 5,A
   1763            UserDescriptorFormat_t userDesc;
   1764          
   1765            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1766                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000012   EE           MOV     A,R6
   \   000013   240F         ADD     A,#0xf
   \   000015   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000018   EE           MOV     A,R6
   \   000019   2402         ADD     A,#0x2
   \   00001B   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   E0           MOVX    A,@DPTR
   \   000022   65..         XRL     A,?V0 + 4
   \   000024   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   65..         XRL     A,?V0 + 5
   \                     ??ZDO_ProcessUserDescReq_0:
   \   00002A   7061         JNZ     ??ZDO_ProcessUserDescReq_1
   \   00002C                ; Setup parameters for call to function osal_nv_read
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   8582..       MOV     ?V0 + 6,DPL
   \   000035   8583..       MOV     ?V0 + 7,DPH
   \   000038   78..         MOV     R0,#?V0 + 6
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..11       MOV     ?V0 + 6,#0x11
   \   000040   75..00       MOV     ?V0 + 7,#0x0
   \   000043   78..         MOV     R0,#?V0 + 6
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV     R4,#0x0
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   7A81         MOV     R2,#-0x7f
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   12....       LCALL   ??osal_nv_read?relay
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   7032         JNZ     ??ZDO_ProcessUserDescReq_1
   1767            {
   1768              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00005B                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00005B   75..00       MOV     ?V0 + 6,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 6
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   7401         MOV     A,#0x1
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   8582..       MOV     ?V0 + 6,DPL
   \   00006B   8583..       MOV     ?V0 + 7,DPH
   \   00006E   78..         MOV     R0,#?V0 + 6
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   AC..         MOV     R4,?V0 + 4
   \   000075   AD..         MOV     R5,?V0 + 5
   \   000077   AA..         MOV     R2,?V0 + 0
   \   000079   AB..         MOV     R3,?V0 + 1
   \   00007B   85..82       MOV     DPL,?V0 + 2
   \   00007E   85..83       MOV     DPH,?V0 + 3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??ZDP_UserDescRsp?relay
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   802A         SJMP    ??ZDO_ProcessUserDescReq_2
   1769            }
   1770            else
   1771            {
   1772              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1773                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   00008D                ; Setup parameters for call to function ZDP_GenericRsp
   \   00008D   75..11       MOV     ?V0 + 6,#0x11
   \   000090   75..80       MOV     ?V0 + 7,#-0x80
   \   000093   78..         MOV     R0,#?V0 + 6
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   12....       LCALL   ?Subroutine117 & 0xFFFF
   1774            }
   \                     ??CrossCallReturnLabel_293:
   \   0000A0   FD           MOV     R5,A
   \   0000A1   7C84         MOV     R4,#-0x7c
   \   0000A3   AA..         MOV     R2,?V0 + 0
   \   0000A5   AB..         MOV     R3,?V0 + 1
   \   0000A7   85..82       MOV     DPL,?V0 + 2
   \   0000AA   85..83       MOV     DPH,?V0 + 3
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F9           MOV     R1,A
   \   0000AF   12....       LCALL   ??ZDP_GenericRsp?relay
   \   0000B2   7404         MOV     A,#0x4
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   1775          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000B7   7411         MOV     A,#0x11
   \   0000B9   02....       LJMP    ?Subroutine11 & 0xFFFF
   1776          
   1777          /*********************************************************************
   1778           * @fn          ZDO_ProcessUserDescSet
   1779           *
   1780           * @brief       This function finishes the processing of the User
   1781           *              Descriptor Set and generates the response.
   1782           *
   1783           * @param       inMsg - incoming message (request)
   1784           *
   1785           * @return      none
   1786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1787          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1788          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1789            uint8 *msg;
   1790            uint16 aoi;
   1791            UserDescriptorFormat_t userDesc;
   1792            uint8 outMsg[3];
   1793            uint8 status;
   1794          
   1795            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine79 & 0xFFFF
   1796            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_129:
   \   000011   EC           MOV     A,R4
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   EB           MOV     A,R3
   \   000015   F5..         MOV     ?V0 + 1,A
   1797          
   1798            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000017   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65..         XRL     A,?V0 + 0
   \   00001D   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000023   6003         JZ      $+5
   \   000025   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1799            {
   1800              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   C3           CLR     C
   \   00003A   9410         SUBB    A,#0x10
   \   00003C   5003         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   8002         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000041   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C0E0         PUSH    A
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   12....       LCALL   ?Subroutine49 & 0xFFFF
   1801              msg ++;  // increment one for the length field
   1802          
   1803              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_75:
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A982         MOV     R1,DPL
   \   00005B   AA83         MOV     R2,DPH
   \   00005D   89..         MOV     ?V0 + 4,R1
   \   00005F   8A..         MOV     ?V0 + 5,R2
   \   000061   75..00       MOV     ?V0 + 6,#0x0
   \   000064   78..         MOV     R0,#?V0 + 4
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   7408         MOV     A,#0x8
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FC           MOV     R4,A
   \   000070   7D00         MOV     R5,#0x0
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AA82         MOV     R2,DPL
   \   000079   AB83         MOV     R3,DPH
   \   00007B   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   1804              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000081                ; Setup parameters for call to function osal_nv_write
   \   000081   7405         MOV     A,#0x5
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   8582..       MOV     ?V0 + 2,DPL
   \   000089   8583..       MOV     ?V0 + 3,DPH
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   75..11       MOV     ?V0 + 2,#0x11
   \   000094   75..00       MOV     ?V0 + 3,#0x0
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7C00         MOV     R4,#0x0
   \   00009E   7D00         MOV     R5,#0x0
   \   0000A0   7A81         MOV     R2,#-0x7f
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   12....       LCALL   ??osal_nv_write?relay
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   1805              if ( userDesc.len != 0 )
   \   0000AC   7405         MOV     A,#0x5
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000B5   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1806              {
   1807                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   D2E4         SETB    0xE0 /* A   */.4
   \   0000BA   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1808              }
   1809              else
   1810              {
   1811                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000BF   F0           MOVX    @DPTR,A
   1812              }
   1813          
   1814              status = ZDP_SUCCESS;
   \   0000C0   E4           CLR     A
   \   0000C1   8002         SJMP    ??ZDO_ProcessUserDescSet_6
   1815            }
   1816            else
   1817            {
   1818              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000C3   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   F0           MOVX    @DPTR,A
   1819            }
   1820          
   1821            outMsg[0] = status;
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C0E0         PUSH    A
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
   1822            outMsg[1] = LO_UINT16( aoi );
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E5..         MOV     A,?V0 + 0
   \   0000DE   F0           MOVX    @DPTR,A
   1823            outMsg[2] = LO_UINT16( aoi );
   \   0000DF   7404         MOV     A,#0x4
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E5..         MOV     A,?V0 + 0
   \   0000E6   F0           MOVX    @DPTR,A
   1824          
   1825            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1826                         inMsg->SecurityUse );
   \   0000E7                ; Setup parameters for call to function ZDP_SendData
   \   0000E7   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000EA   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   7403         MOV     A,#0x3
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   8582..       MOV     ?V0 + 0,DPL
   \   0000F8   8583..       MOV     ?V0 + 1,DPH
   \   0000FB   78..         MOV     R0,#?V0 + 0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   75..14       MOV     ?V0 + 0,#0x14
   \   000103   75..80       MOV     ?V0 + 1,#-0x80
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7903         MOV     R1,#0x3
   \   00010D   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   1827          }
   \   000113   7416         MOV     A,#0x16
   \   000115                REQUIRE ?Subroutine3
   \   000115                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine200_0
   \   000003                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1828          
   1829          /*********************************************************************
   1830           * @fn          ZDO_ProcessDeviceAnnce
   1831           *
   1832           * @brief       This function processes a device annouce message.
   1833           *
   1834           * @param       inMsg - incoming message
   1835           *
   1836           * @return      none
   1837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1838          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1839          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 32
   \   000004   74E0         MOV     A,#-0x20
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1840            ZDO_DeviceAnnce_t Annce;
   1841            AddrMgrEntry_t addrEntry;
   1842            uint8 parentExt[Z_EXTADDR_LEN];
   1843          
   1844            // Parse incoming message
   1845            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   000009                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000009   7415         MOV     A,#0x15
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   AC82         MOV     R4,DPL
   \   000010   AD83         MOV     R5,DPH
   \   000012   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   1846          
   1847            if ( ZSTACK_END_DEVICE_BUILD )
   1848            {
   1849              // Make sure the message didn't come from myself - end device only
   1850              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   1851              {
   1852                return;
   1853              }
   1854            }
   1855          
   1856          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1857            // Clean up the neighbor table
   1858            nwkNeighborRemoveAllStranded();
   1859          
   1860            // If address conflict is detected, no need to update the address manager
   1861            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   1862            {
   1863              return;
   1864            }
   1865          #endif
   1866          
   1867          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1868            // Check for parent's address
   1869            NLME_GetCoordExtAddr( parentExt );
   1870            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   1871            {
   1872              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   1873              {
   1874                // Set the Parent's MAC's new short address
   1875                _NIB.nwkCoordAddress = Annce.nwkAddr;
   1876                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   1877              }
   1878            }
   1879          
   1880            if ( ZSTACK_ROUTER_BUILD )
   1881            {
   1882              // If the device annce comes from a end device child that has moved
   1883              // to another parent, remove it from associated device list
   1884          
   1885              // If the dev annce is coming from other device's children,
   1886              // (The dev annce from its own children shall be unicast to itself,
   1887              // So check the mac destination address)
   1888              // Remove it from the associated device list. If it is not
   1889              // a child, no action will be taken in AssocRemove() anyway.
   1890              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1891              {
   1892                associated_devices_t *dev_ptr;
   1893          
   1894                // If it's an end device child
   1895                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1896                if ( dev_ptr )
   1897                {
   1898                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1899                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1900                  {
   1901                    AssocRemove( Annce.extAddr );
   1902                  }
   1903                }
   1904              }
   1905          
   1906              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1907              {
   1908                // If an associated device is found with matched extended Address,
   1909                // update its short address
   1910                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1911                {
   1912                  // Update the neighbor table
   1913                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   1914          
   1915                  // Set event to save NV
   1916                  ZDApp_NVUpdate();
   1917                }
   1918              }
   1919            }
   1920            
   1921            // Assume that the device has moved, remove existing routing entries
   1922            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   1923            
   1924          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1925          
   1926          
   1927            // Fill in the extended address in address manager if we don't have it already.
   1928            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000015   E4           CLR     A
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   F0           MOVX    @DPTR,A
   1929            addrEntry.nwkAddr = Annce.nwkAddr;
   \   00001D   7415         MOV     A,#0x15
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E9           MOV     A,R1
   \   00002C   12....       LCALL   ?Subroutine25 & 0xFFFF
   1930            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_21:
   \   00002F   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000032   E9           MOV     A,R1
   \   000033   603B         JZ      ??CrossCallReturnLabel_229
   1931            {
   1932              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000035                ; Setup parameters for call to function osal_memset
   \   000035   7C08         MOV     R4,#0x8
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7900         MOV     R1,#0x0
   \   00003B   740D         MOV     A,#0xd
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   AA82         MOV     R2,DPL
   \   000042   AB83         MOV     R3,DPH
   \   000044   12....       LCALL   ??osal_memset?relay
   1933              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000047                ; Setup parameters for call to function sAddrExtCmp
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AC82         MOV     R4,DPL
   \   00004E   AD83         MOV     R5,DPH
   \   000050   740D         MOV     A,#0xd
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   12....       LCALL   ??sAddrExtCmp?relay
   \   00005C   E9           MOV     A,R1
   \   00005D   6011         JZ      ??CrossCallReturnLabel_229
   1934              {
   1935                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   00005F                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00005F   7417         MOV     A,#0x17
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AC82         MOV     R4,DPL
   \   000066   AD83         MOV     R5,DPH
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine133 & 0xFFFF
   1936                AddrMgrEntryUpdate( &addrEntry );
   1937              }
   1938            }
   1939          }
   \                     ??CrossCallReturnLabel_229:
   \   000070   7420         MOV     A,#0x20
   \   000072   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET
   1940          
   1941          /*********************************************************************
   1942           * @fn          ZDO_BuildSimpleDescBuf
   1943           *
   1944           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1945           *
   1946           * @param       buf  - pointer to a byte array big enough for data.
   1947           * @param       desc - SimpleDescriptionFormat_t *
   1948           *
   1949           * @return      none
   1950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1951          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1952          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1953            byte cnt;
   1954            uint16 *ptr;
   1955          
   1956            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine89 & 0xFFFF
   1957            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_152:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
   1958            *buf++ = LO_UINT16( desc->AppProfId );
   1959            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_17:
   \   000018   EC           MOV     A,R4
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000020   12....       LCALL   ?Subroutine24 & 0xFFFF
   1960            *buf++ = LO_UINT16( desc->AppDeviceId );
   1961          
   1962            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_18:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C4           SWAP    A
   \   00002E   54F0         ANL     A,#0xf0
   \   000030   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   1963          
   1964            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_362:
   \   000033   EC           MOV     A,R4
   \   000034   2406         ADD     A,#0x6
   \   000036   08           INC     R0
   \   000037   08           INC     R0
   \   000038   08           INC     R0
   \   000039   ED           MOV     A,R5
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F9           MOV     R1,A
   \   00003D   88..         MOV     ?V0 + 0,R0
   \   00003F   89..         MOV     ?V0 + 1,R1
   \   000041   8882         MOV     DPL,R0
   \   000043   F583         MOV     DPH,A
   \   000045   12....       LCALL   ?Subroutine138 & 0xFFFF
   1965            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_363:
   \   000048   8C82         MOV     DPL,R4
   \   00004A   8D83         MOV     DPH,R5
   \   00004C   12....       LCALL   ?Subroutine101 & 0xFFFF
   1966            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_173:
   \   00004F   800B         SJMP    ??CrossCallReturnLabel_27
   1967            {
   1968              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ?Subroutine92 & 0xFFFF
   1969              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_158:
   \   000059   12....       LCALL   ?Subroutine30 & 0xFFFF
   1970            }
   \                     ??CrossCallReturnLabel_27:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   A882         MOV     R0,DPL
   \   000063   A983         MOV     R1,DPH
   \   000065   85..82       MOV     DPL,?V0 + 0
   \   000068   85..83       MOV     DPH,?V0 + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F5..         MOV     ?V0 + 3,A
   \   00006E   E5..         MOV     A,?V0 + 2
   \   000070   C3           CLR     C
   \   000071   95..         SUBB    A,?V0 + 3
   \   000073   40DC         JC      ??ZDO_BuildSimpleDescBuf_0
   1971          
   1972            *buf++ = desc->AppNumOutClusters;
   \   000075   EC           MOV     A,R4
   \   000076   2409         ADD     A,#0x9
   \   000078   FE           MOV     R6,A
   \   000079   ED           MOV     A,R5
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   FF           MOV     R7,A
   \   00007D   8E..         MOV     ?V0 + 0,R6
   \   00007F   8F..         MOV     ?V0 + 1,R7
   \   000081   8E82         MOV     DPL,R6
   \   000083   F583         MOV     DPH,A
   \   000085   12....       LCALL   ?Subroutine92 & 0xFFFF
   1973            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_159:
   \   000088   8C82         MOV     DPL,R4
   \   00008A   8D83         MOV     DPH,R5
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ?Subroutine101 & 0xFFFF
   1974            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_174:
   \   000092   800B         SJMP    ??CrossCallReturnLabel_28
   1975            {
   1976              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   12....       LCALL   ?Subroutine89 & 0xFFFF
   1977              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_153:
   \   00009C   12....       LCALL   ?Subroutine30 & 0xFFFF
   1978            }
   \                     ??CrossCallReturnLabel_28:
   \   00009F   85..82       MOV     DPL,?V0 + 0
   \   0000A2   85..83       MOV     DPH,?V0 + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FC           MOV     R4,A
   \   0000A7   E5..         MOV     A,?V0 + 2
   \   0000A9   C3           CLR     C
   \   0000AA   9C           SUBB    A,R4
   \   0000AB   40E7         JC      ??ZDO_BuildSimpleDescBuf_1
   1979          }
   \   0000AD   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00000A   75..00       MOV     ?V0 + 2,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   E8           MOV     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000007   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00000A   05..         INC     ?V0 + 2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine201_0
   \   000001                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET
   1980          
   1981          /*********************************************************************
   1982           * @fn      ZDO_MatchEndDeviceBind()
   1983           *
   1984           * @brief
   1985           *
   1986           *   Called to match end device binding requests
   1987           *
   1988           * @param  bindReq  - binding request information
   1989           * @param  SecurityUse - Security enable/disable
   1990           *
   1991           * @return  none
   1992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1993          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   1994          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1995            zAddrType_t dstAddr;
   1996            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   1997            uint8 status;
   1998          
   1999            // Is this the first request?
   2000            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7002         JNZ     ??ZDO_MatchEndDeviceBind_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000019   703E         JNZ     ??ZDO_MatchEndDeviceBind_1
   2001            {
   2002              // Create match info structure
   2003              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A37         MOV     R2,#0x37
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000022   12....       LCALL   ?Subroutine33 & 0xFFFF
   2004              if ( matchED )
   \                     ??CrossCallReturnLabel_38:
   \   000025   90....       MOV     DPTR,#matchED
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7002         JNZ     ??ZDO_MatchEndDeviceBind_2
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00002D   6019         JZ      ??ZDO_MatchEndDeviceBind_3
   2005              {
   2006                // Clear the structure
   2007                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C37         MOV     R4,#0x37
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??osal_memset?relay
   2008          
   2009                // Copy the first request's information
   2010                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000038                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FD           MOV     R5,A
   \   00003C   90....       MOV     DPTR,#matchED
   \   00003F   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000042   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000045   E9           MOV     A,R1
   \   000046   7005         JNZ     ??ZDO_MatchEndDeviceBind_4
   2011                {
   2012          
   2013                  status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000048   7488         MOV     A,#-0x78
   \   00004A   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2014                  sendRsp = TRUE;
   2015                }
   2016              }
   2017              else
   2018              {
   2019                status = ZDP_NO_ENTRY;
   2020                sendRsp = TRUE;
   2021              }
   2022          
   2023              if ( !sendRsp )
   2024              {
   2025                // Set into the correct state
   2026                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00004D   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   2027          
   2028                // Setup the timeout
   2029                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000053                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000053   12....       LCALL   ?Subroutine94 & 0xFFFF
   2030              }
   2031            }
   \                     ??CrossCallReturnLabel_162:
   \   000056   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   2032            else
   2033            {
   2034                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000059   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   F0           MOVX    @DPTR,A
   2035          
   2036                // Copy the 2nd request's information
   2037                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   00005F                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00005F   EE           MOV     A,R6
   \   000060   FC           MOV     R4,A
   \   000061   EF           MOV     A,R7
   \   000062   FD           MOV     R5,A
   \   000063   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000066   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000069   E9           MOV     A,R1
   \   00006A   700C         JNZ     ??ZDO_MatchEndDeviceBind_7
   2038                {
   2039                  status = ZDP_NO_ENTRY;
   \   00006C   7488         MOV     A,#-0x78
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   F0           MOVX    @DPTR,A
   2040                  sendRsp = TRUE;
   \   000075   75..01       MOV     ?V0 + 0,#0x1
   2041                }
   2042          
   2043                // Make a source match for ed1
   2044                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2045                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2046                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   000078                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000078   75....       MOV     ?V0 + 2,#(ZDOBuildBuf & 0xff)
   \   00007B   75....       MOV     ?V0 + 3,#((ZDOBuildBuf >> 8) & 0xff)
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   90....       MOV     DPTR,#matchED
   \   000086   E0           MOVX    A,@DPTR
   \   000087   2429         ADD     A,#0x29
   \   000089   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   00008C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008F   90....       MOV     DPTR,#matchED
   \   000092   E0           MOVX    A,@DPTR
   \   000093   2428         ADD     A,#0x28
   \   000095   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000098   2415         ADD     A,#0x15
   \   00009A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00009D   2414         ADD     A,#0x14
   \   00009F   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   C0E0         PUSH    A
   \   0000A8   90....       MOV     DPTR,#matchED
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   2431         ADD     A,#0x31
   \   0000AE   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   0000B1   D0E0         POP     A
   \   0000B3   12....       LCALL   ?Subroutine50 & 0xFFFF
   2047                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_78:
   \   0000B6   2431         ADD     A,#0x31
   \   0000B8   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   0000BB   75....       MOV     ?V0 + 4,#(ZDOBuildBuf & 0xff)
   \   0000BE   75....       MOV     ?V0 + 5,#((ZDOBuildBuf >> 8) & 0xff)
   \   0000C1   75..00       MOV     ?V0 + 6,#0x0
   \   0000C4   602E         JZ      ??ZDO_MatchEndDeviceBind_8
   2048                {
   2049                  // Save the match list
   2050                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   2432         ADD     A,#0x32
   \   0000CC   12....       LCALL   ?Subroutine15 & 0xFFFF
   2051                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_472:
   \   0000CF   FA           MOV     R2,A
   \   0000D0   7001         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   0000D2   EB           MOV     A,R3
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0000D3   6013         JZ      ??ZDO_MatchEndDeviceBind_10
   2052                  {
   2053                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DA   90....       MOV     DPTR,#matchED
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   2431         ADD     A,#0x31
   \   0000E0   12....       LCALL   ?Subroutine60 & 0xFFFF
   2054                  }
   \                     ??CrossCallReturnLabel_391:
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   800C         SJMP    ??ZDO_MatchEndDeviceBind_8
   2055                  else
   2056                  {
   2057                    // Allocation error, stop
   2058                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0000E8   7488         MOV     A,#-0x78
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   F0           MOVX    @DPTR,A
   2059                    sendRsp = TRUE;
   \   0000F1   75..01       MOV     ?V0 + 0,#0x1
   2060                  }
   2061                }
   2062          
   2063                // Make a source match for ed2
   2064                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2065                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2066                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   0000F4                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000F4   78..         MOV     R0,#?V0 + 2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   2412         ADD     A,#0x12
   \   0000FF   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000102   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000105   90....       MOV     DPTR,#matchED
   \   000108   E0           MOVX    A,@DPTR
   \   000109   2411         ADD     A,#0x11
   \   00010B   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00010E   242C         ADD     A,#0x2c
   \   000110   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000113   242B         ADD     A,#0x2b
   \   000115   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   E9           MOV     A,R1
   \   00011C   C0E0         PUSH    A
   \   00011E   90....       MOV     DPTR,#matchED
   \   000121   E0           MOVX    A,@DPTR
   \   000122   2434         ADD     A,#0x34
   \   000124   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000127   D0E0         POP     A
   \   000129   12....       LCALL   ?Subroutine50 & 0xFFFF
   2067                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_79:
   \   00012C   2434         ADD     A,#0x34
   \   00012E   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000131   6020         JZ      ??ZDO_MatchEndDeviceBind_11
   2068                {
   2069                  // Save the match list
   2070                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000133                ; Setup parameters for call to function osal_mem_alloc
   \   000133   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000136   E0           MOVX    A,@DPTR
   \   000137   2435         ADD     A,#0x35
   \   000139   12....       LCALL   ?Subroutine15 & 0xFFFF
   2071                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_473:
   \   00013C   FA           MOV     R2,A
   \   00013D   7001         JNZ     ??ZDO_MatchEndDeviceBind_12
   \   00013F   EB           MOV     A,R3
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000140   602B         JZ      ??ZDO_MatchEndDeviceBind_13
   2072                  {
   2073                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000142                ; Setup parameters for call to function osal_memcpy
   \   000142   78..         MOV     R0,#?V0 + 4
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000147   90....       MOV     DPTR,#matchED
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   2434         ADD     A,#0x34
   \   00014D   12....       LCALL   ?Subroutine60 & 0xFFFF
   2074                  }
   \                     ??CrossCallReturnLabel_392:
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   2075                  else
   2076                  {
   2077                    // Allocation error, stop
   2078                    status = ZDP_NO_ENTRY;
   2079                    sendRsp = TRUE;
   2080                  }
   2081                }
   2082          
   2083                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000153   E5..         MOV     A,?V0 + 0
   \   000155   701F         JNZ     ??ZDO_MatchEndDeviceBind_14
   \   000157   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00015A   7005         JNZ     ??ZDO_MatchEndDeviceBind_15
   \   00015C   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   00015F   6015         JZ      ??ZDO_MatchEndDeviceBind_14
   2084                {
   2085                  // Do the first unbind/bind state
   2086                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_15:
   \   000161                ; Setup parameters for call to function ZDMatchSendState
   \   000161   7B00         MOV     R3,#0x0
   \   000163   7A00         MOV     R2,#0x0
   \   000165   7900         MOV     R1,#0x0
   \   000167   12....       LCALL   ??ZDMatchSendState?relay
   \   00016A   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   2087                }
   \                     ??ZDO_MatchEndDeviceBind_13:
   \   00016D   7488         MOV     A,#-0x78
   \   00016F   85..82       MOV     DPL,?XSP + 0
   \   000172   85..83       MOV     DPH,?XSP + 1
   \   000175   F0           MOVX    @DPTR,A
   2088                else
   2089                {
   2090                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_14:
   \   000176   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000178   85..82       MOV     DPL,?XSP + 0
   \   00017B   85..83       MOV     DPH,?XSP + 1
   \   00017E   F0           MOVX    @DPTR,A
   2091                  sendRsp = TRUE;
   2092                }
   2093            }
   2094          
   2095            if ( sendRsp )
   2096            {
   2097              // send response to this requester
   2098              dstAddr.addrMode = Addr16Bit;
   \   00017F   7409         MOV     A,#0x9
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   7402         MOV     A,#0x2
   \   000186   12....       LCALL   ?Subroutine40 & 0xFFFF
   2099              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_58:
   \   000189   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2100              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_319:
   \   000192                ; Setup parameters for call to function ZDP_SendData
   \   000192   8E82         MOV     DPL,R6
   \   000194   8F83         MOV     DPH,R7
   \   000196   A3           INC     DPTR
   \   000197   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019D   7401         MOV     A,#0x1
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   8582..       MOV     ?V0 + 0,DPL
   \   0001A5   8583..       MOV     ?V0 + 1,DPH
   \   0001A8   78..         MOV     R0,#?V0 + 0
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AD   75..20       MOV     ?V0 + 0,#0x20
   \   0001B0   75..80       MOV     ?V0 + 1,#-0x80
   \   0001B3   78..         MOV     R0,#?V0 + 0
   \   0001B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B8   7901         MOV     R1,#0x1
   \   0001BA   7406         MOV     A,#0x6
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   AC82         MOV     R4,DPL
   \   0001C1   AD83         MOV     R5,DPH
   \   0001C3   EE           MOV     A,R6
   \   0001C4   FA           MOV     R2,A
   \   0001C5   EF           MOV     A,R7
   \   0001C6   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   0001C9   12....       LCALL   ?DEALLOC_XSTACK8
   2101          
   2102              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001CC   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0001CF   703E         JNZ     ??ZDO_MatchEndDeviceBind_16
   2103              {
   2104                // send response to first requester
   2105                dstAddr.addrMode = Addr16Bit;
   \   0001D1   7409         MOV     A,#0x9
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   7402         MOV     A,#0x2
   \   0001D8   12....       LCALL   ?Subroutine50 & 0xFFFF
   2106                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2107                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2108              }
   \                     ??CrossCallReturnLabel_80:
   \   0001DB   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E7   7401         MOV     A,#0x1
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   8582..       MOV     ?V0 + 0,DPL
   \   0001EF   8583..       MOV     ?V0 + 1,DPH
   \   0001F2   78..         MOV     R0,#?V0 + 0
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   75..20       MOV     ?V0 + 0,#0x20
   \   0001FA   75..80       MOV     ?V0 + 1,#-0x80
   \   0001FD   78..         MOV     R0,#?V0 + 0
   \   0001FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000202   7901         MOV     R1,#0x1
   \   000204   7406         MOV     A,#0x6
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00020C   12....       LCALL   ?DEALLOC_XSTACK8
   2109          
   2110              // Process ended - release memory used
   2111              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_16:
   \   00020F                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00020F   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2112            }
   2113          }
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000212   740A         MOV     A,#0xa
   \   000214   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006                REQUIRE ??Subroutine202_0
   \   000006                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000003   FC           MOV     R4,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   18           DEC     R0
   \   000001   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_CompareClusterLists?relay
   \   000008   7404         MOV     A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007                REQUIRE ??Subroutine204_0
   \   000007                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine205_0
   \   000002                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine206_0
   \   000003                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2434         ADD     A,#0x34
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   08           INC     R0
   \   000006   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000003                REQUIRE ??Subroutine207_0
   \   000003                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FD           MOV     R5,A
   \   000007   12....       LCALL   ??osal_memcpy?relay
   \   00000A   7403         MOV     A,#0x3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   7C..         MOV     R4,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff)
   \   000002   7D..         MOV     R5,#((??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff)
   \   000004   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   00000A   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   00000A   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006                REQUIRE ??Subroutine209_0
   \   000006                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2431         ADD     A,#0x31
   \   000006   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine211_0
   \   000001                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000009   6402         XRL     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005   90....       MOV     DPTR,#matchED
   \   000008   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007                REQUIRE ??Subroutine221_0
   \   000007                ; // Fall through to label ??Subroutine221_0
   2114          
   2115          /*********************************************************************
   2116           * @fn      ZDO_RemoveMatchMemory()
   2117           *
   2118           * @brief   Called to clear the memory used for the end device bind.
   2119           *
   2120           * @param  none
   2121           *
   2122           * @return  none
   2123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2124          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2126            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??ZDO_RemoveMatchMemory_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00000C   6073         JZ      ??ZDO_RemoveMatchMemory_1
   2127            {
   2128              if ( matchED->ed2Matched != NULL )
   \   00000E   90....       MOV     DPTR,#matchED
   \   000011   E0           MOVX    A,@DPTR
   \   000012   2435         ADD     A,#0x35
   \   000014   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000017   7001         JNZ     ??ZDO_RemoveMatchMemory_2
   \   000019   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00001A   6003         JZ      ??ZDO_RemoveMatchMemory_3
   2129                osal_mem_free( matchED->ed2Matched );
   \   00001C                ; Setup parameters for call to function osal_mem_free
   \   00001C   12....       LCALL   ??osal_mem_free?relay
   2130              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00001F   90....       MOV     DPTR,#matchED
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2432         ADD     A,#0x32
   \   000025   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000028   7001         JNZ     ??ZDO_RemoveMatchMemory_4
   \   00002A   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00002B   6003         JZ      ??ZDO_RemoveMatchMemory_5
   2131                osal_mem_free( matchED->ed1Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   12....       LCALL   ??osal_mem_free?relay
   2132          
   2133              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000030   90....       MOV     DPTR,#matchED
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2412         ADD     A,#0x12
   \   000036   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000039   7001         JNZ     ??ZDO_RemoveMatchMemory_6
   \   00003B   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_6:
   \   00003C   6003         JZ      ??ZDO_RemoveMatchMemory_7
   2134                osal_mem_free( matchED->ed1.inClusters );
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   12....       LCALL   ??osal_mem_free?relay
   2135          
   2136              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_7:
   \   000041   90....       MOV     DPTR,#matchED
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2415         ADD     A,#0x15
   \   000047   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00004A   7001         JNZ     ??ZDO_RemoveMatchMemory_8
   \   00004C   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_8:
   \   00004D   6003         JZ      ??ZDO_RemoveMatchMemory_9
   2137                osal_mem_free( matchED->ed1.outClusters );
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   ??osal_mem_free?relay
   2138          
   2139              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_9:
   \   000052   90....       MOV     DPTR,#matchED
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2429         ADD     A,#0x29
   \   000058   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00005B   7001         JNZ     ??ZDO_RemoveMatchMemory_10
   \   00005D   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_10:
   \   00005E   6003         JZ      ??ZDO_RemoveMatchMemory_11
   2140                osal_mem_free( matchED->ed2.inClusters );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   12....       LCALL   ??osal_mem_free?relay
   2141          
   2142              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_11:
   \   000063   90....       MOV     DPTR,#matchED
   \   000066   E0           MOVX    A,@DPTR
   \   000067   242C         ADD     A,#0x2c
   \   000069   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00006C   7001         JNZ     ??ZDO_RemoveMatchMemory_12
   \   00006E   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_12:
   \   00006F   6003         JZ      ??ZDO_RemoveMatchMemory_13
   2143                osal_mem_free( matchED->ed2.outClusters );
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   12....       LCALL   ??osal_mem_free?relay
   2144          
   2145              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_13:
   \   000074                ; Setup parameters for call to function osal_mem_free
   \   000074   90....       MOV     DPTR,#matchED
   \   000077   12....       LCALL   ?Subroutine70 & 0xFFFF
   2146          
   2147              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_115:
   \   00007A   90....       MOV     DPTR,#matchED
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   2148            }
   2149          }
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000081   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   2150          
   2151          /*********************************************************************
   2152           * @fn      ZDO_CopyMatchInfo()
   2153           *
   2154           * @brief   Called to copy memory used for the end device bind.
   2155           *
   2156           * @param  srcReq - source information
   2157           * @param  dstReq - destination location
   2158           *
   2159           * @return  TRUE if copy was successful.
   2160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2161          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2162          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2163            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V0 + 2,#0x1
   2164          
   2165            // Copy bind information into the match info structure
   2166            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   75..00       MOV     ?V0 + 6,#0x0
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   2167          
   2168            // Initialize the destination cluster pointers
   2169            destReq->inClusters = NULL;
   \   000026   EE           MOV     A,R6
   \   000027   2412         ADD     A,#0x12
   \   000029   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   2170            destReq->outClusters = NULL;
   \   000030   EE           MOV     A,R6
   \   000031   2415         ADD     A,#0x15
   \   000033   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
   2171          
   2172            // Copy input cluster IDs
   2173            if ( srcReq->numInClusters )
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   2411         ADD     A,#0x11
   \   00003E   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000041   603A         JZ      ??ZDO_CopyMatchInfo_0
   2174            {
   2175              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   C3           CLR     C
   \   000044   33           RLC     A
   \   000045   FA           MOV     R2,A
   \   000046   E4           CLR     A
   \   000047   33           RLC     A
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??osal_mem_alloc?relay
   \   00004C   85..82       MOV     DPL,?V0 + 8
   \   00004F   85..83       MOV     DPH,?V0 + 9
   \   000052   12....       LCALL   ?Subroutine33 & 0xFFFF
   2176              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_39:
   \   000055   85..82       MOV     DPL,?V0 + 8
   \   000058   85..83       MOV     DPH,?V0 + 9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   7001         JNZ     ??ZDO_CopyMatchInfo_1
   \   00005F   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_1:
   \   000060   6018         JZ      ??ZDO_CopyMatchInfo_2
   2177              {
   2178                // Copy the clusters
   2179                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2180                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   2412         ADD     A,#0x12
   \   000066   12....       LCALL   ?Subroutine97 & 0xFFFF
   2181              }
   \                     ??CrossCallReturnLabel_167:
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   85..82       MOV     DPL,?V0 + 10
   \   00006F   85..83       MOV     DPH,?V0 + 11
   \   000072   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2182              else
   2183                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_2:
   \   00007A   75..00       MOV     ?V0 + 2,#0x0
   2184            }
   2185          
   2186            // Copy output cluster IDs
   2187            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   2414         ADD     A,#0x14
   \   000081   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000084   6031         JZ      ??ZDO_CopyMatchInfo_3
   2188            {
   2189              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   C3           CLR     C
   \   000087   33           RLC     A
   \   000088   FA           MOV     R2,A
   \   000089   E4           CLR     A
   \   00008A   33           RLC     A
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??osal_mem_alloc?relay
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   12....       LCALL   ?Subroutine33 & 0xFFFF
   2190              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_40:
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   7001         JNZ     ??ZDO_CopyMatchInfo_4
   \   00009E   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_4:
   \   00009F   603F         JZ      ??ZDO_CopyMatchInfo_5
   2191              {
   2192                // Copy the clusters
   2193                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2194                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   0000A1                ; Setup parameters for call to function osal_memcpy
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   2415         ADD     A,#0x15
   \   0000A5   12....       LCALL   ?Subroutine97 & 0xFFFF
   2195              }
   \                     ??CrossCallReturnLabel_168:
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AB   85..82       MOV     DPL,?V0 + 10
   \   0000AE   85..83       MOV     DPH,?V0 + 11
   \   0000B1   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   2196              else
   2197                allOK = FALSE;
   2198            }
   2199          
   2200            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000B7   E5..         MOV     A,?V0 + 2
   \   0000B9   7020         JNZ     ??ZDO_CopyMatchInfo_6
   2201            {
   2202              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_7:
   \   0000BB   85..82       MOV     DPL,?V0 + 8
   \   0000BE   85..83       MOV     DPH,?V0 + 9
   \   0000C1   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   0000C4   7001         JNZ     ??ZDO_CopyMatchInfo_8
   \   0000C6   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_8:
   \   0000C7   6003         JZ      ??ZDO_CopyMatchInfo_9
   2203                osal_mem_free( destReq->inClusters );
   \   0000C9                ; Setup parameters for call to function osal_mem_free
   \   0000C9   12....       LCALL   ??osal_mem_free?relay
   2204              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_9:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000D3   7001         JNZ     ??ZDO_CopyMatchInfo_10
   \   0000D5   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_10:
   \   0000D6   6003         JZ      ??ZDO_CopyMatchInfo_6
   2205                osal_mem_free( destReq->outClusters );
   \   0000D8                ; Setup parameters for call to function osal_mem_free
   \   0000D8   12....       LCALL   ??osal_mem_free?relay
   2206            }
   2207          
   2208            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000DB   A9..         MOV     R1,?V0 + 2
   \   0000DD   02....       LJMP    ?Subroutine8 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000E0   75..00       MOV     ?V0 + 2,#0x0
   \   0000E3   80D6         SJMP    ??ZDO_CopyMatchInfo_7
   2209          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F5..         MOV     ?V0 + 10,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 11,A
   \   000008   85..82       MOV     DPL,?V0 + 10
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000007   F5..         MOV     ?V0 + 4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 5,A
   \   00000D   78..         MOV     R0,#?V0 + 4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   FE           MOV     R6,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET
   2210          
   2211          /*********************************************************************
   2212           * @fn      ZDMatchSendState()
   2213           *
   2214           * @brief   State machine for the End device match message algorithm.
   2215           *
   2216           * @param  reason - state of algoritm
   2217           * @param  status - initial message status
   2218           * @param  TransSeq - next transaction sequence number
   2219           *
   2220           * @return  FALSE if error and we are not currently matching, TRUE
   2221           *          if success.
   2222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2223          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2224          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   2225            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V0 + 4,#0x0
   \   000013   75..00       MOV     ?V0 + 5,#0x0
   2226            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V0 + 3,#-0x1
   2227            zAddrType_t dstAddr;
   2228            zAddrType_t destinationAddr;
   2229            uint16 msgType;
   2230            uint16 clusterID = 0xFFFF;
   \   000019   75..FF       MOV     ?V0 + 8,#-0x1
   \   00001C   75..FF       MOV     ?V0 + 9,#-0x1
   2231            ZDEndDeviceBind_t *ed = NULL;
   \   00001F   75..00       MOV     ?V0 + 0,#0x0
   \   000022   75..00       MOV     ?V0 + 1,#0x0
   2232            uint8 rspStatus = ZDP_SUCCESS;
   \   000025   E4           CLR     A
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   12....       LCALL   ?Subroutine50 & 0xFFFF
   2233          
   2234            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_81:
   \   00002F   7002         JNZ     ??ZDMatchSendState_0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \                     ??ZDMatchSendState_0:
   \   000033   7005         JNZ     ??ZDMatchSendState_1
   2235              return ( FALSE );
   \                     ??ZDMatchSendState_2:
   \   000035   7900         MOV     R1,#0x0
   \   000037   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2236          
   2237            // Check sequence number
   2238            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_1:
   \   00003A   7403         MOV     A,#0x3
   \   00003C   65..         XRL     A,?V0 + 2
   \   00003E   6006         JZ      ??ZDMatchSendState_4
   \   000040   7402         MOV     A,#0x2
   \   000042   65..         XRL     A,?V0 + 2
   \   000044   700D         JNZ     ??ZDMatchSendState_5
   2239            {
   2240              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_4:
   \   000046   90....       MOV     DPTR,#matchED
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   2430         ADD     A,#0x30
   \   00004C   12....       LCALL   ?Subroutine82 & 0xFFFF
   2241                return( FALSE ); // ignore the message
   2242            }
   \                     ??CrossCallReturnLabel_375:
   \   00004F   65..         XRL     A,?V0 + 7
   \   000051   70E2         JNZ     ??ZDMatchSendState_2
   2243          
   2244            // turn off timer
   2245            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_5:
   \   000053                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000053   7C..         MOV     R4,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff)
   \   000055   7D..         MOV     R5,#((??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff)
   \   000057   7A00         MOV     R2,#0x0
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   2246          
   2247            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00005E   7401         MOV     A,#0x1
   \   000060   65..         XRL     A,?V0 + 2
   \   000062   700B         JNZ     ??ZDMatchSendState_6
   2248            {
   2249              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000064   7485         MOV     A,#-0x7b
   \                     ??ZDMatchSendState_7:
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \                     ??ZDMatchSendState_8:
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   8038         SJMP    ??ZDMatchSendState_9
   2250            }
   2251          
   2252            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   00006F   90....       MOV     DPTR,#matchED
   \   000072   E0           MOVX    A,@DPTR
   \   000073   242F         ADD     A,#0x2f
   \   000075   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000078   E5..         MOV     A,?V0 + 2
   \   00007A   6006         JZ      ??ZDMatchSendState_10
   \   00007C   7403         MOV     A,#0x3
   \   00007E   65..         XRL     A,?V0 + 2
   \   000080   700F         JNZ     ??ZDMatchSendState_11
   2253            {
   2254              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_10:
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   2255          
   2256              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   000085   7403         MOV     A,#0x3
   \   000087   65..         XRL     A,?V0 + 2
   \   000089   7018         JNZ     ??ZDMatchSendState_12
   \   00008B   E5..         MOV     A,?V0 + 6
   \   00008D   6018         JZ      ??ZDMatchSendState_9
   2257              {
   2258                rspStatus = status;
   \   00008F   80D5         SJMP    ??ZDMatchSendState_7
   2259              }
   2260            }
   2261            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_11:
   \   000091   7402         MOV     A,#0x2
   \   000093   65..         XRL     A,?V0 + 2
   \   000095   7010         JNZ     ??ZDMatchSendState_9
   2262            {
   2263              if ( status == ZDP_SUCCESS )
   \   000097   E5..         MOV     A,?V0 + 6
   \   000099   7004         JNZ     ??ZDMatchSendState_13
   2264              {
   2265                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   00009B   7401         MOV     A,#0x1
   \   00009D   80CD         SJMP    ??ZDMatchSendState_8
   2266              }
   2267              else
   2268              {
   2269                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_13:
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   80C9         SJMP    ??ZDMatchSendState_8
   2270              }
   2271            }
   2272          
   2273            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_12:
   \   0000A3   E5..         MOV     A,?V0 + 2
   \   0000A5   6019         JZ      ??ZDMatchSendState_14
   \                     ??ZDMatchSendState_9:
   \   0000A7   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000AA   7014         JNZ     ??ZDMatchSendState_14
   2274            {
   2275              // Move to the next cluster ID
   2276              if ( matchED->ed1numMatched )
   \   0000AC   90....       MOV     DPTR,#matchED
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   2431         ADD     A,#0x31
   \   0000B2   08           INC     R0
   \   0000B3   08           INC     R0
   \   0000B4   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   0000B7   7005         JNZ     ??ZDMatchSendState_15
   2277                matchED->ed1numMatched--;
   2278              else if ( matchED->ed2numMatched )
   \   0000B9   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000BC   6002         JZ      ??ZDMatchSendState_14
   2279                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_15:
   \   0000BE   14           DEC     A
   \   0000BF   F0           MOVX    @DPTR,A
   2280            }
   2281          
   2282            // What message do we send now
   2283            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000C0   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000C3   FA           MOV     R2,A
   \   0000C4   90....       MOV     DPTR,#matchED
   \   0000C7   601E         JZ      ??ZDMatchSendState_16
   2284            {
   2285              ed = &(matchED->ed1);
   \   0000C9   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000CC   F5..         MOV     ?V0 + 1,A
   2286              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0000CE   EA           MOV     A,R2
   \   0000CF   C3           CLR     C
   \   0000D0   33           RLC     A
   \   0000D1   F8           MOV     R0,A
   \   0000D2   E4           CLR     A
   \   0000D3   33           RLC     A
   \   0000D4   F9           MOV     R1,A
   \   0000D5   90....       MOV     DPTR,#matchED
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   2432         ADD     A,#0x32
   \   0000DB   12....       LCALL   ?Subroutine58 & 0xFFFF
   2287              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2288              dstEP = matchED->ed2.endpoint;
   2289            }
   \                     ??CrossCallReturnLabel_100:
   \   0000DE   241D         ADD     A,#0x1d
   \   0000E0   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000E3   2425         ADD     A,#0x25
   \   0000E5   802A         SJMP    ??ZDMatchSendState_17
   2290            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_16:
   \   0000E7   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   0000EA   FA           MOV     R2,A
   \   0000EB   6029         JZ      ??ZDMatchSendState_18
   2291            {
   2292              ed = &(matchED->ed2);
   \   0000ED   90....       MOV     DPTR,#matchED
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   2417         ADD     A,#0x17
   \   0000F3   F5..         MOV     ?V0 + 0,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2293              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \                     ??CrossCallReturnLabel_483:
   \   0000FA   EA           MOV     A,R2
   \   0000FB   C3           CLR     C
   \   0000FC   33           RLC     A
   \   0000FD   F8           MOV     R0,A
   \   0000FE   E4           CLR     A
   \   0000FF   33           RLC     A
   \   000100   F9           MOV     R1,A
   \   000101   90....       MOV     DPTR,#matchED
   \   000104   E0           MOVX    A,@DPTR
   \   000105   2435         ADD     A,#0x35
   \   000107   12....       LCALL   ?Subroutine58 & 0xFFFF
   2294              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2295              dstEP = matchED->ed1.endpoint;
   2296            }
   \                     ??CrossCallReturnLabel_101:
   \   00010A   2406         ADD     A,#0x6
   \   00010C   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00010F   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_17:
   \   000111   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000114   F5..         MOV     ?V0 + 3,A
   2297          
   2298            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_18:
   \   000116   7409         MOV     A,#0x9
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?Subroutine52 & 0xFFFF
   2299          
   2300            // Send the next message
   2301            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_84:
   \   000120   6003         JZ      $+5
   \   000122   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   \   000125   E5..         MOV     A,?V0 + 0
   \   000127   7002         JNZ     ??ZDMatchSendState_20
   \   000129   E5..         MOV     A,?V0 + 1
   \                     ??ZDMatchSendState_20:
   \   00012B   7003         JNZ     $+5
   \   00012D   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   2302            {
   2303              // Send unbind/bind message to source
   2304              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000130   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000133   7004         JNZ     ??ZDMatchSendState_21
   2305                msgType = Unbind_req;
   \   000135   7E22         MOV     R6,#0x22
   \   000137   8002         SJMP    ??ZDMatchSendState_22
   2306              else
   2307                msgType = Bind_req;
   \                     ??ZDMatchSendState_21:
   \   000139   7E21         MOV     R6,#0x21
   2308          
   2309              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_22:
   \   00013B   85..82       MOV     DPL,?V0 + 0
   \   00013E   85..83       MOV     DPH,?V0 + 1
   \   000141   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2310          
   2311              // Save off the transaction sequence number
   2312              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_320:
   \   00014A   90....       MOV     DPTR,#ZDP_TransID
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   C0E0         PUSH    A
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   E0           MOVX    A,@DPTR
   \   000154   2430         ADD     A,#0x30
   \   000156   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   2313          
   2314              destinationAddr.addrMode = Addr64Bit;
   \   00015C   7412         MOV     A,#0x12
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   7403         MOV     A,#0x3
   \   000163   F0           MOVX    @DPTR,A
   2315              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000164                ; Setup parameters for call to function sAddrExtCpy
   \   000164   AC..         MOV     R4,?V0 + 4
   \   000166   AD..         MOV     R5,?V0 + 5
   \   000168   740A         MOV     A,#0xa
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   AA82         MOV     R2,DPL
   \   00016F   AB83         MOV     R3,DPH
   \   000171   12....       LCALL   ??sAddrExtCpy?relay
   2316          
   2317              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2318                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000174                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000174   85..82       MOV     DPL,?V0 + 0
   \   000177   85..83       MOV     DPH,?V0 + 1
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F5..         MOV     ?V0 + 4,A
   \   00017E   78..         MOV     R0,#?V0 + 4
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000183   78..         MOV     R0,#?V0 + 3
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000188   740C         MOV     A,#0xc
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   8582..       MOV     ?V0 + 4,DPL
   \   000190   8583..       MOV     ?V0 + 5,DPH
   \   000193   78..         MOV     R0,#?V0 + 4
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   78..         MOV     R0,#?V0 + 8
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019D   E5..         MOV     A,?V0 + 0
   \   00019F   2406         ADD     A,#0x6
   \   0001A1   F5..         MOV     ?V0 + 4,A
   \   0001A3   E5..         MOV     A,?V0 + 1
   \   0001A5   3400         ADDC    A,#0x0
   \   0001A7   F5..         MOV     ?V0 + 5,A
   \   0001A9   78..         MOV     R0,#?V0 + 4
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AE   E5..         MOV     A,?V0 + 0
   \   0001B0   240E         ADD     A,#0xe
   \   0001B2   F582         MOV     DPL,A
   \   0001B4   E5..         MOV     A,?V0 + 1
   \   0001B6   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   0001B9   7409         MOV     A,#0x9
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   AC82         MOV     R4,DPL
   \   0001C0   AD83         MOV     R5,DPH
   \   0001C2   EE           MOV     A,R6
   \   0001C3   FA           MOV     R2,A
   \   0001C4   7B00         MOV     R3,#0x0
   \   0001C6   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   0001C9   7408         MOV     A,#0x8
   \   0001CB   12....       LCALL   ?DEALLOC_XSTACK8
   2319          
   2320              // Set timeout for response
   2321              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001CE                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001CE   12....       LCALL   ?Subroutine94 & 0xFFFF
   2322            }
   \                     ??CrossCallReturnLabel_163:
   \   0001D1   02....       LJMP    ??ZDMatchSendState_23 & 0xFFFF
   2323            else
   2324            {
   2325              // Send the response messages to requesting devices
   2326              // send response to first requester
   2327              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_19:
   \   0001D4   90....       MOV     DPTR,#matchED
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ?Subroutine19 & 0xFFFF
   2328              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_7:
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E4   7401         MOV     A,#0x1
   \   0001E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E9   8582..       MOV     ?V0 + 0,DPL
   \   0001EC   8583..       MOV     ?V0 + 1,DPH
   \   0001EF   78..         MOV     R0,#?V0 + 0
   \   0001F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F4   75..20       MOV     ?V0 + 0,#0x20
   \   0001F7   75..80       MOV     ?V0 + 1,#-0x80
   \   0001FA   78..         MOV     R0,#?V0 + 0
   \   0001FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FF   7901         MOV     R1,#0x1
   \   000201   7406         MOV     A,#0x6
   \   000203   12....       LCALL   ?XSTACK_DISP0_8
   \   000206   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000209   12....       LCALL   ?DEALLOC_XSTACK8
   2329          
   2330              // send response to second requester
   2331              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00020C   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00020F   7050         JNZ     ??ZDMatchSendState_24
   2332              {
   2333                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000211   90....       MOV     DPTR,#matchED
   \   000214   E0           MOVX    A,@DPTR
   \   000215   2419         ADD     A,#0x19
   \   000217   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00021A   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2334                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \                     ??CrossCallReturnLabel_321:
   \   000223                ; Setup parameters for call to function ZDP_SendData
   \   000223   90....       MOV     DPTR,#matchED
   \   000226   E0           MOVX    A,@DPTR
   \   000227   2418         ADD     A,#0x18
   \   000229   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   2335              }
   \                     ??CrossCallReturnLabel_411:
   \   00022C   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00022F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000232   7401         MOV     A,#0x1
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   8582..       MOV     ?V0 + 0,DPL
   \   00023A   8583..       MOV     ?V0 + 1,DPH
   \   00023D   78..         MOV     R0,#?V0 + 0
   \   00023F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000242   75..20       MOV     ?V0 + 0,#0x20
   \   000245   75..80       MOV     ?V0 + 1,#-0x80
   \   000248   78..         MOV     R0,#?V0 + 0
   \   00024A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024D   7901         MOV     R1,#0x1
   \   00024F   7406         MOV     A,#0x6
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   AC82         MOV     R4,DPL
   \   000256   AD83         MOV     R5,DPH
   \   000258   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00025B   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00025E   12....       LCALL   ?DEALLOC_XSTACK8
   2336          
   2337              // Process ended - release memory used
   2338              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_24:
   \   000261                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000261   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2339            }
   2340          
   2341            return ( TRUE );
   \                     ??ZDMatchSendState_23:
   \   000264   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000266   7413         MOV     A,#0x13
   \   000268   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026B                REQUIRE ?Subroutine9
   \   00026B                ; // Fall through to label ?Subroutine9
   2342          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   90....       MOV     DPTR,#matchED
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242F         ADD     A,#0x2f
   \   000006   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000009   6401         XRL     A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   28           ADD     A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   39           ADDC    A,R1
   \   000010   F9           MOV     R1,A
   \   000011   74FE         MOV     A,#-0x2
   \   000013   28           ADD     A,R0
   \   000014   F582         MOV     DPL,A
   \   000016   74FF         MOV     A,#-0x1
   \   000018   39           ADDC    A,R1
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 8,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 9,A
   \   000022   90....       MOV     DPTR,#matchED
   \   000025   E0           MOVX    A,@DPTR
   \   000026   22           RET
   2343          
   2344          /*********************************************************************
   2345           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2346           *
   2347           * @brief   End device bind timeout.
   2348           *
   2349           * @param  none
   2350           *
   2351           * @return  none
   2352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2353          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2354          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2355            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   ??ZDMatchSendState?relay
   2356          }
   \   00000D   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   2357          
   2358          /*********************************************************************
   2359           * ZDO MESSAGE PARSING API FUNCTIONS
   2360           */
   2361          
   2362          /*********************************************************************
   2363           * @fn          ZDO_ParseEndDeviceBindReq
   2364           *
   2365           * @brief       This function parses the End_Device_Bind_req message.
   2366           *
   2367           *     NOTE:  The clusters lists in bindReq are allocated in this
   2368           *            function and must be freed by that calling function.
   2369           *
   2370           * @param       inMsg  - incoming message (request)
   2371           * @param       bindReq - pointer to place to parse message to
   2372           *
   2373           * @return      none
   2374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2375          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2376          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2377            uint8 *msg;
   2378          
   2379            // Parse the message
   2380            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00000F   12....       LCALL   ?Subroutine44 & 0xFFFF
   2381            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_64:
   \   000012   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000015   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2382            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_322:
   \   000018   EA           MOV     A,R2
   \   000019   240E         ADD     A,#0xe
   \   00001B   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   2383            msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000023   F5..         MOV     ?V0 + 3,A
   2384          
   2385            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000025   85..82       MOV     DPL,?V0 + 2
   \   000028   F583         MOV     DPH,A
   \   00002A   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   12....       LCALL   ?Subroutine13 & 0xFFFF
   2386            msg += 2;
   2387          
   2388            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??CrossCallReturnLabel_525:
   \   000034                ; Setup parameters for call to function sAddrExtCpy
   \   000034   AC..         MOV     R4,?V0 + 2
   \   000036   FD           MOV     R5,A
   \   000037   EE           MOV     A,R6
   \   000038   2406         ADD     A,#0x6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   12....       LCALL   ?Subroutine54 & 0xFFFF
   2389            msg += Z_EXTADDR_LEN;
   2390          
   2391            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_441:
   \   000041   C0E0         PUSH    A
   \   000043   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000046   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000049   D0E0         POP     A
   \   00004B   12....       LCALL   ?Subroutine22 & 0xFFFF
   2392            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_12:
   \   00004E   F8           MOV     R0,A
   \   00004F   EE           MOV     A,R6
   \   000050   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000053   EF           MOV     A,R7
   \   000054   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000057   E8           MOV     A,R0
   \   000058   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   2393            msg += 2;
   2394          
   2395            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_527:
   \   00005B   EE           MOV     A,R6
   \   00005C   2412         ADD     A,#0x12
   \   00005E   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   F0           MOVX    @DPTR,A
   2396            bindReq->outClusters = NULL;
   \   000065   EE           MOV     A,R6
   \   000066   2415         ADD     A,#0x15
   \   000068   F5..         MOV     ?V0 + 6,A
   \   00006A   EF           MOV     A,R7
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F5..         MOV     ?V0 + 7,A
   \   00006F   85..82       MOV     DPL,?V0 + 6
   \   000072   F583         MOV     DPH,A
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ?Subroutine51 & 0xFFFF
   2397          
   2398            if ((bindReq->numInClusters = *msg++) &&
   2399                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_82:
   \   00007A   A3           INC     DPTR
   \   00007B   8582..       MOV     ?V0 + 2,DPL
   \   00007E   8583..       MOV     ?V0 + 3,DPH
   \   000081   EE           MOV     A,R6
   \   000082   2411         ADD     A,#0x11
   \   000084   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000087   85..82       MOV     DPL,?V0 + 0
   \   00008A   F583         MOV     DPH,A
   \   00008C   EA           MOV     A,R2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   6036         JZ      ??ZDO_ParseEndDeviceBindReq_0
   \   000090                ; Setup parameters for call to function osal_mem_alloc
   \   000090   C3           CLR     C
   \   000091   33           RLC     A
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??osal_mem_alloc?relay
   \   000099   85..82       MOV     DPL,?V0 + 4
   \   00009C   85..83       MOV     DPH,?V0 + 5
   \   00009F   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000A2   85..82       MOV     DPL,?V0 + 4
   \   0000A5   85..83       MOV     DPH,?V0 + 5
   \   0000A8   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000AB   EC           MOV     A,R4
   \   0000AC   7001         JNZ     ??ZDO_ParseEndDeviceBindReq_1
   \   0000AE   ED           MOV     A,R5
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000AF   6015         JZ      ??ZDO_ParseEndDeviceBindReq_0
   2400            {
   2401              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000B1                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000B1   AA..         MOV     R2,?V0 + 2
   \   0000B3   AB..         MOV     R3,?V0 + 3
   \   0000B5   85..82       MOV     DPL,?V0 + 0
   \   0000B8   85..83       MOV     DPH,?V0 + 1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F9           MOV     R1,A
   \   0000BD   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000C0   8A..         MOV     ?V0 + 2,R2
   \   0000C2   8B..         MOV     ?V0 + 3,R3
   \   0000C4   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_2
   2402            }
   2403            else
   2404            {
   2405              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   0000C6   E4           CLR     A
   \   0000C7   85..82       MOV     DPL,?V0 + 0
   \   0000CA   85..83       MOV     DPH,?V0 + 1
   \   0000CD   F0           MOVX    @DPTR,A
   2406            }
   2407          
   2408            if ((bindReq->numOutClusters = *msg++) &&
   2409                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000CE   85..82       MOV     DPL,?V0 + 2
   \   0000D1   85..83       MOV     DPH,?V0 + 3
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FA           MOV     R2,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   8582..       MOV     ?V0 + 2,DPL
   \   0000DA   8583..       MOV     ?V0 + 3,DPH
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2414         ADD     A,#0x14
   \   0000E0   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000E3   EA           MOV     A,R2
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   6030         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000E7                ; Setup parameters for call to function osal_mem_alloc
   \   0000E7   C3           CLR     C
   \   0000E8   33           RLC     A
   \   0000E9   FA           MOV     R2,A
   \   0000EA   E4           CLR     A
   \   0000EB   33           RLC     A
   \   0000EC   FB           MOV     R3,A
   \   0000ED   12....       LCALL   ??osal_mem_alloc?relay
   \   0000F0   85..82       MOV     DPL,?V0 + 6
   \   0000F3   85..83       MOV     DPH,?V0 + 7
   \   0000F6   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000F9   85..82       MOV     DPL,?V0 + 6
   \   0000FC   85..83       MOV     DPH,?V0 + 7
   \   0000FF   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000102   EC           MOV     A,R4
   \   000103   7001         JNZ     ??ZDO_ParseEndDeviceBindReq_4
   \   000105   ED           MOV     A,R5
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   000106   600F         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2410            {
   2411              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   000108                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000108   AA..         MOV     R2,?V0 + 2
   \   00010A   AB..         MOV     R3,?V0 + 3
   \   00010C   8E82         MOV     DPL,R6
   \   00010E   8F83         MOV     DPH,R7
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F9           MOV     R1,A
   \   000112   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000115   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_5
   2412            }
   2413            else
   2414            {
   2415              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   000117   E4           CLR     A
   \   000118   8E82         MOV     DPL,R6
   \   00011A   8F83         MOV     DPH,R7
   \   00011C   F0           MOVX    @DPTR,A
   2416            }
   2417          }
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00011D   7F09         MOV     R7,#0x9
   \   00011F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000006   8E82         MOV     DPL,R6
   \   000008   8F83         MOV     DPH,R7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003                REQUIRE ??Subroutine214_0
   \   000003                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine215_0
   \   000001                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   2408         ADD     A,#0x8
   \   000007   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine226_0
   \   000004                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   E5..         MOV     A,?V0 + 3
   \   00000C   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET
   2418          
   2419          /*********************************************************************
   2420           * @fn          ZDO_ParseBindUnbindReq
   2421           *
   2422           * @brief       This function parses the Bind_req or Unbind_req message.
   2423           *
   2424           * @param       inMsg  - incoming message (request)
   2425           * @param       pReq - place to put parsed information
   2426           *
   2427           * @return      none
   2428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2429          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2430          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2431            uint8 *msg;
   2432          
   2433            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine105 & 0xFFFF
   2434            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_182:
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ?Subroutine55 & 0xFFFF
   2435            msg += Z_EXTADDR_LEN;
   2436            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_88:
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine31 & 0xFFFF
   2437            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_29:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   85..83       MOV     DPH,?V0 + 1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine14 & 0xFFFF
   2438            msg += 2;
   2439            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_535:
   \   000036   FC           MOV     R4,A
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   2413         ADD     A,#0x13
   \   00003B   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   00003E   EC           MOV     A,R4
   \   00003F   12....       LCALL   ?Subroutine42 & 0xFFFF
   2440            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_60:
   \   000042   240B         ADD     A,#0xb
   \   000044   FA           MOV     R2,A
   \   000045   E5..         MOV     A,?V0 + 1
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   7403         MOV     A,#0x3
   \   00004C   6C           XRL     A,R4
   \   00004D   7014         JNZ     ??ZDO_ParseBindUnbindReq_0
   2441            {
   2442              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004F                ; Setup parameters for call to function sAddrExtCpy
   \   00004F   EE           MOV     A,R6
   \   000050   FC           MOV     R4,A
   \   000051   EF           MOV     A,R7
   \   000052   FD           MOV     R5,A
   \   000053   12....       LCALL   ?Subroutine56 & 0xFFFF
   2443              msg += Z_EXTADDR_LEN;
   2444              pReq->dstEndpoint = *msg;
   2445            }
   \                     ??CrossCallReturnLabel_90:
   \   000056   C0E0         PUSH    A
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   2414         ADD     A,#0x14
   \   00005C   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   00005F   D0E0         POP     A
   \   000061   8006         SJMP    ??ZDO_ParseBindUnbindReq_1
   2446            else
   2447            {
   2448              // copy group address
   2449              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000063   12....       LCALL   ?Subroutine91 & 0xFFFF
   2450            }
   \                     ??CrossCallReturnLabel_156:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000069   F0           MOVX    @DPTR,A
   2451          }
   \   00006A   02....       LJMP    ??Subroutine183_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   EE           MOV     A,R6
   \   000004   2408         ADD     A,#0x8
   \   000006   FE           MOV     R6,A
   \   000007   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine225_0
   \   000004                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine227_0
   \   000002                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine228_0
   \   000004                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
   2452          
   2453          /*********************************************************************
   2454           * @fn      ZDO_ParseAddrRsp
   2455           *
   2456           * @brief   Turns the inMsg (incoming message) into the out parsed
   2457           *          structure.
   2458           *
   2459           * @param   inMsg - incoming message
   2460           *
   2461           * @return  pointer to parsed structures.  This structure was
   2462           *          allocated using osal_mem_alloc, so it must be freed
   2463           *          by the calling function [osal_mem_free()].
   2464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2466          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2467            ZDO_NwkIEEEAddrResp_t *rsp;
   2468            uint8 *msg;
   2469            byte cnt = 0;
   2470          
   2471            // Calculate the number of items in the list
   2472            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   FE           MOV     R6,A
   \   00000F   E9           MOV     A,R1
   \   000010   FF           MOV     R7,A
   \   000011   EA           MOV     A,R2
   \   000012   2410         ADD     A,#0x10
   \   000014   F582         MOV     DPL,A
   \   000016   EB           MOV     A,R3
   \   000017   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00001A   C3           CLR     C
   \   00001B   940C         SUBB    A,#0xc
   \   00001D   400E         JC      ??ZDO_ParseAddrRsp_0
   2473              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E0           MOVX    A,@DPTR
   \   000024   240B         ADD     A,#0xb
   \   000026   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2474            else
   2475              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   2476          
   2477            // Make buffer
   2478            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   33           RLC     A
   \   000034   F8           MOV     R0,A
   \   000035   E4           CLR     A
   \   000036   33           RLC     A
   \   000037   F9           MOV     R1,A
   \   000038   740D         MOV     A,#0xd
   \   00003A   12....       LCALL   ?Subroutine127 & 0xFFFF
   2479          
   2480            if ( rsp )
   \                     ??CrossCallReturnLabel_216:
   \   00003D   7001         JNZ     ??ZDO_ParseAddrRsp_2
   \   00003F   EB           MOV     A,R3
   \                     ??ZDO_ParseAddrRsp_2:
   \   000040   607D         JZ      ??ZDO_ParseAddrRsp_3
   2481            {
   2482              msg = inMsg->asdu;
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   2483          
   2484              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_495:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   12....       LCALL   ?Subroutine45 & 0xFFFF
   2485              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_67:
   \   000050   706D         JNZ     ??ZDO_ParseAddrRsp_3
   2486              {
   2487                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000052                ; Setup parameters for call to function sAddrExtCpy
   \   000052   EE           MOV     A,R6
   \   000053   FC           MOV     R4,A
   \   000054   EF           MOV     A,R7
   \   000055   FD           MOV     R5,A
   \   000056   EA           MOV     A,R2
   \   000057   2403         ADD     A,#0x3
   \   000059   0A           INC     R2
   \   00005A   0A           INC     R2
   \   00005B   0A           INC     R2
   \   00005C   EB           MOV     A,R3
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ?Subroutine55 & 0xFFFF
   2488                msg += Z_EXTADDR_LEN;
   2489                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_89:
   \   000063   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000066   12....       LCALL   ?Subroutine34 & 0xFFFF
   2490          
   2491                msg += 2;
   2492                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_45:
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   240B         ADD     A,#0xb
   \   00006D   F8           MOV     R0,A
   \   00006E   E5..         MOV     A,?V0 + 1
   \   000070   3400         ADDC    A,#0x0
   \   000072   F9           MOV     R1,A
   \   000073   E8           MOV     A,R0
   \   000074   FA           MOV     R2,A
   \   000075   E9           MOV     A,R1
   \   000076   FB           MOV     R3,A
   \   000077   E4           CLR     A
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   F0           MOVX    @DPTR,A
   2493          
   2494                // StartIndex field is only present if NumAssocDev field is non-zero.
   2495                if ( cnt > 0 )
   \   00007D   E5..         MOV     A,?V0 + 2
   \   00007F   603E         JZ      ??ZDO_ParseAddrRsp_3
   2496                {
   2497                  uint16 *pList = &(rsp->devList[0]);
   \   000081   E5..         MOV     A,?V0 + 0
   \   000083   240D         ADD     A,#0xd
   \   000085   08           INC     R0
   \   000086   08           INC     R0
   \   000087   E5..         MOV     A,?V0 + 1
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F9           MOV     R1,A
   2498                  byte n = cnt;
   \   00008C   85....       MOV     ?V0 + 3,?V0 + 2
   2499          
   2500                  rsp->numAssocDevs = *msg++;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   E0           MOVX    A,@DPTR
   \   000094   8A82         MOV     DPL,R2
   \   000096   8B83         MOV     DPH,R3
   \   000098   12....       LCALL   ?Subroutine28 & 0xFFFF
   2501                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_24:
   \   00009B   C0E0         PUSH    A
   \   00009D   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   0000A0   D0E0         POP     A
   \   0000A2   12....       LCALL   ?Subroutine47 & 0xFFFF
   2502          
   2503                  while ( n != 0 )
   2504                  {
   2505                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_71:
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FC           MOV     R4,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FB           MOV     R3,A
   \   0000AE   EC           MOV     A,R4
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   12....       LCALL   ?Subroutine32 & 0xFFFF
   2506                    msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_32:
   \   0000B6   12....       LCALL   ?Subroutine125 & 0xFFFF
   2507                    n--;
   2508                  }
   \                     ??CrossCallReturnLabel_208:
   \   0000B9   15..         DEC     ?V0 + 3
   \   0000BB   E5..         MOV     A,?V0 + 3
   \   0000BD   70E6         JNZ     ??CrossCallReturnLabel_71
   2509                }
   2510              }
   2511            }
   2512            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000BF   AA..         MOV     R2,?V0 + 0
   \   0000C1   AB..         MOV     R3,?V0 + 1
   \   0000C3                REQUIRE ?Subroutine5
   \   0000C3                ; // Fall through to label ?Subroutine5
   2513          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   28           ADD     A,R0
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   39           ADDC    A,R1
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_alloc?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine224_0
   \   000004                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   2514          
   2515          /*********************************************************************
   2516           * @fn          ZDO_ParseNodeDescRsp
   2517           *
   2518           * @brief       This function parses the Node_Desc_rsp message.
   2519           *
   2520           * @param       inMsg - incoming message
   2521           * @param       pNDRsp - place to parse the message into
   2522           *
   2523           * @return      none
   2524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2525          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2526          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2527            uint8 *msg;
   2528          
   2529            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine16 & 0xFFFF
   2530          
   2531            pNDRsp->status = *msg++;
   2532            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2533          
   2534            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2535            {
   2536              msg += 2;
   \   00000D   12....       LCALL   ?Subroutine168 & 0xFFFF
   2537              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??CrossCallReturnLabel_275:
   \   000010   EC           MOV     A,R4
   \   000011   2403         ADD     A,#0x3
   \   000013   FA           MOV     R2,A
   \   000014   ED           MOV     A,R5
   \   000015   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000018   5407         ANL     A,#0x7
   \   00001A   C0E0         PUSH    A
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   E0           MOVX    A,@DPTR
   \   000021   54F8         ANL     A,#0xf8
   \   000023   FE           MOV     R6,A
   \   000024   D0E0         POP     A
   \   000026   4E           ORL     A,R6
   \   000027   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2538          
   2539              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_477:
   \   00002A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   8A82         MOV     DPL,R2
   \   000030   E0           MOVX    A,@DPTR
   \   000031   92E3         MOV     0xE0 /* A   */.3,C
   \   000033   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2540              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_478:
   \   000036   A2E4         MOV     C,0xE0 /* A   */.4
   \   000038   8B83         MOV     DPH,R3
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E4         MOV     0xE0 /* A   */.4,C
   \   00003F   12....       LCALL   ?Subroutine49 & 0xFFFF
   2541          
   2542              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_76:
   \   000042   08           INC     R0
   \   000043   A983         MOV     R1,DPH
   2543              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000045   EC           MOV     A,R4
   \   000046   2404         ADD     A,#0x4
   \   000048   0A           INC     R2
   \   000049   ED           MOV     A,R5
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FB           MOV     R3,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   54F8         ANL     A,#0xf8
   \   000050   C0E0         PUSH    A
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   5407         ANL     A,#0x7
   \   000059   FE           MOV     R6,A
   \   00005A   D0E0         POP     A
   \   00005C   4E           ORL     A,R6
   \   00005D   FE           MOV     R6,A
   \   00005E   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2544              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_479:
   \   000061   5407         ANL     A,#0x7
   \   000063   C0E0         PUSH    A
   \   000065   74F8         MOV     A,#-0x8
   \   000067   5E           ANL     A,R6
   \   000068   FE           MOV     R6,A
   \   000069   D0E0         POP     A
   \   00006B   4E           ORL     A,R6
   \   00006C   A3           INC     DPTR
   \   00006D   08           INC     R0
   \   00006E   A983         MOV     R1,DPH
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2545              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_480:
   \   000077   8C82         MOV     DPL,R4
   \   000079   8D83         MOV     DPH,R5
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ?Subroutine29 & 0xFFFF
   2546              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_446:
   \   000082   8C82         MOV     DPL,R4
   \   000084   8D83         MOV     DPH,R5
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   12....       LCALL   ?Subroutine20 & 0xFFFF
   2547              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_8:
   \   00008F   12....       LCALL   ?Subroutine20 & 0xFFFF
   2548              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_9:
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine18 & 0xFFFF
   2549              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   000096   12....       LCALL   ?Subroutine18 & 0xFFFF
   2550              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_5:
   \   000099   12....       LCALL   ?Subroutine29 & 0xFFFF
   2551              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_447:
   \   00009C   FE           MOV     R6,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EC           MOV     A,R4
   \   0000A3   240B         ADD     A,#0xb
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   ED           MOV     A,R5
   \   0000A8   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   0000AB   EA           MOV     A,R2
   \   0000AC   12....       LCALL   ?Subroutine32 & 0xFFFF
   2552              msg += 2;
   2553              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_31:
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   EC           MOV     A,R4
   \   0000B7   240D         ADD     A,#0xd
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   ED           MOV     A,R5
   \   0000BC   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2554              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_448:
   \   0000C4   C0E0         PUSH    A
   \   0000C6   EC           MOV     A,R4
   \   0000C7   240E         ADD     A,#0xe
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   ED           MOV     A,R5
   \   0000CC   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   0000CF   D0E0         POP     A
   \   0000D1   12....       LCALL   ?Subroutine49 & 0xFFFF
   2555              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_77:
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C0E0         PUSH    A
   \   0000D7   EC           MOV     A,R4
   \   0000D8   12....       LCALL   ?Subroutine126 & 0xFFFF
   2556            }
   \                     ??CrossCallReturnLabel_215:
   \   0000DB   ED           MOV     A,R5
   \   0000DC   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   0000DF   D0E0         POP     A
   \   0000E1   F0           MOVX    @DPTR,A
   2557          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000E2                REQUIRE ?Subroutine10
   \   0000E2                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine217_0
   \   000001                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2558          
   2559          /*********************************************************************
   2560           * @fn          ZDO_ParesPowerDescRsp
   2561           *
   2562           * @brief       This function parses the Power_Desc_rsp message.
   2563           *
   2564           * @param       inMsg  - incoming message
   2565           * @param       pNPRsp - place to parse the message into
   2566           *
   2567           * @return      none
   2568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F9           MOV     R1,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine189_0
   \   000005                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2569          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2570          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2571            uint8 *msg;
   2572          
   2573            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000008   12....       LCALL   ?Subroutine93 & 0xFFFF
   2574            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_160:
   \   00000B   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00000E   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2575            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   EE           MOV     A,R6
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2576          
   2577            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_312:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   707D         JNZ     ??CrossCallReturnLabel_325
   2578            {
   2579              msg += 2;
   \   00002A   12....       LCALL   ?Subroutine124 & 0xFFFF
   2580              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??CrossCallReturnLabel_207:
   \   00002D   EC           MOV     A,R4
   \   00002E   2403         ADD     A,#0x3
   \   000030   ED           MOV     A,R5
   \   000031   3400         ADDC    A,#0x0
   \   000033   0C           INC     R4
   \   000034   0C           INC     R4
   \   000035   0C           INC     R4
   \   000036   FD           MOV     R5,A
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   540F         ANL     A,#0xf
   \   00003E   FE           MOV     R6,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FF           MOV     R7,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C4           SWAP    A
   \   000048   540F         ANL     A,#0xf
   \   00004A   F5..         MOV     ?V0 + 0,A
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   7404         MOV     A,#0x4
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?S_SHL
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   4E           ORL     A,R6
   \   000059   F8           MOV     R0,A
   \   00005A   EF           MOV     A,R7
   \   00005B   12....       LCALL   ?Subroutine41 & 0xFFFF
   2581              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_323:
   \   00005E   74F0         MOV     A,#-0x10
   \   000060   58           ANL     A,R0
   \   000061   F8           MOV     R0,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FE           MOV     R6,A
   \   000068   740F         MOV     A,#0xf
   \   00006A   5E           ANL     A,R6
   \   00006B   48           ORL     A,R0
   \   00006C   FE           MOV     R6,A
   \   00006D   A3           INC     DPTR
   \   00006E   0A           INC     R2
   \   00006F   AB83         MOV     R3,DPH
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   EF           MOV     A,R7
   \   000078   F0           MOVX    @DPTR,A
   2582              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   000079   740F         MOV     A,#0xf
   \   00007B   59           ANL     A,R1
   \   00007C   FF           MOV     R7,A
   \   00007D   8A82         MOV     DPL,R2
   \   00007F   8B83         MOV     DPH,R3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C4           SWAP    A
   \   000083   540F         ANL     A,#0xf
   \   000085   F5..         MOV     ?V0 + 0,A
   \   000087   740C         MOV     A,#0xc
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?S_SHL
   \   00008E   EE           MOV     A,R6
   \   00008F   F8           MOV     R0,A
   \   000090   E5..         MOV     A,?V0 + 1
   \   000092   4F           ORL     A,R7
   \   000093   12....       LCALL   ?Subroutine41 & 0xFFFF
   2583              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_324:
   \   000096   74F0         MOV     A,#-0x10
   \   000098   59           ANL     A,R1
   \   000099   F9           MOV     R1,A
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FF           MOV     R7,A
   \   0000A0   740F         MOV     A,#0xf
   \   0000A2   5F           ANL     A,R7
   \   0000A3   49           ORL     A,R1
   \   0000A4   12....       LCALL   ?Subroutine41 & 0xFFFF
   2584            }
   2585          }
   \                     ??CrossCallReturnLabel_325:
   \   0000A7   02....       LJMP    ??Subroutine183_0 & 0xFFFF
   2586          
   2587          /*********************************************************************
   2588           * @fn          ZDO_ParseSimpleDescRsp
   2589           *
   2590           * @brief       This function parse the Simple_Desc_rsp message.
   2591           *
   2592           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2593           *         in the SimpleDescriptionFormat_t structure are allocated
   2594           *         and the calling function needs to free [osal_msg_free()]
   2595           *         these buffers.
   2596           *
   2597           * @param       inMsg  - incoming message
   2598           * @param       pSimpleDescRsp - place to parse the message into
   2599           *
   2600           * @return      none
   2601           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2602          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2603          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2604            uint8 *msg;
   2605          
   2606            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine16 & 0xFFFF
   2607            pSimpleDescRsp->status = *msg++;
   2608            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2609            msg += sizeof ( uint16 );
   2610            msg++; // Skip past the length field.
   2611          
   2612            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7015         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2613            {
   2614              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   0C           INC     R4
   \   00000E   0C           INC     R4
   \   00000F   0C           INC     R4
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   E8           MOV     A,R0
   \   000015   2403         ADD     A,#0x3
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay
   2615            }
   2616          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001F   02....       LJMP    ?Subroutine10 & 0xFFFF
   2617          
   2618          /*********************************************************************
   2619           * @fn          ZDO_ParseEPListRsp
   2620           *
   2621           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2622           *
   2623           * @param       inMsg  - incoming message
   2624           *
   2625           * @return      none
   2626           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine193_0
   \   000004                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2627          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2628          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2629            ZDO_ActiveEndpointRsp_t *pRsp;
   2630            uint8 *msg;
   2631            uint8 Status;
   2632            uint8 cnt;
   2633          
   2634            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine98 & 0xFFFF
   2635            Status = *msg++;
   \                     ??CrossCallReturnLabel_440:
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 5,A
   \   000010   A3           INC     DPTR
   \   000011   8582..       MOV     ?V0 + 2,DPL
   \   000014   8583..       MOV     ?V0 + 3,DPH
   2636            cnt = msg[2];
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 4,A
   2637          
   2638            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00001C   F582         MOV     DPL,A
   \   00001E   12....       LCALL   ?Subroutine110 & 0xFFFF
   2639            if ( pRsp )
   \                     ??CrossCallReturnLabel_187:
   \   000021   7001         JNZ     ??ZDO_ParseEPListRsp_0
   \   000023   EF           MOV     A,R7
   \                     ??ZDO_ParseEPListRsp_0:
   \   000024   602A         JZ      ??ZDO_ParseEPListRsp_1
   2640            {
   2641              pRsp->status = Status;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E5..         MOV     A,?V0 + 5
   \   00002C   12....       LCALL   ?Subroutine51 & 0xFFFF
   2642              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_83:
   \   00002F   12....       LCALL   ?Subroutine26 & 0xFFFF
   2643              msg += sizeof( uint16 );
   2644              pRsp->cnt = cnt;
   2645              msg++; // pass cnt
   2646              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_463:
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A982         MOV     R1,DPL
   \   00003D   AA83         MOV     R2,DPH
   \   00003F   89..         MOV     ?V0 + 4,R1
   \   000041   8A..         MOV     ?V0 + 5,R2
   \   000043   88..         MOV     ?V0 + 6,R0
   \   000045   78..         MOV     R0,#?V0 + 4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004A   12....       LCALL   ?Subroutine111 & 0xFFFF
   2647            }
   \                     ??CrossCallReturnLabel_460:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   2648          
   2649            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_1:
   \   000050   02....       LJMP    ?Subroutine1 & 0xFFFF
   2650          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   AC..         MOV     R4,?V0 + 0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005   2404         ADD     A,#0x4
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009                REQUIRE ??Subroutine219_0
   \   000009                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_memcpy?relay
   \   000006   7403         MOV     A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F                REQUIRE ??Subroutine220_0
   \   00000F                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8582..       MOV     ?V0 + 0,DPL
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   7404         MOV     A,#0x4
   \   000005   25..         ADD     A,?V0 + 0
   \   000007   FA           MOV     R2,A
   \   000008   E4           CLR     A
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   AE..         MOV     R6,?V0 + 6
   \   000015   AF..         MOV     R7,?V0 + 7
   \   000017   EE           MOV     A,R6
   \   000018   22           RET
   2651          
   2652          /*********************************************************************
   2653           * @fn          ZDO_ParseServerDiscRsp
   2654           *
   2655           * @brief       Parse the Server_Discovery_rsp message.
   2656           *
   2657           * @param       inMsg - incoming message.
   2658           * @param       pRsp - place to put the parsed information.
   2659           *
   2660           * @return      none
   2661           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2662          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2663          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2664            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00000D   FA           MOV     R2,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F583         MOV     DPH,A
   \   000012   8A82         MOV     DPL,R2
   \   000014   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000017   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2665            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_481:
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EA           MOV     A,R2
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2666          }
   \                     ??CrossCallReturnLabel_313:
   \   000036   02....       LJMP    ?Subroutine10 & 0xFFFF
   2667          
   2668          /*********************************************************************
   2669           * @fn          ZDO_ParseMgmtLqiRsp
   2670           *
   2671           * @brief       This function parses the incoming Management
   2672           *              LQI response
   2673           *
   2674           * @param       inMsg - incoming message
   2675           *
   2676           * @return      a pointer to parsed response structure (NULL if not allocated).
   2677           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2678           *          by the calling function [osal_mem_free()].
   2679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2680          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2681          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2682            ZDO_MgmtLqiRsp_t *pRsp;
   2683            uint8 status;
   2684            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V0 + 5,#0x0
   2685            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   2686            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   2687            uint8 *msg;
   2688          
   2689            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine69 & 0xFFFF
   2690          
   2691            status = *msg++;
   2692            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_111:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_119
   2693            {
   2694              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine72 & 0xFFFF
   2695              startIndex = *msg++;
   2696              neighborLqiCount = *msg++;
   2697            }
   2698          
   2699            // Allocate a buffer big enough to handle the list.
   2700            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2701                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??CrossCallReturnLabel_119:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F00E       MOV     B,#0xe
   \   00001B   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AE..         MOV     R6,?V0 + 0
   \   000024   AF..         MOV     R7,?V0 + 1
   2702            if ( pRsp )
   \   000026   EE           MOV     A,R6
   \   000027   7001         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   \   000029   EF           MOV     A,R7
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00002A   6070         JZ      ??ZDO_ParseMgmtLqiRsp_1
   2703            {
   2704              uint8 x;
   2705              neighborLqiItem_t *pList = pRsp->list;
   \   00002C   EE           MOV     A,R6
   \   00002D   2404         ADD     A,#0x4
   \   00002F   12....       LCALL   ?Subroutine114 & 0xFFFF
   2706              pRsp->status = status;
   \                     ??CrossCallReturnLabel_490:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E5..         MOV     A,?V0 + 7
   \   000038   F0           MOVX    @DPTR,A
   2707              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V0 + 6
   \   00003C   12....       LCALL   ?Subroutine40 & 0xFFFF
   2708              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_59:
   \   00003F   E5..         MOV     A,?V0 + 5
   \   000041   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2709              pRsp->neighborLqiCount = neighborLqiCount;
   2710          
   2711              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_465:
   \   000044   75..00       MOV     ?V0 + 5,#0x0
   \   000047   804C         SJMP    ??ZDO_ParseMgmtLqiRsp_2
   2712              {
   2713                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000049                ; Setup parameters for call to function sAddrExtCpy
   \   000049   AC..         MOV     R4,?V0 + 2
   \   00004B   AD..         MOV     R5,?V0 + 3
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   2404         ADD     A,#0x4
   \   000051   FA           MOV     R2,A
   \   000052   E5..         MOV     A,?V0 + 1
   \   000054   3400         ADDC    A,#0x0
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   ??sAddrExtCpy?relay
   2714                msg += Z_EXTADDR_LEN;
   2715          
   2716                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   00005A   E5..         MOV     A,?V0 + 2
   \   00005C   2410         ADD     A,#0x10
   \   00005E   12....       LCALL   ?Subroutine121 & 0xFFFF
   2717                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_200:
   \   000061   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2718                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \                     ??CrossCallReturnLabel_314:
   \   00006D   E5..         MOV     A,?V0 + 2
   \   00006F   2405         ADD     A,#0x5
   \   000071   12....       LCALL   ?Subroutine121 & 0xFFFF
   2719                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_201:
   \   000074   E0           MOVX    A,@DPTR
   \   000075   C0E0         PUSH    A
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   240D         ADD     A,#0xd
   \   00007B   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   00007E   D0E0         POP     A
   \   000080   12....       LCALL   ?Subroutine23 & 0xFFFF
   2720                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??CrossCallReturnLabel_14:
   \   000083   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
   2721                pList++;
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   240E         ADD     A,#0xe
   \   00008C   F5..         MOV     ?V0 + 0,A
   \   00008E   E5..         MOV     A,?V0 + 1
   \   000090   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2722              }
   \                     ??CrossCallReturnLabel_484:
   \   000093   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000095   E5..         MOV     A,?V0 + 5
   \   000097   C3           CLR     C
   \   000098   95..         SUBB    A,?V0 + 4
   \   00009A   40AD         JC      ??ZDO_ParseMgmtLqiRsp_3
   2723            }
   2724          
   2725            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00009C   02....       LJMP    ?Subroutine1 & 0xFFFF
   2726          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   7404         MOV     A,#0x4
   \   000006   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 4,A
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 7,A
   \   000010   A3           INC     DPTR
   \   000011   8582..       MOV     ?V0 + 2,DPL
   \   000014   8583..       MOV     ?V0 + 3,DPH
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   22           RET
   2727          
   2728          /*********************************************************************
   2729           * @fn          ZDO_ParseMgmNwkDiscRsp
   2730           *
   2731           * @brief       This function parses the incoming Management
   2732           *              Network Discover response.
   2733           *
   2734           * @param       inMsg - incoming message
   2735           *
   2736           * @return      pointer to parsed response.  This structure was
   2737           *          allocated using osal_mem_alloc, so it must be freed
   2738           *          by the calling function [osal_mem_free()].
   2739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2740          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2741          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2742            ZDO_MgmNwkDiscRsp_t *pRsp;
   2743            uint8 status;
   2744            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2745            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2746            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2747            uint8 *msg;
   2748          
   2749            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine59 & 0xFFFF
   2750            status = *msg++;
   \                     ??CrossCallReturnLabel_492:
   \   000011   F5..         MOV     ?V0 + 7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2751          
   2752            if ( status == ZSuccess )
   \   000018   7008         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2753            {
   2754              networkCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine149 & 0xFFFF
   2755              startIndex = *msg++;
   2756              networkListCount = *msg++;
   2757            }
   \                     ??CrossCallReturnLabel_247:
   \   00001D   0E           INC     R6
   \   00001E   0E           INC     R6
   \   00001F   0E           INC     R6
   \   000020   AF83         MOV     R7,DPH
   2758          
   2759            // Allocate a buffer big enough to handle the list.
   2760            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2761                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   85....       MOV     ?V0 + 0,?V0 + 4
   \   000025   75..00       MOV     ?V0 + 1,#0x0
   \   000028   7404         MOV     A,#0x4
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?S_SHL
   \   00002F   7404         MOV     A,#0x4
   \   000031   25..         ADD     A,?V0 + 0
   \   000033   FA           MOV     R2,A
   \   000034   E4           CLR     A
   \   000035   35..         ADDC    A,?V0 + 1
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ??osal_mem_alloc?relay
   \   00003B   8A..         MOV     ?V0 + 2,R2
   \   00003D   8B..         MOV     ?V0 + 3,R3
   2762            if ( pRsp )
   \   00003F   EA           MOV     A,R2
   \   000040   7001         JNZ     ??ZDO_ParseMgmNwkDiscRsp_1
   \   000042   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   2763            {
   2764              uint8 x;
   2765              mgmtNwkDiscItem_t *pList;
   2766          
   2767              pRsp->status = status;
   \   000048   12....       LCALL   ?Subroutine17 & 0xFFFF
   2768              pRsp->networkCount = networkCount;
   2769              pRsp->startIndex = startIndex;
   2770              pRsp->networkListCount = networkListCount;
   2771              pList = pRsp->list;
   \                     ??CrossCallReturnLabel_2:
   \   00004B   EA           MOV     A,R2
   \   00004C   2404         ADD     A,#0x4
   \   00004E   F5..         MOV     ?V0 + 0,A
   \   000050   EB           MOV     A,R3
   \   000051   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2772          
   2773              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_485:
   \   000054   75..00       MOV     ?V0 + 5,#0x0
   \   000057   806F         SJMP    ??ZDO_ParseMgmNwkDiscRsp_3
   2774              {
   2775                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   000059                ; Setup parameters for call to function sAddrExtCpy
   \   000059   EE           MOV     A,R6
   \   00005A   FC           MOV     R4,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FD           MOV     R5,A
   \   00005D   AA..         MOV     R2,?V0 + 0
   \   00005F   AB..         MOV     R3,?V0 + 1
   \   000061   12....       LCALL   ??sAddrExtCpy?relay
   2776                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000064   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2777                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_315:
   \   00006B   EE           MOV     A,R6
   \   00006C   2408         ADD     A,#0x8
   \   00006E   12....       LCALL   ?Subroutine113 & 0xFFFF
   2778          
   2779                pList->logicalChannel = *msg++;
   2780                pList->stackProfile = (*msg) & 0x0F;
   2781                pList->version = (*msg++ >> 4) & 0x0F;
   2782                pList->beaconOrder = (*msg) & 0x0F;
   2783                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   2784                pList->permitJoining = *msg++;
   2785                pList++;
   2786              }
   \                     ??CrossCallReturnLabel_189:
   \   000071   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000074   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000077   540F         ANL     A,#0xf
   \   000079   C0E0         PUSH    A
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   240B         ADD     A,#0xb
   \   00007F   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000082   D0E0         POP     A
   \   000084   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000087   C0E0         PUSH    A
   \   000089   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00008C   D0E0         POP     A
   \   00008E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000091   540F         ANL     A,#0xf
   \   000093   C0E0         PUSH    A
   \   000095   E5..         MOV     A,?V0 + 0
   \   000097   240D         ADD     A,#0xd
   \   000099   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   00009C   D0E0         POP     A
   \   00009E   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000A1   C0E0         PUSH    A
   \   0000A3   E5..         MOV     A,?V0 + 0
   \   0000A5   240E         ADD     A,#0xe
   \   0000A7   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0000AA   D0E0         POP     A
   \   0000AC   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000AF   C0E0         PUSH    A
   \   0000B1   E5..         MOV     A,?V0 + 0
   \   0000B3   240F         ADD     A,#0xf
   \   0000B5   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   0000B8   D0E0         POP     A
   \   0000BA   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000BD   2410         ADD     A,#0x10
   \   0000BF   F5..         MOV     ?V0 + 0,A
   \   0000C1   E5..         MOV     A,?V0 + 1
   \   0000C3   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   0000C6   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   0000C8   E5..         MOV     A,?V0 + 5
   \   0000CA   C3           CLR     C
   \   0000CB   95..         SUBB    A,?V0 + 4
   \   0000CD   408A         JC      ??ZDO_ParseMgmNwkDiscRsp_4
   2787            }
   2788          
   2789            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   02....       LJMP    ??Subroutine193_0 & 0xFFFF
   2790          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C4           SWAP    A
   \   000007   540F         ANL     A,#0xf
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V0 + 7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V0 + 5
   \   000010   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000013   E5..         MOV     A,?V0 + 4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
   2791          
   2792          /*********************************************************************
   2793           * @fn          ZDO_ParseMgmtRtgRsp
   2794           *
   2795           * @brief       This function parses the incoming Management
   2796           *              Routing response.
   2797           *
   2798           * @param       inMsg - incoming message
   2799           *
   2800           * @return      a pointer to parsed response structure (NULL if not allocated).
   2801           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2802           *          by the calling function [osal_mem_free()].
   2803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2804          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2805          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2806            ZDO_MgmtRtgRsp_t *pRsp;
   2807            uint8 status;
   2808            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   2809            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   2810            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   2811            uint8 *msg;
   2812          
   2813            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine59 & 0xFFFF
   2814          
   2815            status = *msg++;
   \                     ??CrossCallReturnLabel_493:
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2816            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2817            {
   2818              rtgCount = *msg++;
   \   00001A   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2819              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_437:
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   A3           INC     DPTR
   2820              rtgListCount = *msg++;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   A3           INC     DPTR
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   0E           INC     R6
   \   000027   AF83         MOV     R7,DPH
   2821            }
   2822          
   2823            // Allocate a buffer big enough to handle the list
   2824            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2825                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   75F006       MOV     B,#0x6
   \   00002E   12....       LCALL   ?Subroutine128 & 0xFFFF
   2826            if ( pRsp )
   \                     ??CrossCallReturnLabel_219:
   \   000031   EA           MOV     A,R2
   \   000032   7001         JNZ     ??ZDO_ParseMgmtRtgRsp_1
   \   000034   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000035   6063         JZ      ??ZDO_ParseMgmtRtgRsp_2
   2827            {
   2828              uint8 x;
   2829              rtgItem_t *pList = pRsp->list;
   \   000037   EA           MOV     A,R2
   \   000038   2404         ADD     A,#0x4
   \   00003A   F8           MOV     R0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F9           MOV     R1,A
   2830              pRsp->status = status;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   E5..         MOV     A,?V0 + 3
   \   000045   F0           MOVX    @DPTR,A
   2831              pRsp->rtgCount = rtgCount;
   \   000046   A3           INC     DPTR
   \   000047   E5..         MOV     A,?V0 + 2
   \   000049   12....       LCALL   ?Subroutine44 & 0xFFFF
   2832              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_65:
   \   00004C   E5..         MOV     A,?V0 + 1
   \   00004E   12....       LCALL   ?Subroutine44 & 0xFFFF
   2833              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_66:
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V0 + 0
   \   000054   F0           MOVX    @DPTR,A
   2834          
   2835              for ( x = 0; x < rtgListCount; x++ )
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   8039         SJMP    ??ZDO_ParseMgmtRtgRsp_3
   2836              {
   2837                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000061   FD           MOV     R5,A
   \   000062   E5..         MOV     A,?V0 + 2
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   ED           MOV     A,R5
   \   00006B   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   2838                msg += 2;
   2839                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_538:
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   12....       LCALL   ?Subroutine43 & 0xFFFF
   2840                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_63:
   \   000075   F5..         MOV     ?V0 + 2,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FD           MOV     R5,A
   \   00007A   E5..         MOV     A,?V0 + 2
   \   00007C   8882         MOV     DPL,R0
   \   00007E   8983         MOV     DPH,R1
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   ED           MOV     A,R5
   \   000085   F0           MOVX    @DPTR,A
   2841                msg += 2;
   \   000086   12....       LCALL   ?Subroutine125 & 0xFFFF
   2842                pList++;
   \                     ??CrossCallReturnLabel_209:
   \   000089   E8           MOV     A,R0
   \   00008A   2406         ADD     A,#0x6
   \   00008C   F8           MOV     R0,A
   \   00008D   E9           MOV     A,R1
   \   00008E   3400         ADDC    A,#0x0
   \   000090   F9           MOV     R1,A
   2843              }
   \   000091   05..         INC     ?V0 + 1
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   C3           CLR     C
   \   000096   95..         SUBB    A,?V0 + 0
   \   000098   40C0         JC      ??ZDO_ParseMgmtRtgRsp_4
   2844            }
   2845          
   2846            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00009A   02....       LJMP    ?Subroutine5 & 0xFFFF
   2847          }
   2848          
   2849          /*********************************************************************
   2850           * @fn          ZDO_ParseMgmtBindRsp
   2851           *
   2852           * @brief       This function parses the incoming Management
   2853           *              Binding response.
   2854           *
   2855           * @param       inMsg - pointer to message to parse
   2856           *
   2857           * @return      a pointer to parsed response structure (NULL if not allocated).
   2858           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2859           *          by the calling function [osal_mem_free()].
   2860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2861          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2862          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   2863            ZDO_MgmtBindRsp_t *pRsp;
   2864            uint8 status;
   2865            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2866            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2867            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2868            uint8 *msg;
   2869          
   2870            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine69 & 0xFFFF
   2871          
   2872            status = *msg++;
   2873            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_112:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_120
   2874            {
   2875              bindingCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine72 & 0xFFFF
   2876              startIndex = *msg++;
   2877              bindingListCount = *msg++;
   2878            }
   2879          
   2880            // Allocate a buffer big enough to handle the list
   2881            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2882                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??CrossCallReturnLabel_120:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F015       MOV     B,#0x15
   \   00001B   A4           MUL     AB
   \   00001C   F8           MOV     R0,A
   \   00001D   A9F0         MOV     R1,B
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?Subroutine127 & 0xFFFF
   2883            if ( pRsp )
   \                     ??CrossCallReturnLabel_217:
   \   000024   7001         JNZ     ??ZDO_ParseMgmtBindRsp_0
   \   000026   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2884            {
   2885              uint8 x;
   2886              apsBindingItem_t *pList = pRsp->list;
   \   00002C   EA           MOV     A,R2
   \   00002D   2404         ADD     A,#0x4
   \   00002F   FE           MOV     R6,A
   \   000030   EB           MOV     A,R3
   \   000031   3400         ADDC    A,#0x0
   \   000033   FF           MOV     R7,A
   2887              pRsp->status = status;
   \   000034   12....       LCALL   ?Subroutine17 & 0xFFFF
   2888              pRsp->bindingCount = bindingCount;
   2889              pRsp->startIndex = startIndex;
   2890              pRsp->bindingListCount = bindingListCount;
   2891          
   2892              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   000037   75..00       MOV     ?V0 + 5,#0x0
   \   00003A   8010         SJMP    ??ZDO_ParseMgmtBindRsp_2
   2893              {
   2894                osal_cpyExtAddr( pList->srcAddr, msg );
   2895                msg += Z_EXTADDR_LEN;
   2896                pList->srcEP = *msg++;
   2897          
   2898                // Get the Cluster ID
   2899          
   2900                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2901                msg += 2;
   2902                pList->dstAddr.addrMode = *msg++;
   2903                if ( pList->dstAddr.addrMode == Addr64Bit )
   2904                {
   2905                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2906                  msg += Z_EXTADDR_LEN;
   2907                  pList->dstEP = *msg++;
   2908                }
   2909                else
   2910                {
   2911                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00003C   12....       LCALL   ?Subroutine91 & 0xFFFF
   2912                  msg += 2;
   2913                }
   \                     ??CrossCallReturnLabel_157:
   \   00003F   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   2914          
   2915                pList++;
   \                     ??CrossCallReturnLabel_528:
   \   000042   EE           MOV     A,R6
   \   000043   2415         ADD     A,#0x15
   \   000045   FE           MOV     R6,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   FF           MOV     R7,A
   \   00004A   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00004C   E5..         MOV     A,?V0 + 5
   \   00004E   C3           CLR     C
   \   00004F   95..         SUBB    A,?V0 + 4
   \   000051   505C         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   AC..         MOV     R4,?V0 + 2
   \   000055   AD..         MOV     R5,?V0 + 3
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000078   85..82       MOV     DPL,?V0 + 2
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   FC           MOV     R4,A
   \   00007F   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000082   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000085   EC           MOV     A,R4
   \   000086   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000089   EE           MOV     A,R6
   \   00008A   240B         ADD     A,#0xb
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   7403         MOV     A,#0x3
   \   000093   6C           XRL     A,R4
   \   000094   70A6         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   000096                ; Setup parameters for call to function sAddrExtCpy
   \   000096   AC..         MOV     R4,?V0 + 2
   \   000098   AD..         MOV     R5,?V0 + 3
   \   00009A   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   2916              }
   2917            }
   \                     ??CrossCallReturnLabel_443:
   \   00009D   C0E0         PUSH    A
   \   00009F   EE           MOV     A,R6
   \   0000A0   2414         ADD     A,#0x14
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   0000A8   D0E0         POP     A
   \   0000AA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000AD   8093         SJMP    ??CrossCallReturnLabel_528
   2918          
   2919            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000AF   AA..         MOV     R2,?V0 + 0
   \   0000B1   AB..         MOV     R3,?V0 + 1
   \   0000B3   02....       LJMP    ?Subroutine9 & 0xFFFF
   2920          }
   2921          
   2922          /*********************************************************************
   2923           * @fn          ZDO_ParseUserDescRsp
   2924           *
   2925           * @brief       This function parses the incoming User
   2926           *              Descriptor Response.
   2927           *
   2928           * @param       inMsg - incoming response message
   2929           *
   2930           * @return      a pointer to parsed response structure (NULL if not allocated).
   2931           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2932           *          by the calling function [osal_mem_free()].
   2933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2934          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2935          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2936            ZDO_UserDescRsp_t *pRsp;
   2937            uint8 *msg;
   2938            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2939          
   2940            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00000B   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00000E   88..         MOV     ?V0 + 2,R0
   \   000010   89..         MOV     ?V0 + 3,R1
   2941          
   2942            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   2943              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   2944          
   2945            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   85..82       MOV     DPL,?V0 + 4
   \   000022   12....       LCALL   ?Subroutine110 & 0xFFFF
   2946            if ( pRsp )
   \                     ??CrossCallReturnLabel_188:
   \   000025   7001         JNZ     ??ZDO_ParseUserDescRsp_1
   \   000027   EF           MOV     A,R7
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000028   6035         JZ      ??ZDO_ParseUserDescRsp_2
   2947            {
   2948              pRsp->status = msg[0];
   \   00002A   85..82       MOV     DPL,?V0 + 2
   \   00002D   85..83       MOV     DPH,?V0 + 3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   12....       LCALL   ?Subroutine172 & 0xFFFF
   2949              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_279:
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   85..82       MOV     DPL,?V0 + 2
   \   00003D   85..83       MOV     DPH,?V0 + 3
   \   000040   A3           INC     DPTR
   \   000041   12....       LCALL   ?Subroutine26 & 0xFFFF
   2950              pRsp->length = descLen;
   2951              if ( descLen )
   \                     ??CrossCallReturnLabel_464:
   \   000044   6019         JZ      ??ZDO_ParseUserDescRsp_2
   2952                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000046                ; Setup parameters for call to function osal_memcpy
   \   000046   E5..         MOV     A,?V0 + 2
   \   000048   2404         ADD     A,#0x4
   \   00004A   F5..         MOV     ?V0 + 4,A
   \   00004C   E5..         MOV     A,?V0 + 3
   \   00004E   3400         ADDC    A,#0x0
   \   000050   F5..         MOV     ?V0 + 5,A
   \   000052   88..         MOV     ?V0 + 6,R0
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   12....       LCALL   ?Subroutine111 & 0xFFFF
   2953            }
   \                     ??CrossCallReturnLabel_461:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   2954          
   2955            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00005F   02....       LJMP    ?Subroutine1 & 0xFFFF
   2956          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET
   2957          
   2958          /*********************************************************************
   2959           * @fn          ZDO_ParseSimpleDescBuf
   2960           *
   2961           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2962           *
   2963           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2964           * @param       desc - SimpleDescriptionFormat_t *
   2965           *
   2966           *              This routine allocates storage for the cluster IDs because
   2967           *              they are 16-bit and need to be aligned to be properly processed.
   2968           *              This routine returns non-zero if an allocation fails.
   2969           *
   2970           *              NOTE: This means that the caller or user of the input structure
   2971           *                    is responsible for freeing the memory
   2972           *
   2973           * @return      0: success
   2974           *              1: failure due to malloc failure.
   2975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2976          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2977          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2978            uint8 num, i;
   2979          
   2980            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000014   12....       LCALL   ?Subroutine31 & 0xFFFF
   2981            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_30:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   2982            buf += 2;
   2983            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_537:
   \   00001E   FA           MOV     R2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   EA           MOV     A,R2
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   12....       LCALL   ?Subroutine14 & 0xFFFF
   2984            buf += 2;
   2985            desc->AppDevVer = *buf >> 4;
   2986          
   2987            desc->Reserved = 0;
   \                     ??CrossCallReturnLabel_536:
   \   00002A   C4           SWAP    A
   \   00002B   540F         ANL     A,#0xf
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine53 & 0xFFFF
   2988            buf++;
   2989          
   2990            // move in input cluster list (if any). allocate aligned memory.
   2991            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_87:
   \   000039   A3           INC     DPTR
   \   00003A   0E           INC     R6
   \   00003B   0E           INC     R6
   \   00003C   AF83         MOV     R7,DPH
   \   00003E   8C82         MOV     DPL,R4
   \   000040   8D83         MOV     DPH,R5
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8A..         MOV     ?V0 + 4,R2
   2992            if ( num )
   \   00004B   EC           MOV     A,R4
   \   00004C   2407         ADD     A,#0x7
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   ED           MOV     A,R5
   \   000051   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000054   EA           MOV     A,R2
   \   000055   6056         JZ      ??ZDO_ParseSimpleDescBuf_0
   2993            {
   2994              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000057                ; Setup parameters for call to function osal_mem_alloc
   \   000057   C3           CLR     C
   \   000058   33           RLC     A
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   33           RLC     A
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??osal_mem_alloc?relay
   \   000060   85..82       MOV     DPL,?V0 + 2
   \   000063   85..83       MOV     DPH,?V0 + 3
   \   000066   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000069   85..82       MOV     DPL,?V0 + 2
   \   00006C   85..83       MOV     DPH,?V0 + 3
   \   00006F   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000072   7001         JNZ     ??ZDO_ParseSimpleDescBuf_1
   \   000074   E9           MOV     A,R1
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000075   7005         JNZ     ??ZDO_ParseSimpleDescBuf_2
   2995              {
   2996                // malloc failed. we're done.
   2997                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000077   7901         MOV     R1,#0x1
   \   000079   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   2998              }
   2999              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00007C   7C00         MOV     R4,#0x0
   \   00007E   8027         SJMP    ??CrossCallReturnLabel_55
   3000              {
   3001                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F5..         MOV     ?V0 + 6,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FB           MOV     R3,A
   \   00008A   E4           CLR     A
   \   00008B   25..         ADD     A,?V0 + 6
   \   00008D   EB           MOV     A,R3
   \   00008E   F5..         MOV     ?V0 + 7,A
   \   000090   EC           MOV     A,R4
   \   000091   33           RLC     A
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FB           MOV     R3,A
   \   000096   E8           MOV     A,R0
   \   000097   2A           ADD     A,R2
   \   000098   F582         MOV     DPL,A
   \   00009A   E9           MOV     A,R1
   \   00009B   3B           ADDC    A,R3
   \   00009C   F583         MOV     DPH,A
   \   00009E   E5..         MOV     A,?V0 + 6
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E5..         MOV     A,?V0 + 7
   \   0000A4   12....       LCALL   ?Subroutine39 & 0xFFFF
   3002                buf += 2;
   3003              }
   \                     ??CrossCallReturnLabel_55:
   \   0000A7   EC           MOV     A,R4
   \   0000A8   C3           CLR     C
   \   0000A9   95..         SUBB    A,?V0 + 4
   \   0000AB   40D3         JC      ??ZDO_ParseSimpleDescBuf_5
   3004            }
   3005          
   3006            // move in output cluster list (if any). allocate aligned memory.
   3007            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   0000AD   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8A..         MOV     ?V0 + 4,R2
   3008            if (num)
   \   0000C2   607F         JZ      ??ZDO_ParseSimpleDescBuf_6
   3009            {
   3010              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000C4   E5..         MOV     A,?V0 + 0
   \   0000C6   240A         ADD     A,#0xa
   \   0000C8   F8           MOV     R0,A
   \   0000C9   E5..         MOV     A,?V0 + 1
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F9           MOV     R1,A
   \   0000CE   88..         MOV     ?V0 + 0,R0
   \   0000D0   89..         MOV     ?V0 + 1,R1
   \   0000D2                ; Setup parameters for call to function osal_mem_alloc
   \   0000D2   EA           MOV     A,R2
   \   0000D3   C3           CLR     C
   \   0000D4   33           RLC     A
   \   0000D5   FA           MOV     R2,A
   \   0000D6   E4           CLR     A
   \   0000D7   33           RLC     A
   \   0000D8   FB           MOV     R3,A
   \   0000D9   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DC   85..82       MOV     DPL,?V0 + 0
   \   0000DF   85..83       MOV     DPH,?V0 + 1
   \   0000E2   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000E5   85..82       MOV     DPL,?V0 + 0
   \   0000E8   85..83       MOV     DPH,?V0 + 1
   \   0000EB   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000EE   7001         JNZ     ??ZDO_ParseSimpleDescBuf_7
   \   0000F0   E9           MOV     A,R1
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0000F1   7021         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3011              {
   3012                // malloc failed. free input cluster list memory if there is any
   3013                if ( desc->pAppInClusterList != NULL )
   \   0000F3   85..82       MOV     DPL,?V0 + 2
   \   0000F6   85..83       MOV     DPH,?V0 + 3
   \   0000F9   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000FC   7001         JNZ     ??ZDO_ParseSimpleDescBuf_9
   \   0000FE   EB           MOV     A,R3
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   0000FF   7003         JNZ     $+5
   \   000101   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3014                {
   3015                  osal_mem_free(desc->pAppInClusterList);
   \   000104                ; Setup parameters for call to function osal_mem_free
   \   000104   12....       LCALL   ??osal_mem_free?relay
   3016                  
   3017                  desc->pAppInClusterList = NULL;
   \   000107   85..82       MOV     DPL,?V0 + 2
   \   00010A   85..83       MOV     DPH,?V0 + 3
   \   00010D   E4           CLR     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   F0           MOVX    @DPTR,A
   \   000111   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3018                }
   3019                return 1;
   3020              }
   3021              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000114   7C00         MOV     R4,#0x0
   \   000116   8025         SJMP    ??CrossCallReturnLabel_56
   3022              {
   3023                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000118   8E82         MOV     DPL,R6
   \   00011A   8F83         MOV     DPH,R7
   \   00011C   12....       LCALL   ?Subroutine88 & 0xFFFF
   3024                buf += 2;
   3025              }
   \                     ??CrossCallReturnLabel_151:
   \   00011F   FB           MOV     R3,A
   \   000120   E4           CLR     A
   \   000121   25..         ADD     A,?V0 + 0
   \   000123   EB           MOV     A,R3
   \   000124   F5..         MOV     ?V0 + 1,A
   \   000126   EC           MOV     A,R4
   \   000127   33           RLC     A
   \   000128   FA           MOV     R2,A
   \   000129   E4           CLR     A
   \   00012A   33           RLC     A
   \   00012B   FB           MOV     R3,A
   \   00012C   E8           MOV     A,R0
   \   00012D   2A           ADD     A,R2
   \   00012E   F582         MOV     DPL,A
   \   000130   E9           MOV     A,R1
   \   000131   3B           ADDC    A,R3
   \   000132   F583         MOV     DPH,A
   \   000134   E5..         MOV     A,?V0 + 0
   \   000136   F0           MOVX    @DPTR,A
   \   000137   A3           INC     DPTR
   \   000138   E5..         MOV     A,?V0 + 1
   \   00013A   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00013D   EC           MOV     A,R4
   \   00013E   C3           CLR     C
   \   00013F   95..         SUBB    A,?V0 + 4
   \   000141   40D5         JC      ??ZDO_ParseSimpleDescBuf_10
   3026            }
   3027            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000143   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000145   02....       LJMP    ??Subroutine193_0 & 0xFFFF
   3028          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000003   0C           INC     R4
   \   000004   22           RET
   3029          
   3030          /*********************************************************************
   3031           * @fn          ZDO_ParseDeviceAnnce
   3032           *
   3033           * @brief       Parse a Device Announce message.
   3034           *
   3035           * @param       inMsg - Incoming message
   3036           * @param       pAnnce - place to put the parsed information
   3037           *
   3038           * @return      none
   3039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3040          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3041          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3042            uint8 *msg;
   3043          
   3044            // Parse incoming message
   3045            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00000C   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00000F   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   3046            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_555:
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   12....       LCALL   ?Subroutine34 & 0xFFFF
   3047            msg += 2;
   3048            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??CrossCallReturnLabel_46:
   \   000019                ; Setup parameters for call to function sAddrExtCpy
   \   000019   EE           MOV     A,R6
   \   00001A   FC           MOV     R4,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FD           MOV     R5,A
   \   00001D   E5..         MOV     A,?V0 + 0
   \   00001F   2402         ADD     A,#0x2
   \   000021   FA           MOV     R2,A
   \   000022   E5..         MOV     A,?V0 + 1
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ?Subroutine56 & 0xFFFF
   3049            msg += Z_EXTADDR_LEN;
   3050            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_91:
   \   00002A   85..82       MOV     DPL,?V0 + 0
   \   00002D   85..83       MOV     DPH,?V0 + 1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
   3051          }
   \   00003B   02....       LJMP    ??Subroutine183_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine231_0
   \   000005                ; // Fall through to label ??Subroutine231_0
   3052          
   3053          /*********************************************************************
   3054           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3055           *
   3056           * @brief       This function handles parsing of the incoming Management
   3057           *              Network Update notify.
   3058           *
   3059           * @param       inMsg - incoming message (request)
   3060           *
   3061           * @return      a pointer to parsed response structure (NULL if not allocated).
   3062           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3063           *          by the calling function [osal_mem_free()].
   3064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3065          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3066          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3067            uint8 status;
   3068            uint32 scannedChannels = 0;
   \   000005   90....       MOV     DPTR,#__Constant_0
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   12....       LCALL   ?L_MOV_X
   3069            uint16 totalTransmissions = 0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   \   000010   75..00       MOV     ?V0 + 1,#0x0
   3070            uint16 transmissionFailures = 0;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   3071            uint8 listCount = 0;
   \   000019   75..00       MOV     ?V0 + 10,#0x0
   3072            uint8 *msg = inMsg->asdu;
   \   00001C   12....       LCALL   ?Subroutine59 & 0xFFFF
   3073            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3074          
   3075            status = *msg++;
   \                     ??CrossCallReturnLabel_494:
   \   00001F   F5..         MOV     ?V0 + 11,A
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   3076            if ( status == ZSuccess )
   \   000026   702A         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3077            {
   3078              scannedChannels = osal_build_uint32( msg, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   12....       LCALL   ?Subroutine170 & 0xFFFF
   3079              msg += 4;
   \                     ??CrossCallReturnLabel_277:
   \   00002B   EE           MOV     A,R6
   \   00002C   2404         ADD     A,#0x4
   \   00002E   FE           MOV     R6,A
   \   00002F   12....       LCALL   ?Subroutine76 & 0xFFFF
   3080              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_553:
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   E9           MOV     A,R1
   \   000035   F5..         MOV     ?V0 + 1,A
   3081              msg += 2;
   \   000037   EE           MOV     A,R6
   \   000038   2402         ADD     A,#0x2
   \   00003A   0E           INC     R6
   \   00003B   0E           INC     R6
   \   00003C   12....       LCALL   ?Subroutine76 & 0xFFFF
   3082              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_554:
   \   00003F   F5..         MOV     ?V0 + 2,A
   \   000041   E9           MOV     A,R1
   \   000042   F5..         MOV     ?V0 + 3,A
   3083              msg += 2;
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   0E           INC     R6
   \   000048   0E           INC     R6
   \   000049   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   3084              listCount = *msg++;
   3085            }
   \                     ??CrossCallReturnLabel_328:
   \   00004C   F5..         MOV     ?V0 + 10,A
   \   00004E   A3           INC     DPTR
   \   00004F   0E           INC     R6
   \   000050   AF83         MOV     R7,DPH
   3086          
   3087            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000052   85..82       MOV     DPL,?V0 + 10
   \   000055   8582..       MOV     ?V0 + 8,DPL
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   740A         MOV     A,#0xa
   \   00005A   25..         ADD     A,?V0 + 8
   \   00005C   FA           MOV     R2,A
   \   00005D   E4           CLR     A
   \   00005E   3400         ADDC    A,#0x0
   \   000060   12....       LCALL   ?Subroutine132 & 0xFFFF
   3088          
   3089            if ( pRsp )
   \                     ??CrossCallReturnLabel_227:
   \   000063   7001         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000065   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000066   604A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_2
   3090            {
   3091              pRsp->status = status;
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   E5..         MOV     A,?V0 + 11
   \   00006E   F0           MOVX    @DPTR,A
   3092              pRsp->scannedChannels = scannedChannels;
   \   00006F   A3           INC     DPTR
   \   000070   78..         MOV     R0,#?V0 + 4
   \   000072   12....       LCALL   ?L_MOV_TO_X
   3093              pRsp->totalTransmissions = totalTransmissions;
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E5..         MOV     A,?V0 + 0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E5..         MOV     A,?V0 + 1
   \   000084   12....       LCALL   ?Subroutine36 & 0xFFFF
   3094              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_49:
   \   000087   E5..         MOV     A,?V0 + 2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E5..         MOV     A,?V0 + 3
   \   00008D   12....       LCALL   ?Subroutine36 & 0xFFFF
   3095              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_50:
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   E5..         MOV     A,?V0 + 10
   \   000094   F0           MOVX    @DPTR,A
   3096          
   3097              // Allocate a buffer big enough to handle the list.
   3098              if ( listCount > 0 )
   \   000095   601B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_2
   3099                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   8E..         MOV     ?V0 + 0,R6
   \   000099   8F..         MOV     ?V0 + 1,R7
   \   00009B   75..00       MOV     ?V0 + 2,#0x0
   \   00009E   78..         MOV     R0,#?V0 + 0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A3   AC..         MOV     R4,?V0 + 8
   \   0000A5   7D00         MOV     R5,#0x0
   \   0000A7   EA           MOV     A,R2
   \   0000A8   240A         ADD     A,#0xa
   \   0000AA   FA           MOV     R2,A
   \   0000AB   EB           MOV     A,R3
   \   0000AC   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   3100            }
   \                     ??CrossCallReturnLabel_462:
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   3101          
   3102            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   0000B2   AA..         MOV     R2,?V0 + 14
   \   0000B4   AB..         MOV     R3,?V0 + 15
   \   0000B6   02....       LJMP    ??Subroutine185_0 & 0xFFFF
   3103          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   3104          
   3105          /*********************************************************************
   3106           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3107           *
   3108           * @brief       This function handles parsing the incoming Management
   3109           *              Network Update request and starts the request (if needed).
   3110           *
   3111           * @param       inMsg - incoming message (request)
   3112           * @param       pReq - pointer to place to parse message to
   3113           *
   3114           * @return      none
   3115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3116          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3117          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3118            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine66 & 0xFFFF
   3119          
   3120            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_107:
   \   00000C   85..82       MOV     DPL,?V0 + 0
   \   00000F   85..83       MOV     DPH,?V0 + 1
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_TO_X
   3121            msg += 4;
   \   000017   12....       LCALL   ?Subroutine112 & 0xFFFF
   3122            pReq->scanDuration = *msg++;
   \                     ??CrossCallReturnLabel_327:
   \   00001A   FA           MOV     R2,A
   \   00001B   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00001E   EA           MOV     A,R2
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   12....       LCALL   ?Subroutine45 & 0xFFFF
   3123          
   3124            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_68:
   \   000026   C3           CLR     C
   \   000027   9406         SUBB    A,#0x6
   \   000029   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3125            {
   3126              // Request is to scan over channelMask
   3127              pReq->scanCount = *msg;
   \   00002B   12....       LCALL   ?Subroutine68 & 0xFFFF
   3128            }
   \                     ??CrossCallReturnLabel_109:
   \   00002E   8020         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3129            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000030   74FE         MOV     A,#-0x2
   \   000032   6A           XRL     A,R2
   \   000033   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000035   74FF         MOV     A,#-0x1
   \   000037   6A           XRL     A,R2
   \   000038   7017         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3130            {
   3131              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3132              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   00003A   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine47 & 0xFFFF
   3133          
   3134              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_72:
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   E0           MOVX    A,@DPTR
   \   000046   64FF         XRL     A,#0xff
   \   000048   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3135              {
   3136                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00004A   12....       LCALL   ?Subroutine71 & 0xFFFF
   3137              }
   3138            }
   \                     ??CrossCallReturnLabel_118:
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000050   F0           MOVX    @DPTR,A
   3139          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000051   02....       LJMP    ??Subroutine193_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CompareClusterLists?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_MatchEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveMatchMemory?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CopyMatchInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDMatchSendState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR\\nMODE ...">`:
   \   000000   53746172     DB "StartDevice ERR\012MODE unknown\012"
   \            74446576
   \            69636520
   \            4552520A
   \            4D4F4445
   \            20756E6B
   \            6E6F776E
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind\\n">`:
   \   000000   456E6420     DB "End Device Bind\012"
   \            44657669
   \            63652042
   \            696E640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent\\n">`:
   \   000000   53756363     DB "Success Sent\012"
   \            65737320
   \            53656E74
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout\\n">`:
   \   000000   54696D65     DB "Timeout\012"
   \            6F75740A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req\\nRsp Sent\\n">`:
   \   000000   4D617463     DB "Match Desc Req\012Rsp Sent\012"
   \            68204465
   \            73632052
   \            65710A52
   \            73702053
   \            656E740A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req\\nNon Ma...">`:
   \   000000   4D617463     DB "Match Desc Req\012Non Matched\012"
   \            68204465
   \            73632052
   \            65710A4E
   \            6F6E204D
   \            61746368
   \            65640A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
   3140          
   3141          /*********************************************************************
   3142          *********************************************************************/
   3143          
   3144          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NLME_PermitJoiningTimeout          0      0      0
     ZDMatchSendState                   1      0     70
       -> APS_SetEndDeviceBindTimeout
                                        0      0     74
       -> sAddrExtCpy                   0      0     74
       -> ZDP_BindUnbindReq             0      0     90
       -> APS_SetEndDeviceBindTimeout
                                        0      0     74
       -> ZDP_SendData                  0      0     84
       -> ZDP_SendData                  0      0     84
       -> ZDO_RemoveMatchMemory         0      0     74
     ZDO_AnyClusterMatches              0      0     41
     ZDO_BuildSimpleDescBuf             1      0     14
     ZDO_CompareClusterLists            0      0     44
     ZDO_ConvertOTAClusters             0      0     38
     ZDO_CopyMatchInfo                  0      0     48
       -> osal_memcpy                   0      0     46
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_mem_free                 0      0     40
       -> osal_mem_free                 0      0     40
     ZDO_EndDeviceBindMatchTimeoutCB
                                        2      0      0
       -> ZDMatchSendState              4      0      0
     ZDO_EndDeviceTimeoutCB             1      0     17
       -> ZDP_SendData                  0      0     34
       -> printf                        0      0     24
       -> printf                        0      0     24
       -> printf                        0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_Init                           2      0      0
       -> sAddrExtCpy                   4      0      0
       -> NLME_CoordinatorInit          4      0      0
       -> APS_ReflectorInit             4      0      0
       -> NLME_DeviceJoiningInit        4      0      0
     ZDO_MatchEndDeviceBind             1      0     30
       -> osal_mem_alloc                0      0     50
       -> osal_memset                   0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> APS_SetEndDeviceBindTimeout
                                        0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDMatchSendState              0      0     50
       -> ZDP_SendData                  0      0     60
       -> ZDP_SendData                  0      0     60
       -> ZDO_RemoveMatchMemory         0      0     50
     ZDO_ParseAddrRsp                   1      0     14
       -> osal_mem_alloc                0      0     28
       -> sAddrExtCpy                   0      0     28
     ZDO_ParseBindUnbindReq             1      0     10
       -> sAddrExtCpy                   0      0     20
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseDeviceAnnce               1      0     42
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseEPListRsp                 1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ParseEndDeviceBindReq          1      0     17
       -> sAddrExtCpy                   0      0     34
       -> osal_mem_alloc                0      0     34
       -> ZDO_ConvertOTAClusters        0      0     34
       -> osal_mem_alloc                0      0     34
       -> ZDO_ConvertOTAClusters        0      0     34
     ZDO_ParseMgmNwkDiscRsp             1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtBindRsp               1      0     18
       -> osal_mem_alloc                0      0     36
       -> sAddrExtCpy                   0      0     36
       -> sAddrExtCpy                   0      0     36
     ZDO_ParseMgmtLqiRsp                1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtNwkUpdateNotify       1      0     27
       -> osal_build_uint32             0      0     48
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
     ZDO_ParseMgmtNwkUpdateReq          1      0     16
       -> osal_build_uint32             0      0     32
     ZDO_ParseMgmtRtgRsp                1      0     14
       -> osal_mem_alloc                0      0     28
     ZDO_ParseNodeDescRsp               2      0      9
     ZDO_ParsePowerDescRsp              1      0     10
     ZDO_ParseServerDiscRsp             1      0      9
     ZDO_ParseSimpleDescBuf             1      0     25
       -> osal_mem_alloc                0      0     32
       -> osal_mem_alloc                0      0     32
       -> osal_mem_free                 0      0     32
     ZDO_ParseSimpleDescRsp             1      0      9
       -> ZDO_ParseSimpleDescBuf        0      0     18
     ZDO_ParseUserDescRsp               1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ProcessActiveEPReq             0      0     21
       -> NLME_GetShortAddr             0      0     28
       -> afNumEndPoints                0      0     28
       -> afEndPoints                   0      0     28
       -> ZDP_EPRsp                     0      0     42
     ZDO_ProcessBindUnbindReq           1      0     39
       -> sAddrExtCpy                   0      0     68
       -> NLME_GetExtAddr               0      0     68
       -> sAddrExtCmp                   0      0     68
       -> bindNumOfEntries              0      0     68
       -> APSME_BindRequest             0      0     70
       -> ZDApp_NVUpdate                0      0     68
       -> APSME_LookupNwkAddr           0      0     68
       -> ZDP_NwkAddrReq                0      0     68
       -> APSME_UnBindRequest           0      0     70
       -> ZDApp_NVUpdate                0      0     68
       -> ZDP_SendData                  0      0     78
     ZDO_ProcessDeviceAnnce             3      0     32
       -> ZDO_ParseDeviceAnnce          4      0     64
       -> AddrMgrEntryLookupNwk         4      0     64
       -> osal_memset                   4      0     64
       -> sAddrExtCmp                   4      0     64
       -> AddrMgrExtAddrSet             4      0     64
       -> AddrMgrEntryUpdate            4      0     64
     ZDO_ProcessMatchDescReq            1      0     34
       -> NLME_IsAddressBroadcast       0      0     54
       -> ZDP_EPRsp                     0      0     68
       -> NLME_IsAddressBroadcast       0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_msg_send                 0      0     54
       -> osal_mem_free                 0      0     54
       -> ZDO_AnyClusterMatches         0      0     58
       -> ZDO_AnyClusterMatches         0      0     58
       -> osal_msg_allocate             0      0     54
       -> osal_memcpy                   0      0     60
       -> osal_memcpy                   0      0     60
       -> ZDP_EPRsp                     0      0     68
       -> printf                        0      0     54
       -> printf                        0      0     54
       -> osal_mem_free                 0      0     54
       -> osal_mem_free                 0      0     54
     ZDO_ProcessMgmtBindReq             0      0     29
       -> APSME_GetRequest              0      0     48
       -> osal_mem_alloc                0      0     48
       -> APSME_GetRequest              0      0     48
       -> ZDP_MgmtBindRsp               0      0     58
       -> osal_mem_free                 0      0     48
     ZDO_ProcessMgmtDirectJoinReq       1      0     16
       -> NLME_DirectJoinRequest        0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtLeaveReq            1      0     23
       -> AddrMgrExtAddrValid           0      0     36
       -> NLME_GetExtAddr               0      0     36
       -> sAddrExtCmp                   0      0     36
       -> NLME_LeaveReq                 0      0     36
       -> ZDP_SendData                  0      0     46
     ZDO_ProcessMgmtLqiReq              1      0     66
       -> NLME_GetRequest               0      0    122
       -> AssocCount                    0      0    122
       -> osal_mem_alloc                0      0    122
       -> osal_memset                   0      0    122
       -> AssocFindDevice               0      0    122
       -> sAddrExtCpy                   0      0    122
       -> AddrMgrEntryLookupNwk         0      0    122
       -> sAddrExtCpy                   0      0    122
       -> NLME_GetRequest               0      0    122
       -> sAddrExtCpy                   0      0    122
       -> osal_memset                   0      0    122
       -> ZDP_MgmtLqiRsp                0      0    132
       -> osal_mem_free                 0      0    122
     ZDO_ProcessMgmtNwkDiscReq          1      0     23
       -> osal_build_uint32             0      0     46
       -> NLME_NwkDiscReq2              0      0     46
       -> NLME_NwkDiscTerm              0      0     46
     ZDO_ProcessMgmtPermitJoinReq       1      0     16
       -> NLME_PermitJoiningRequest     0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtRtgReq              1      0     26
       -> NLME_GetRequest               0      0     42
       -> osal_mem_alloc                0      0     42
       -> NLME_GetRequest               0      0     42
       -> ZDP_MgmtRtgRsp                0      0     52
       -> osal_mem_free                 0      0     42
     ZDO_ProcessNodeDescReq             0      0     14
       -> ZDP_NodeDescMsg               0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessPowerDescReq            0      0     14
       -> ZDP_PowerDescMsg              0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessServerDiscReq           0      0     14
       -> ZDP_ServerDiscRsp             0      0     28
     ZDO_ProcessSimpleDescReq           0      0     12
       -> afFindSimpleDesc              0      0     24
       -> ZDP_SimpleDescMsg             0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_ProcessUserDescReq             0      0     37
       -> osal_nv_read                  0      0     74
       -> ZDP_UserDescRsp               0      0     72
       -> ZDP_GenericRsp                0      0     74
     ZDO_ProcessUserDescSet             1      0     42
       -> osal_memcpy                   0      0     80
       -> osal_nv_write                 0      0     82
       -> ZDP_SendData                  0      0     84
     ZDO_RemoveMatchMemory              2      0     37
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
     ZDO_StartDevice                    1      0     34
       -> NLME_NetworkFormationRequest
                                        0      0     68
       -> NLME_StartRouterRequest       0      0     54
       -> printf                        0      0     54
       -> NLME_NetworkDiscoveryRequest
                                        0      0     54
       -> nwk_ScanJoiningOrphan         0      0     54
       -> NLME_OrphanJoinRequest        0      0     54
       -> printf                        0      0     54
       -> osal_start_timerEx            0      0     54
     ZDO_UpdateAddrManager              3      0     13
       -> AddrMgrExtAddrSet             4      0     26
       -> AddrMgrEntryUpdate            4      0     26
     ZDO_UpdateNwkStatus                1      0     12
       -> osal_msg_find                 0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_send                 0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> NLME_GetExtAddr               0      0     24


   Segment part sizes:

     Function/Label                           Bytes
     --------------                           -----
     ZDOBuildBuf                                52
     ZDO_EDBind                                  2
     matchED                                     2
     apsChannelMask                              4
     ZDO_Init                                   69
     ??Subroutine181_0                           7
     ZDO_StartDevice                           311
     ?Subroutine11                               6
     ?Subroutine37                              15
     ??Subroutine188_0                           4
     ?Subroutine25                              12
     ??Subroutine193_0                           5
     ??Subroutine218_0                           6
     ZDO_UpdateNwkStatus                       132
     ?Subroutine2                                5
     ??Subroutine192_0                           4
     ?Subroutine155                              6
     ??Subroutine199_0                           5
     ?Subroutine33                               6
     ?Subroutine176                              9
     ?Subroutine102                              7
     ZDO_CompareClusterLists                   124
     ?Subroutine107                             16
     ?Subroutine87                               6
     ??Subroutine200_0                           5
     ZDO_AnyClusterMatches                      83
     ?Subroutine88                               6
     ZDO_ProcessNodeDescReq                     66
     ?Subroutine63                              16
     ?Subroutine61                              27
     ??Subroutine183_0                           5
     ?Subroutine159                              5
     ?Subroutine163                              9
     ?Subroutine147                             15
     ?Subroutine165                              7
     ?Subroutine158                              6
     ?Subroutine174                             15
     ??Subroutine229_0                           5
     ZDO_ProcessPowerDescReq                    66
     ?Subroutine4                                2
     ??Subroutine182_0                           3
     ZDO_ProcessSimpleDescReq                  151
     ?Subroutine70                               7
     ??Subroutine194_0                           7
     ?Subroutine79                              11
     ?Subroutine151                              4
     ZDO_ProcessActiveEPReq                    118
     ?Subroutine117                              3
     ??Subroutine184_0                           4
     ??Subroutine187_0                           4
     ?Subroutine164                              9
     ?Subroutine109                              6
     ??Subroutine208_0                           4
     ?Subroutine5                                5
     ZDO_ConvertOTAClusters                     60
     ?Subroutine124                             10
     ZDO_ProcessMatchDescReq                   919
     ?Subroutine6                                3
     ??Subroutine185_0                           5
     ?Subroutine84                              31
     ??Subroutine189_0                           1
     ??Subroutine190_0                           5
     ?Subroutine35                               8
     ?Subroutine131                              6
     ?Subroutine40                               5
     ?Subroutine77                               8
     ??Subroutine212_0                           3
     ??Subroutine213_0                           6
     ?Subroutine52                               9
     ?Subroutine153                              5
     ?Subroutine86                               6
     ?Subroutine154                             10
     ??Subroutine216_0                           6
     ?Subroutine180                              7
     ?Subroutine141                              6
     ?Subroutine59                               3
     ??Subroutine223_0                           9
     ??Subroutine225_0                           4
     ?Subroutine103                              5
     ?Subroutine85                              12
     ?Subroutine142                              4
     ?Subroutine171                              7
     ?Subroutine156                              4
     ?Subroutine177                              3
     ?Subroutine132                             10
     ZDO_ProcessBindUnbindReq                  416
     ?Subroutine7                                8
     ?Subroutine162                              3
     ??Subroutine186_0                           5
     ?Subroutine96                              10
     ??Subroutine196_0                           6
     ?Subroutine169                              1
     ??Subroutine197_0                           6
     ?Subroutine119                             13
     ?Subroutine120                             13
     ?Subroutine114                              3
     ??Subroutine222_0                           5
     ?Subroutine0                                3
     ZDO_UpdateAddrManager                      38
     ?Subroutine133                             21
     ZDO_ProcessServerDiscReq                   63
     ?Subroutine64                               4
     ZDO_EndDeviceTimeoutCB                    219
     ?Subroutine82                               1
     ??Subroutine203_0                           4
     ?Subroutine57                               5
     ?Subroutine173                              1
     ??Subroutine210_0                           6
     ?Subroutine179                              8
     ??Subroutine211_0                           5
     ?Subroutine145                              3
     ZDO_ProcessMgmtLqiReq                     734
     ?Subroutine38                              16
     ?Subroutine27                              17
     ?Subroutine21                              19
     ?Subroutine104                              6
     ?Subroutine46                              10
     ?Subroutine126                              5
     ?Subroutine67                               3
     ??Subroutine198_0                           3
     ?Subroutine122                              9
     ??Subroutine221_0                           7
     ?Subroutine129                             11
     ZDO_ProcessMgmtNwkDiscReq                 115
     ?Subroutine112                              4
     ??Subroutine191_0                           4
     ?Subroutine152                              3
     ?Subroutine161                             10
     ?Subroutine53                               6
     ?Subroutine66                               7
     ?Subroutine170                             18
     ZDO_ProcessMgmtRtgReq                     268
     ?Subroutine8                                5
     ?Subroutine123                              5
     ZDO_ProcessMgmtBindReq                    288
     ZDO_ProcessMgmtDirectJoinReq               80
     ?Subroutine12                               5
     ?Subroutine157                              4
     ?Subroutine108                              3
     ??Subroutine195_0                           5
     ?Subroutine93                              11
     ZDO_ProcessMgmtLeaveReq                   190
     ?Subroutine105                              5
     ZDO_ProcessMgmtPermitJoinReq               92
     NLME_PermitJoiningTimeout                   3
     ZDO_ProcessUserDescReq                    188
     ZDO_ProcessUserDescSet                    277
     ?Subroutine3                                3
     ?Subroutine49                               4
     ?Subroutine140                              7
     ZDO_ProcessDeviceAnnce                    117
     ??Subroutine205_0                           6
     ZDO_BuildSimpleDescBuf                    176
     ?Subroutine101                             14
     ?Subroutine92                              11
     ?Subroutine89                              12
     ?Subroutine30                              13
     ?Subroutine24                              12
     ?Subroutine138                              1
     ??Subroutine201_0                          10
     ?Subroutine167                              4
     ?Subroutine178                             10
     ZDO_MatchEndDeviceBind                    535
     ?Subroutine130                              6
     ??Subroutine202_0                           7
     ?Subroutine80                               9
     ?Subroutine78                              11
     ?Subroutine73                               8
     ?Subroutine65                               7
     ??Subroutine204_0                           2
     ?Subroutine62                               3
     ??Subroutine206_0                          10
     ?Subroutine60                               3
     ??Subroutine207_0                          13
     ?Subroutine100                             13
     ?Subroutine94                              14
     ?Subroutine90                              14
     ?Subroutine83                               6
     ??Subroutine209_0                           4
     ?Subroutine148                              4
     ?Subroutine81                              10
     ?Subroutine146                              1
     ?Subroutine74                              12
     ?Subroutine50                               6
     ?Subroutine19                              17
     ?Subroutine15                               7
     ZDO_RemoveMatchMemory                     132
     ZDO_CopyMatchInfo                         229
     ?Subroutine115                             15
     ?Subroutine97                              16
     ?Subroutine113                             10
     ?Subroutine95                               5
     ZDMatchSendState                          619
     ?Subroutine9                                5
     ?Subroutine99                              13
     ?Subroutine75                              12
     ?Subroutine58                              39
     ZDO_EndDeviceBindMatchTimeoutCB
                                                16
     ZDO_ParseEndDeviceBindReq                 290
     ?Subroutine116                             11
     ?Subroutine98                               3
     ??Subroutine214_0                           6
     ?Subroutine54                               1
     ??Subroutine215_0                          12
     ?Subroutine51                              10
     ?Subroutine160                             14
     ?Subroutine44                               5
     ?Subroutine144                              7
     ?Subroutine137                             10
     ?Subroutine22                              10
     ?Subroutine13                               4
     ??Subroutine226_0                          16
     ?Subroutine172                              9
     ??Subroutine231_0                           7
     ZDO_ParseBindUnbindReq                    109
     ?Subroutine55                              11
     ?Subroutine42                               6
     ?Subroutine139                              9
     ??Subroutine224_0                           4
     ?Subroutine91                              11
     ?Subroutine31                               9
     ?Subroutine14                               2
     ??Subroutine227_0                           4
     ??Subroutine228_0                           9
     ?Subroutine56                              17
     ?Subroutine135                              5
     ?Subroutine136                              7
     ZDO_ParseAddrRsp                          195
     ?Subroutine32                               8
     ?Subroutine168                             10
     ?Subroutine28                               5
     ?Subroutine166                              9
     ?Subroutine125                              4
     ?Subroutine127                              9
     ?Subroutine118                              4
     ?Subroutine34                               7
     ?Subroutine150                             13
     ?Subroutine47                               4
     ?Subroutine45                               8
     ZDO_ParseNodeDescRsp                      226
     ?Subroutine10                               5
     ?Subroutine29                               1
     ??Subroutine217_0                           8
     ?Subroutine20                               4
     ?Subroutine134                             20
     ?Subroutine18                               6
     ?Subroutine16                              38
     ?Subroutine175                              6
     ?Subroutine41                               5
     ZDO_ParsePowerDescRsp                     170
     ZDO_ParseSimpleDescRsp                     34
     ?Subroutine1                                4
     ZDO_ParseEPListRsp                         83
     ?Subroutine111                              9
     ??Subroutine219_0                           9
     ?Subroutine26                              15
     ??Subroutine220_0                           7
     ?Subroutine110                             25
     ZDO_ParseServerDiscRsp                     57
     ZDO_ParseMgmtLqiRsp                       159
     ?Subroutine121                              4
     ?Subroutine128                             10
     ?Subroutine72                              10
     ?Subroutine149                             13
     ?Subroutine69                              24
     ?Subroutine23                               4
     ZDO_ParseMgmNwkDiscRsp                    214
     ?Subroutine48                              10
     ?Subroutine43                               9
     ?Subroutine17                              23
     ?Subroutine143                              9
     ?Subroutine71                              15
     ?Subroutine68                              13
     ZDO_ParseMgmtRtgRsp                       157
     ZDO_ParseMgmtBindRsp                      182
     ZDO_ParseUserDescRsp                       98
     ?Subroutine106                              4
     ZDO_ParseSimpleDescBuf                    328
     ?Subroutine39                               5
     ZDO_ParseDeviceAnnce                       62
     ??Subroutine230_0                           5
     ?Subroutine76                               3
     ZDO_ParseMgmtNwkUpdateNotify              185
     ?Subroutine36                               8
     ZDO_ParseMgmtNwkUpdateReq                  84
     ??ZDO_Init?relay                            6
     ??ZDO_StartDevice?relay                     6
     ??ZDO_UpdateNwkStatus?relay                 6
     ??ZDO_CompareClusterLists?relay             6
     ??ZDO_AnyClusterMatches?relay               6
     ??ZDO_ProcessNodeDescReq?relay              6
     ??ZDO_ProcessPowerDescReq?relay             6
     ??ZDO_ProcessSimpleDescReq?relay            6
     ??ZDO_ProcessActiveEPReq?relay              6
     ??ZDO_ConvertOTAClusters?relay              6
     ??ZDO_ProcessMatchDescReq?relay             6
     ??ZDO_ProcessBindUnbindReq?relay            6
     ??ZDO_UpdateAddrManager?relay               6
     ??ZDO_ProcessServerDiscReq?relay            6
     ??ZDO_EndDeviceTimeoutCB?relay              6
     ??ZDO_ProcessMgmtLqiReq?relay               6
     ??ZDO_ProcessMgmtNwkDiscReq?relay           6
     ??ZDO_ProcessMgmtRtgReq?relay               6
     ??ZDO_ProcessMgmtBindReq?relay              6
     ??ZDO_ProcessMgmtDirectJoinReq?relay        6
     ??ZDO_ProcessMgmtLeaveReq?relay             6
     ??ZDO_ProcessMgmtPermitJoinReq?relay        6
     ??NLME_PermitJoiningTimeout?relay           6
     ??ZDO_ProcessUserDescReq?relay              6
     ??ZDO_ProcessUserDescSet?relay              6
     ??ZDO_ProcessDeviceAnnce?relay              6
     ??ZDO_BuildSimpleDescBuf?relay              6
     ??ZDO_MatchEndDeviceBind?relay              6
     ??ZDO_RemoveMatchMemory?relay               6
     ??ZDO_CopyMatchInfo?relay                   6
     ??ZDMatchSendState?relay                    6
     ??ZDO_EndDeviceBindMatchTimeoutCB?relay     6
     ??ZDO_ParseEndDeviceBindReq?relay           6
     ??ZDO_ParseBindUnbindReq?relay              6
     ??ZDO_ParseAddrRsp?relay                    6
     ??ZDO_ParseNodeDescRsp?relay                6
     ??ZDO_ParsePowerDescRsp?relay               6
     ??ZDO_ParseSimpleDescRsp?relay              6
     ??ZDO_ParseEPListRsp?relay                  6
     ??ZDO_ParseServerDiscRsp?relay              6
     ??ZDO_ParseMgmtLqiRsp?relay                 6
     ??ZDO_ParseMgmNwkDiscRsp?relay              6
     ??ZDO_ParseMgmtRtgRsp?relay                 6
     ??ZDO_ParseMgmtBindRsp?relay                6
     ??ZDO_ParseUserDescRsp?relay                6
     ??ZDO_ParseSimpleDescBuf?relay              6
     ??ZDO_ParseDeviceAnnce?relay                6
     ??ZDO_ParseMgmtNwkUpdateNotify?relay        6
     ??ZDO_ParseMgmtNwkUpdateReq?relay           6
     ?<Constant "StartDevice ERR\nMODE ...">    30
     ?<Constant "End Device Bind\n">            17
     ?<Constant "Success Sent\n">               14
     ?<Constant "Timeout\n">                     9
     ?<Constant "Match Desc Req\nRsp Sent\n">   25
     ?<Constant "Match Desc Req\nNon Ma...">    28
     __Constant_0                                4

 
 11 412 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    127 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
 11 706 bytes of CODE  memory
    123 bytes of CONST memory (+ 4 bytes shared)
     60 bytes of XDATA memory

Errors: none
Warnings: none
