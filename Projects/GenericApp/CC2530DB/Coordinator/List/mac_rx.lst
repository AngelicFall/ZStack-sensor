###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             08/Jun/2018  08:42:05 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Components\mac\low_level\s #
#                          rf04\mac_rx.c                                      #
#    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³Ì #
#                          ÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC #
#                          2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfig.c #
#                          fg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  #
#                          -DNWK_START_DELAY=1000 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSta #
#                          ck´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Co #
#                          mponents\mac\low_level\srf04\mac_rx.c" -D          #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D         #
#                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D          #
#                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D   #
#                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D   #
#                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸ÐÆ #
#                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\ #
#                          GenericApp\CC2530DB\Coordinator\List\" -lA         #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\Coordinator\List\" --diag_suppress             #
#                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷ #
#                          Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\G #
#                          enericApp\CC2530DB\Coordinator\Obj\" -e            #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Users\win7\Desktop\ZSt #
#                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\P #
#                          rojects\GenericApp\CC2530DB\" -I                   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\SOURCE\" -I "C:\Users\win7\Desktop\ZStack´« #
#                          ¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projec #
#                          ts\GenericApp\CC2530DB\..\..\..\COMPONENTS\ZMAIN\T #
#                          I2530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸ #
#                          Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen #
#                          ericApp\CC2530DB\..\..\..\COMPONENTS\MT\" -I       #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I          #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\AF\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\NWK\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SEC\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SAPI\" -I            #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\SYS\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\STACK\ZDO\" -I             #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I              #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\ZMAC\" -I                  #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I           #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I        #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I   #
#                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV #
#                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC253 #
#                          0DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\" -I "C:\Program Files (x86)\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "C:\Program Files (x86)\IAR Systems\Embedded       #
#                          Workbench 5.4\8051\INC\CLIB\" -Ohz                 #
#    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\List\mac_rx.lst                     #
#    Object file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2 #
#                          .45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2530 #
#                          DB\Coordinator\Obj\mac_rx.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
      4            Revision:       $Revision: 15624 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* high-level */
     50          #include "mac_high_level.h"
     51          #include "mac_spec.h"
     52          
     53          /* exported low-level */
     54          #include "mac_low_level.h"
     55          
     56          /* low-level specific */
     57          #include "mac_rx.h"
     58          #include "mac_tx.h"
     59          #include "mac_rx_onoff.h"
     60          #include "mac_radio.h"
     61          
     62          /* target specific */
     63          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     64          #include "mac_autopend.h"
     65          
     66          /* debug */
     67          #include "mac_assert.h"
     68          
     69          
     70          /* ------------------------------------------------------------------------------------------------
     71           *                                            Defines
     72           * ------------------------------------------------------------------------------------------------
     73           */
     74          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     75          
     76          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     77          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     78                                             MAC_FCF_FIELD_LEN      +  \
     79                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     80                                             MAC_FCS_FIELD_LEN)
     81          
     82          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
     83          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
     84          
     85          /* addressing mode reserved value */
     86          #define ADDR_MODE_RESERVERED  1
     87          
     88          /* length of command frame identifier */
     89          #define CMD_FRAME_ID_LEN      1
     90          
     91          /* packet size mask is equal to the maximum value */
     92          #define PHY_PACKET_SIZE_MASK  0x7F
     93          
     94          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
     95          #define PROMISCUOUS_MODE_OFF  0x00
     96          
     97          /* bit of proprietary FCS format that indicates if the CRC is OK */
     98          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
     99          
    100          /* dummy length value for unused entry in lookup table */
    101          #define DUMMY_LEN   0xBE
    102          
    103          /* value for rxThresholdIntState */
    104          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    105          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    106          #define RX_THRESHOLD_INT_STATE_RESET      2
    107          
    108          
    109          /* ------------------------------------------------------------------------------------------------
    110           *                                             Macros
    111           * ------------------------------------------------------------------------------------------------
    112           */
    113          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    114          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    115          
    116          /*
    117           *  Macro for encoding frame control information into internal flags format.
    118           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    119           *  format *or* the specification changes, this macro will need to be modified.
    120           */
    121          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    122          
    123          /*
    124           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    125           *  the same length as the original and includes:
    126           *    1) the RSSI value
    127           *    2) the average correlation value (used for LQI)
    128           *    3) a CRC passed bit
    129           *
    130           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    131           */
    132          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    133          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    134          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    135          
    136          
    137          /* ------------------------------------------------------------------------------------------------
    138           *                                       Global Variables
    139           * ------------------------------------------------------------------------------------------------
    140           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          
    146          /* ------------------------------------------------------------------------------------------------
    147           *                                       Local Constants
    148           * ------------------------------------------------------------------------------------------------
    149           */

   \                                 In  segment CODE_C, align 1
    150          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00BE040A     DB 0, 190, 4, 10
    151          {
    152            0,                                                /* no address */
    153            DUMMY_LEN,                                        /* reserved */
    154            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    155            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    156          };
    157          
    158          
    159          /* ------------------------------------------------------------------------------------------------
    160           *                                       Local Prototypes
    161           * ------------------------------------------------------------------------------------------------
    162           */
    163          static void rxHaltCleanupFinalStep(void);
    164          
    165          static void rxStartIsr(void);
    166          static void rxAddrIsr(void);
    167          static void rxPayloadIsr(void);
    168          static void rxDiscardIsr(void);
    169          static void rxFcsIsr(void);
    170          
    171          static void rxPrepPayload(void);
    172          static void rxDiscardFrame(void);
    173          static void rxDone(void);
    174          static void rxPostRxUpdates(void);
    175          
    176          
    177          /* ------------------------------------------------------------------------------------------------
    178           *                                         Local Variables
    179           * ------------------------------------------------------------------------------------------------
    180           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          
    194          #ifdef PACKET_FILTER_STATS
    195            uint32      rxCrcFailure = 0;
    196            uint32      rxCrcSuccess = 0;
    197          #endif /* PACKET_FILTER_STATS */
    198          
    199          
    200          /**************************************************************************************************
    201           * @fn          macRxInit
    202           *
    203           * @brief       Initialize receive variable states.
    204           *
    205           * @param       none
    206           *
    207           * @return      none
    208           **************************************************************************************************
    209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    211          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    212            macRxFilter          = RX_FILTER_OFF;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#macRxFilter
   \   000008   F0           MOVX    @DPTR,A
    213            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   000009   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000C   F0           MOVX    @DPTR,A
    214            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   00000D   90....       MOV     DPTR,#pRxBuf
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    215            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   000013   90....       MOV     DPTR,#macRxActive
   \   000016   12....       LCALL   ?Subroutine4 & 0xFFFF
    216            pFuncRxState         = &rxStartIsr;
    217            macRxOutgoingAckFlag = 0;
   \                     ??CrossCallReturnLabel_2:
   \   000019   E4           CLR     A
   \   00001A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001D   F0           MOVX    @DPTR,A
    218            rxIsrActiveFlag      = 0;
   \   00001E   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000021   F0           MOVX    @DPTR,A
    219            rxResetFlag          = 0;
   \   000022   90....       MOV     DPTR,#rxResetFlag
   \   000025   F0           MOVX    @DPTR,A
    220            rxFifoOverflowCount  = 0;
   \   000026   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000029   02....       LJMP    ?Subroutine0 & 0xFFFF
    221          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pFuncRxState
   \   000004   74..         MOV     A,#(??rxStartIsr?relay & 0xff)
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   74..         MOV     A,#((??rxStartIsr?relay >> 8) & 0xff)
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine25_0
   \   000001                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    222          
    223          
    224          /**************************************************************************************************
    225           * @fn          macRxRadioPowerUpInit
    226           *
    227           * @brief       Initialization for after radio first powers up.
    228           *
    229           * @param       none
    230           *
    231           * @return      none
    232           **************************************************************************************************
    233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            /* set threshold at initial value */
    237            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   7405         MOV     A,#0x5
   \   000006   906194       MOV     DPTR,#0x6194
   \   000009   12....       LCALL   ?Subroutine6 & 0xFFFF
    238          
    239            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    240            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \                     ??CrossCallReturnLabel_6:
   \   00000C   75E9FB       MOV     0xe9,#-0x5
   \   00000F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000011   92AF         MOV     0xa8.7,C
    241          
    242            /* enable threshold interrupts */
    243            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   000013   9061A3       MOV     DPTR,#0x61a3
   \   000016   E0           MOVX    A,@DPTR
   \   000017   D2E2         SETB    0xE0 /* A   */.2
   \   000019   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00001C                REQUIRE S1CON
   \   00001C                REQUIRE _A_IEN0
   \   00001C                REQUIRE RFIRQF0
    244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5A8         MOV     A,0xa8
   \   000003   C2AF         CLR     0xa8.7
   \   000005   759B00       MOV     0x9b,#0x0
   \   000008   22           RET
    245          
    246          
    247          /**************************************************************************************************
    248           * @fn          macRxTxReset
    249           *
    250           * @brief       Reset the receive state.
    251           *
    252           * @param       none
    253           *
    254           * @return      none
    255           **************************************************************************************************
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    258          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    259            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    260            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   ??macRxHardDisable?relay
    261          
    262            /*
    263             *   Note : transmit does not require any reset logic
    264             *          beyond what macRxHardDisable() provides.
    265             */
    266          
    267            /* restore deault filter mode to off */
    268            macRxFilter = RX_FILTER_OFF;
   \   000007   E4           CLR     A
   \   000008   90....       MOV     DPTR,#macRxFilter
   \   00000B   F0           MOVX    @DPTR,A
    269          
    270            /* return promiscuous mode to default off state */
    271            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000C                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??macRxPromiscuousMode?relay
    272          }
   \   000010   02....       LJMP    ??Subroutine25_0 & 0xFFFF
    273          
    274          
    275          /**************************************************************************************************
    276           * @fn          macRxHaltCleanup
    277           *
    278           * @brief       Cleanup up the receive logic after receiver is forced off.
    279           *
    280           * @param       none
    281           *
    282           * @return      none
    283           **************************************************************************************************
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    286          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    287            rxResetFlag = 1;
   \   000004   7401         MOV     A,#0x1
   \   000006   90....       MOV     DPTR,#rxResetFlag
   \   000009   F0           MOVX    @DPTR,A
    288            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??CrossCallReturnLabel_38
    289            {
    290              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   ?Subroutine19 & 0xFFFF
    291              rxResetFlag = 0;
    292            }
    293          }
   \                     ??CrossCallReturnLabel_38:
   \   000013   02....       LJMP    ??Subroutine25_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??rxHaltCleanupFinalStep?relay
   \   000003   E4           CLR     A
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    294          
    295          
    296          /*=================================================================================================
    297           * @fn          rxHaltCleanupFinalStep
    298           *
    299           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    300           *
    301           * @param       none
    302           *
    303           * @return      none
    304           *=================================================================================================
    305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    307          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    308            /* cancel any upcoming ACK transmit complete callback */
    309            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV     DPTR,#0x61a4
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C2E0         CLR     0xE0 /* A   */.0
   \   00000A   F0           MOVX    @DPTR,A
    310          
    311            /* set start of frame threshold */
    312            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   7405         MOV     A,#0x5
   \   00000D   906194       MOV     DPTR,#0x6194
   \   000010   F0           MOVX    @DPTR,A
    313          
    314            /* flush the receive FIFO */
    315            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
    316          
    317            /* clear any receive interrupt that happened to squeak through */
    318            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   E5A8         MOV     A,0xa8
   \   000019   C2AF         CLR     0xa8.7
   \   00001B   759B00       MOV     0x9b,#0x0
   \   00001E   75E9FB       MOV     0xe9,#-0x5
   \   000021   A2E7         MOV     C,0xE0 /* A   */.7
   \   000023   92AF         MOV     0xa8.7,C
    319          
    320            /* if data buffer has been allocated, free it */
    321            if (pRxBuf != NULL)
   \   000025   90....       MOV     DPTR,#pRxBuf
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7002         JNZ     ??rxHaltCleanupFinalStep_0
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \                     ??rxHaltCleanupFinalStep_0:
   \   00002D   6007         JZ      ??rxHaltCleanupFinalStep_1
    322            {
    323              MEM_FREE((uint8 **)&pRxBuf);
   \   00002F                ; Setup parameters for call to function macDataRxMemFree
   \   00002F   7A..         MOV     R2,#(pRxBuf & 0xff)
   \   000031   7B..         MOV     R3,#((pRxBuf >> 8) & 0xff)
   \   000033   12....       LCALL   ??macDataRxMemFree?relay
    324            }
    325            pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \                     ??rxHaltCleanupFinalStep_1:
   \   000036   90....       MOV     DPTR,#pRxBuf
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   12....       LCALL   ?Subroutine4 & 0xFFFF
    326          
    327            pFuncRxState = &rxStartIsr;
    328          
    329            /* if receive was active, perform the post receive updates */
    330            if (macRxActive || macRxOutgoingAckFlag)
   \                     ??CrossCallReturnLabel_3:
   \   00003F   90....       MOV     DPTR,#macRxActive
   \   000042   E0           MOVX    A,@DPTR
   \   000043   7006         JNZ     ??rxHaltCleanupFinalStep_2
   \   000045   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000048   E0           MOVX    A,@DPTR
   \   000049   600C         JZ      ??rxHaltCleanupFinalStep_3
    331            {
    332              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_2:
   \   00004B   E4           CLR     A
   \   00004C   90....       MOV     DPTR,#macRxActive
   \   00004F   F0           MOVX    @DPTR,A
    333              macRxOutgoingAckFlag = 0;
   \   000050   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000053   F0           MOVX    @DPTR,A
    334          
    335              rxPostRxUpdates();
   \   000054                ; Setup parameters for call to function rxPostRxUpdates
   \   000054   12....       LCALL   ??rxPostRxUpdates?relay
    336            }
    337          }
   \                     ??rxHaltCleanupFinalStep_3:
   \   000057   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   \   00005A                REQUIRE S1CON
   \   00005A                REQUIRE _A_IEN0
   \   00005A                REQUIRE RFST
   \   00005A                REQUIRE RFIRQF0
    338          
    339          
    340          /**************************************************************************************************
    341           * @fn          macRxThresholdIsr
    342           *
    343           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    344           *              It implements a state machine for receiving a packet.
    345           *
    346           * @param       none
    347           *
    348           * @return      none
    349           **************************************************************************************************
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    352          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    353            /* if currently reseting, do not execute receive ISR logic */
    354            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   701D         JNZ     ??CrossCallReturnLabel_39
    355            {
    356              return;
    357            }
    358          
    359            /*
    360             *  Call the function that handles the current receive state.
    361             *  A flag is set for the duration of the call to indicate
    362             *  the ISR is executing.  This is necessary for the reset
    363             *  logic so it does not perform a reset in the middle of
    364             *  executing the ISR.
    365             */
    366            rxIsrActiveFlag = 1;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000F   F0           MOVX    @DPTR,A
    367            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000016   12....       LCALL   ?CALL_IND
    368            rxIsrActiveFlag = 0;
   \   000019   E4           CLR     A
   \   00001A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00001D   F0           MOVX    @DPTR,A
    369          
    370            /* if a reset occurred during the ISR, peform cleanup here */
    371            if (rxResetFlag)
   \   00001E   90....       MOV     DPTR,#rxResetFlag
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6003         JZ      ??CrossCallReturnLabel_39
    372            {
    373              rxHaltCleanupFinalStep();
   \   000024                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000024   12....       LCALL   ?Subroutine19 & 0xFFFF
    374              rxResetFlag = 0;
    375            }
   \                     ??CrossCallReturnLabel_39:
   \   000027   02....       LJMP    ??Subroutine25_0 & 0xFFFF
    376          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    377          
    378          
    379          /*=================================================================================================
    380           * @fn          rxStartIsr
    381           *
    382           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    383           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    384           *              allocating a buffer.
    385           *
    386           * @param       none
    387           *
    388           * @return      none
    389           *=================================================================================================
    390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          static void rxStartIsr(void)
   \                     rxStartIsr:
    392          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    393            uint8  addrLen;
    394            uint8  ackWithPending;
    395            uint8  dstAddrMode;
    396            uint8  srcAddrMode;
    397          
    398            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000A   90....       MOV     DPTR,#macRxActive
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      ??rxStartIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay
    399          
    400            /* indicate rx is active */
    401            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000013   7481         MOV     A,#-0x7f
   \   000015   90....       MOV     DPTR,#macRxActive
   \   000018   F0           MOVX    @DPTR,A
    402          
    403            /*
    404             *  For bullet proof functionality, need to see if the receiver was just turned off.
    405             *  The logic to request turning off the receiver, disables interrupts and then checks
    406             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    407             *
    408             *  There is a small hole though.  It's possible to attempt turning off the receiver
    409             *  in the window from when the receive interrupt fires and the point where macRxActive
    410             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    411             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    412             *  in the RX fifo and the receive is simply aborted.
    413             *
    414             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    415             *  the receiver will just be off at this point after a hard disable.  The check described
    416             *  above will account for this case too.  However, if a hard disable were immediately
    417             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    418             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    419             */
    420            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   000019   90....       MOV     DPTR,#macRxOnFlag
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   600D         JZ      ??rxStartIsr_1
   \   00001F   906193       MOV     DPTR,#0x6193
   \   000022   E0           MOVX    A,@DPTR
   \   000023   A2E7         MOV     C,0xE0 /* A   */.7
   \   000025   4010         JC      ??rxStartIsr_2
   \   000027   E0           MOVX    A,@DPTR
   \   000028   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002A   400B         JC      ??rxStartIsr_2
    421            {
    422              /* reset active flag */
    423              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002C   E4           CLR     A
   \   00002D   90....       MOV     DPTR,#macRxActive
   \   000030   F0           MOVX    @DPTR,A
    424          
    425              /*
    426               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    427               *  the tiny, tiny window when macRxActive was not zero.
    428               */
    429              rxPostRxUpdates();
   \   000031                ; Setup parameters for call to function rxPostRxUpdates
   \   000031   12....       LCALL   ??rxPostRxUpdates?relay
    430          
    431              /* return immediately from here */
    432              return;
   \   000034   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    433            }
    434          
    435            /*
    436             *  If interrupts are held off for too long it's possible the previous "transmit done"
    437             *  callback is pending.  If this is the case, it needs to be completed before
    438             *  continuing with the receive logic.
    439             */
    440            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   000037                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   000037   12....       LCALL   ??macCspForceTxDoneIfPending?relay
    441          
    442            /*
    443             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    444             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    445             *  That callback execute receive cleanup logic that will run at the completion
    446             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    447             */
    448            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   00003A   12....       LCALL   ?Subroutine14 & 0xFFFF
    449            macRxOutgoingAckFlag = 0;
    450          
    451            /*
    452             *  Make a module-local copy of macRxFilter.  This prevents the selected
    453             *  filter from changing in the middle of a receive.
    454             */
    455            rxFilter = macRxFilter;
   \                     ??CrossCallReturnLabel_22:
   \   00003D   90....       MOV     DPTR,#macRxFilter
   \   000040   E0           MOVX    A,@DPTR
   \   000041   90....       MOV     DPTR,#rxFilter
   \   000044   F0           MOVX    @DPTR,A
    456          
    457            /*-------------------------------------------------------------------------------
    458             *  Read initial frame information from FIFO.
    459             *
    460             *   This code is not triggered until the following are in the RX FIFO:
    461             *     frame length          - one byte containing length of MAC frame (excludes this field)
    462             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    463             *     sequence number       - one byte unique sequence identifier
    464             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    465             *                             if so, the frame can be verified and responded to immediately,
    466             *                             if not an ACK, these bytes will be processed normally
    467             */
    468          
    469            /* read frame length, frame control field, and sequence number from FIFO */
    470            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000045                ; Setup parameters for call to function macMemReadRxFifo
   \   000045   7904         MOV     R1,#0x4
   \   000047   7A..         MOV     R2,#(rxBuf & 0xff)
   \   000049   7B..         MOV     R3,#((rxBuf >> 8) & 0xff)
   \   00004B   12....       LCALL   ??macMemReadRxFifo?relay
    471          
    472            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    473            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   00004E   90....       MOV     DPTR,#rxBuf
   \   000051   E0           MOVX    A,@DPTR
   \   000052   547F         ANL     A,#0x7f
   \   000054   24FD         ADD     A,#-0x3
   \   000056   90....       MOV     DPTR,#rxUnreadLen
   \   000059   F0           MOVX    @DPTR,A
    474          
    475            /*
    476             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    477             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    478             *  the entire receive buffer is flushed.
    479             *
    480             *  In the case that this workaround is not needed, an assert is used to make sure the
    481             *  receive length field is not corrupted.  This is important because a corrupted receive
    482             *  length field is utterly fatal and, if not caught here, extremely hard to track down.
    483             */
    484            if (macChipVersion == REV_A)
   \   00005A   90....       MOV     DPTR,#macChipVersion
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   90....       MOV     DPTR,#rxUnreadLen
   \   000061   701D         JNZ     ??rxStartIsr_4
    485            {
    486              if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    487                  (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C3           CLR     C
   \   000065   947D         SUBB    A,#0x7d
   \   000067   500B         JNC     ??rxStartIsr_5
   \   000069   90....       MOV     DPTR,#(rxBuf + 1)
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   5407         ANL     A,#0x7
   \   00006F   C3           CLR     C
   \   000070   9404         SUBB    A,#0x4
   \   000072   4015         JC      ??rxStartIsr_6
    488              {
    489                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_5:
   \   000074   75E1ED       MOV     0xe1,#-0x13
   \   000077   75E1ED       MOV     0xe1,#-0x13
    490                rxDone();
   \   00007A                ; Setup parameters for call to function rxDone
   \                     ??rxStartIsr_7:
   \   00007A   12....       LCALL   ??rxDone?relay
    491                return;
   \   00007D   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    492              }
    493            }
    494            else
    495            {
    496              /* radio supplied a corrupted receive buffer length */
    497              MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
   \                     ??rxStartIsr_4:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C3           CLR     C
   \   000082   947D         SUBB    A,#0x7d
   \   000084   4003         JC      ??rxStartIsr_6
   \   000086                ; Setup parameters for call to function halAssertHandler
   \   000086   12....       LCALL   ??halAssertHandler?relay
    498            }
    499          
    500          
    501          
    502            /*-------------------------------------------------------------------------------
    503             *  Process ACKs.
    504             *
    505             *  If this frame is an ACK, process it immediately and exit from here.
    506             *  If this frame is not an ACK and transmit is listening for an ACK, let
    507             *  the transmit logic know an non-ACK was received so transmit can complete.
    508             *
    509             *  In promiscuous mode ACKs are treated like any other frame.
    510             */
    511            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_6:
   \   000089   90....       MOV     DPTR,#(rxBuf + 1)
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   5407         ANL     A,#0x7
   \   00008F   6402         XRL     A,#0x2
   \   000091   6003         JZ      $+5
   \   000093   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
   \   000096   90....       MOV     DPTR,#rxPromiscuousMode
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6003         JZ      $+5
   \   00009C   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
    512            {
    513              halIntState_t  s;
    514              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    515              /*
    516               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    517               *  these two bytes will be the FCS.
    518               */
    519          
    520              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    521              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   00009F                ; Setup parameters for call to function macMemReadRxFifo
   \   00009F   7902         MOV     R1,#0x2
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   12....       LCALL   ??macMemReadRxFifo?relay
    522          
    523              /*
    524               *  This critical section ensures that the ACK timeout won't be triggered in the
    525               *  millde of receiving the ACK frame.
    526               */
    527              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000AE   A2AF         MOV     C,0xa8.7
   \   0000B0   E4           CLR     A
   \   0000B1   92E0         MOV     0xE0 /* A   */.0,C
   \   0000B3   F5..         MOV     ?V0 + 0,A
   \   0000B5   C2AF         CLR     0xa8.7
    528          
    529              /* see if transmit is listening for an ACK */
    530              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000B7   90....       MOV     DPTR,#macTxActive
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   6486         XRL     A,#0x86
   \   0000BD   7074         JNZ     ??rxStartIsr_9
    531              {
    532                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000BF   90....       MOV     DPTR,#pMacDataTx
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   7002         JNZ     ??rxStartIsr_10
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \                     ??rxStartIsr_10:
   \   0000C7   7003         JNZ     ??rxStartIsr_11
   \   0000C9                ; Setup parameters for call to function halAssertHandler
   \   0000C9   12....       LCALL   ??halAssertHandler?relay
    533          
    534                /* record link quality metrics for the receive ACK */
    535                {
    536                  int8 rssiDbm;
    537                  uint8 corr;
    538          
    539                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
    540                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   \                     ??rxStartIsr_11:
   \   0000CC   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000CF   85..82       MOV     DPL,?XSP + 0
   \   0000D2   85..83       MOV     DPH,?XSP + 1
   \   0000D5   FA           MOV     R2,A
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   2A           ADD     A,R2
   \   0000D8   24B7         ADD     A,#-0x49
   \   0000DA   FE           MOV     R6,A
    541                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000DB   7401         MOV     A,#0x1
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   547F         ANL     A,#0x7f
   \   0000E3   FF           MOV     R7,A
    542          
    543                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000E4                ; Setup parameters for call to function macRadioComputeLQI
   \   0000E4   FA           MOV     R2,A
   \   0000E5   EE           MOV     A,R6
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   ??macRadioComputeLQI?relay
   \   0000EA   E9           MOV     A,R1
   \   0000EB   C0E0         PUSH    A
   \   0000ED   90....       MOV     DPTR,#pMacDataTx
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   2414         ADD     A,#0x14
   \   0000F3   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000F6   D0E0         POP     A
   \   0000F8   F0           MOVX    @DPTR,A
    544                  pMacDataTx->internal.correlation = corr;
   \   0000F9   90....       MOV     DPTR,#pMacDataTx
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   2415         ADD     A,#0x15
   \   0000FF   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000102   F0           MOVX    @DPTR,A
    545                  pMacDataTx->internal.rssi= rssiDbm;
   \   000103   90....       MOV     DPTR,#pMacDataTx
   \   000106   E0           MOVX    A,@DPTR
   \   000107   2416         ADD     A,#0x16
   \   000109   12....       LCALL   ?Subroutine16 & 0xFFFF
    546                }
   \                     ??CrossCallReturnLabel_26:
   \   00010C   F0           MOVX    @DPTR,A
    547          
    548                /*
    549                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    550                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    551                 */
    552                HAL_EXIT_CRITICAL_SECTION(s);
   \   00010D   E5..         MOV     A,?V0 + 0
   \   00010F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000111   92AF         MOV     0xa8.7,C
    553          
    554                /*
    555                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    556                 *  the transmit logic still needs to know.  In that case, treat the frame
    557                 *  as a non-ACK to complete the active transmit.
    558                 */
    559                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000113   7401         MOV     A,#0x1
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   E0           MOVX    A,@DPTR
   \   000119   A2E7         MOV     C,0xE0 /* A   */.7
   \   00011B   5011         JNC     ??rxStartIsr_12
    560                {
    561                  /* call transmit logic to indicate ACK was received */
    562                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   00011D                ; Setup parameters for call to function macTxAckReceivedCallback
   \   00011D   90....       MOV     DPTR,#(rxBuf + 1)
   \   000120   E0           MOVX    A,@DPTR
   \   000121   5410         ANL     A,#0x10
   \   000123   FA           MOV     R2,A
   \   000124   90....       MOV     DPTR,#(rxBuf + 3)
   \   000127   E0           MOVX    A,@DPTR
   \   000128   F9           MOV     R1,A
   \   000129   12....       LCALL   ??macTxAckReceivedCallback?relay
   \   00012C   800B         SJMP    ??rxStartIsr_13
    563                }
    564                else
    565                {
    566                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_12:
   \   00012E                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00012E   12....       LCALL   ??macTxAckNotReceivedCallback?relay
   \   000131   8006         SJMP    ??rxStartIsr_13
    567                }
    568              }
    569              else
    570              {
    571                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_9:
   \   000133   E5..         MOV     A,?V0 + 0
   \   000135   A2E0         MOV     C,0xE0 /* A   */.0
   \   000137   92AF         MOV     0xa8.7,C
    572              }
    573          
    574              /* receive is done, exit from here */
    575              rxDone();
   \                     ??rxStartIsr_13:
   \   000139                ; Setup parameters for call to function rxDone
   \   000139   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
    576              return;
    577            }
    578            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_8:
   \   00013C   90....       MOV     DPTR,#macTxActive
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   6486         XRL     A,#0x86
   \   000142   7003         JNZ     ??rxStartIsr_14
    579            {
    580              macTxAckNotReceivedCallback();
   \   000144                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000144   12....       LCALL   ??macTxAckNotReceivedCallback?relay
    581            }
    582          
    583            /*-------------------------------------------------------------------------------
    584             *  Apply filtering.
    585             *
    586             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    587             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    588             *  do not apply filtering.
    589             */
    590            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_14:
   \   000147   90....       MOV     DPTR,#rxFilter
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   6029         JZ      ??rxStartIsr_15
   \   00014D   90....       MOV     DPTR,#rxPromiscuousMode
   \   000150   E0           MOVX    A,@DPTR
   \   000151   7023         JNZ     ??rxStartIsr_15
    591            {
    592              if (/* filter all frames */
    593                   (rxFilter == RX_FILTER_ALL) ||
    594          
    595                   /* filter non-beacon frames */
    596                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    597                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    598          
    599                   /* filter non-command frames */
    600                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    601                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000153   90....       MOV     DPTR,#rxFilter
   \   000156   E0           MOVX    A,@DPTR
   \   000157   6401         XRL     A,#0x1
   \   000159   7003         JNZ     $+5
   \   00015B   02....       LJMP    ??rxStartIsr_16 & 0xFFFF
   \   00015E   90....       MOV     DPTR,#(rxBuf + 1)
   \   000161   E0           MOVX    A,@DPTR
   \   000162   5407         ANL     A,#0x7
   \   000164   FA           MOV     R2,A
   \   000165   90....       MOV     DPTR,#rxFilter
   \   000168   E0           MOVX    A,@DPTR
   \   000169   6402         XRL     A,#0x2
   \   00016B   6003         JZ      $+5
   \   00016D   02....       LJMP    ??rxStartIsr_17 & 0xFFFF
   \   000170   EA           MOV     A,R2
   \   000171   6003         JZ      $+5
   \   000173   02....       LJMP    ??rxStartIsr_16 & 0xFFFF
    602              {
    603                /* discard rest of frame */
    604                rxDiscardFrame();
    605                return;
    606              }
    607            }
    608          
    609            /*-------------------------------------------------------------------------------
    610             *  Compute length of addressing fields.  Compute payload length.
    611             */
    612          
    613            /* decode addressing modes */
    614            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_15:
   \   000176   90....       MOV     DPTR,#(rxBuf + 2)
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   FA           MOV     R2,A
   \   00017B   13           RRC     A
   \   00017C   13           RRC     A
   \   00017D   543F         ANL     A,#0x3f
   \   00017F   5403         ANL     A,#0x3
   \   000181   F5..         MOV     ?V0 + 2,A
    615            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   000183   EA           MOV     A,R2
   \   000184   C4           SWAP    A
   \   000185   13           RRC     A
   \   000186   13           RRC     A
   \   000187   5403         ANL     A,#0x3
   \   000189   F5..         MOV     ?V0 + 3,A
    616          
    617            /*
    618            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    619             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    620             *  the entire receive buffer is flushed.
    621             */
    622            if (macChipVersion == REV_A)
   \   00018B   90....       MOV     DPTR,#macChipVersion
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   7012         JNZ     ??rxStartIsr_18
    623            {
    624              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   000191   7401         MOV     A,#0x1
   \   000193   65..         XRL     A,?V0 + 3
   \   000195   7003         JNZ     $+5
   \   000197   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
   \   00019A   7401         MOV     A,#0x1
   \   00019C   65..         XRL     A,?V0 + 2
   \   00019E   7003         JNZ     $+5
   \   0001A0   02....       LJMP    ??rxStartIsr_5 & 0xFFFF
    625              {
    626                MAC_RADIO_FLUSH_RX_FIFO();
    627                rxDone();
    628                return;
    629              }
    630            }
    631          
    632            /*
    633             *  Compute the addressing field length.  A lookup table based on addressing
    634             *  mode is used for efficiency.  If the source address is present and the
    635             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    636             *  length is adjusted to match the smaller length.
    637             */
    638            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_18:
   \   0001A3   85....       MOV     ?V0 + 0,?V0 + 3
   \   0001A6   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0001A9   C0E0         PUSH    A
   \   0001AB   85....       MOV     ?V0 + 0,?V0 + 2
   \   0001AE   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0001B1   FA           MOV     R2,A
   \   0001B2   D0E0         POP     A
   \   0001B4   2A           ADD     A,R2
   \   0001B5   FE           MOV     R6,A
    639            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   0001B6   E5..         MOV     A,?V0 + 3
   \   0001B8   600A         JZ      ??rxStartIsr_19
   \   0001BA   90....       MOV     DPTR,#(rxBuf + 1)
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001C0   5002         JNC     ??rxStartIsr_19
    640            {
    641              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   0001C2   1E           DEC     R6
   \   0001C3   1E           DEC     R6
    642            }
    643          
    644            /*
    645             *  If there are not enough unread bytes to include the computed address
    646             *  plus FCS field, the frame is corrupted and must be discarded.
    647             */
    648            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_19:
   \   0001C4   90....       MOV     DPTR,#rxUnreadLen
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   FA           MOV     R2,A
   \   0001C9   8E..         MOV     ?V0 + 0,R6
   \   0001CB   7402         MOV     A,#0x2
   \   0001CD   25..         ADD     A,?V0 + 0
   \   0001CF   F8           MOV     R0,A
   \   0001D0   E4           CLR     A
   \   0001D1   3400         ADDC    A,#0x0
   \   0001D3   F9           MOV     R1,A
   \   0001D4   EA           MOV     A,R2
   \   0001D5   98           SUBB    A,R0
   \   0001D6   E4           CLR     A
   \   0001D7   99           SUBB    A,R1
   \   0001D8   C3           CLR     C
   \   0001D9   65D0         XRL     A,PSW
   \   0001DB   33           RLC     A
   \   0001DC   4036         JC      ??rxStartIsr_16
    649            {
    650              /* discard frame and exit */
    651              rxDiscardFrame();
    652              return;
    653            }
    654          
    655            /* payload length is equal to unread bytes minus address length, minus the FCS */
    656            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   C3           CLR     C
   \   0001E0   9E           SUBB    A,R6
   \   0001E1   24FE         ADD     A,#-0x2
   \   0001E3   90....       MOV     DPTR,#rxPayloadLen
   \   0001E6   F0           MOVX    @DPTR,A
    657          
    658            /*-------------------------------------------------------------------------------
    659             *  Allocate memory for the incoming frame.
    660             */
    661            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
   \   0001E7                ; Setup parameters for call to function macDataRxMemAlloc
   \   0001E7   F8           MOV     R0,A
   \   0001E8   7432         MOV     A,#0x32
   \   0001EA   28           ADD     A,R0
   \   0001EB   FA           MOV     R2,A
   \   0001EC   E4           CLR     A
   \   0001ED   3400         ADDC    A,#0x0
   \   0001EF   FB           MOV     R3,A
   \   0001F0   12....       LCALL   ??macDataRxMemAlloc?relay
   \   0001F3   90....       MOV     DPTR,#pRxBuf
   \   0001F6   12....       LCALL   ?Subroutine2 & 0xFFFF
    662            if (pRxBuf == NULL)
   \                     ??CrossCallReturnLabel_52:
   \   0001F9   7002         JNZ     ??rxStartIsr_20
   \   0001FB   A3           INC     DPTR
   \   0001FC   E0           MOVX    A,@DPTR
   \                     ??rxStartIsr_20:
   \   0001FD   701B         JNZ     ??rxStartIsr_21
    663            {
    664              /* Cancel the outgoing TX ACK */
    665              MAC_RADIO_CANCEL_TX_ACK();
   \   0001FF   75E1E8       MOV     0xe1,#-0x18
   \   000202   8010         SJMP    ??rxStartIsr_16
    666          
    667              /* buffer allocation failed, discard the frame and exit*/
    668              rxDiscardFrame();
    669              return;
    670            }
   \                     ??rxStartIsr_17:
   \   000204   E0           MOVX    A,@DPTR
   \   000205   6403         XRL     A,#0x3
   \   000207   6003         JZ      $+5
   \   000209   02....       LJMP    ??rxStartIsr_15 & 0xFFFF
   \   00020C   7403         MOV     A,#0x3
   \   00020E   6A           XRL     A,R2
   \   00020F   7003         JNZ     $+5
   \   000211   02....       LJMP    ??rxStartIsr_15 & 0xFFFF
   \                     ??rxStartIsr_16:
   \   000214                ; Setup parameters for call to function rxDiscardFrame
   \   000214   12....       LCALL   ??rxDiscardFrame?relay
   \   000217   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    671          
    672            /*-------------------------------------------------------------------------------
    673             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    674             */
    675            ackWithPending = 0;
   \                     ??rxStartIsr_21:
   \   00021A   7F00         MOV     R7,#0x0
    676            if (!rxPromiscuousMode)
   \   00021C   90....       MOV     DPTR,#(rxBuf + 1)
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   FA           MOV     R2,A
   \   000221   90....       MOV     DPTR,#rxPromiscuousMode
   \   000224   E0           MOVX    A,@DPTR
   \   000225   7007         JNZ     ??rxStartIsr_22
    677            {
    678              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   000227   7420         MOV     A,#0x20
   \   000229   5A           ANL     A,R2
   \   00022A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00022D   F0           MOVX    @DPTR,A
    679            }
    680          
    681            /*-------------------------------------------------------------------------------
    682             *  Process any ACK request.
    683             */
    684            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_22:
   \   00022E   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000231   E0           MOVX    A,@DPTR
   \   000232   6053         JZ      ??rxStartIsr_23
    685            {
    686              halIntState_t  s;
    687          
    688              /*
    689               *  This critical section ensures that the callback ISR is initiated within time
    690               *  to guarantee correlation with the strobe.
    691               */
    692              HAL_ENTER_CRITICAL_SECTION(s);
   \   000234   A2AF         MOV     C,0xa8.7
   \   000236   E4           CLR     A
   \   000237   92E0         MOV     0xE0 /* A   */.0,C
   \   000239   F5..         MOV     ?V0 + 0,A
   \   00023B   C2AF         CLR     0xa8.7
    693          
    694              /* Do not ack data packet with pending more data */
    695              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   00023D   7407         MOV     A,#0x7
   \   00023F   5A           ANL     A,R2
   \   000240   6403         XRL     A,#0x3
   \   000242   7026         JNZ     ??rxStartIsr_24
    696              {
    697                if( macRxCheckMACPendingCallback())
   \   000244                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   000244   12....       LCALL   ??macRxCheckMACPendingCallback?relay
   \   000247   E9           MOV     A,R1
   \   000248   600A         JZ      ??rxStartIsr_25
    698                {
    699                  /* Check is any mac data pending for end devices */
    700                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \                     ??rxStartIsr_26:
   \   00024A   7F04         MOV     R7,#0x4
    701                }
    702                else
    703                {
    704                  if( macSrcMatchIsEnabled )
    705                  {
    706                    /* When autopend is enabled, check if allpending is set to true */
    707                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
    708                    {
    709                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    710                    }
    711                  }
    712                  else
    713                  {
    714                    /* When autopend is disabled, check the application pending callback */
    715                    if( macRxCheckPendingCallback() )
    716                    {
    717                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    718                    }
    719                  }
    720                }
    721              }
    722          
    723              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
    724              {
    725                MAC_RADIO_TX_ACK_PEND();
   \   00024C   90618A       MOV     DPTR,#0x618a
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   D2E2         SETB    0xE0 /* A   */.2
   \   000252   801C         SJMP    ??rxStartIsr_27
    726              }
   \                     ??rxStartIsr_25:
   \   000254   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000257   E0           MOVX    A,@DPTR
   \   000258   600A         JZ      ??rxStartIsr_28
   \   00025A                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   00025A   12....       LCALL   ??MAC_SrcMatchCheckAllPending?relay
   \   00025D   E9           MOV     A,R1
   \   00025E   64FE         XRL     A,#0xfe
   \   000260   7008         JNZ     ??rxStartIsr_24
   \   000262   80E6         SJMP    ??rxStartIsr_26
   \                     ??rxStartIsr_28:
   \   000264                ; Setup parameters for call to function macRxCheckPendingCallback
   \   000264   12....       LCALL   ??macRxCheckPendingCallback?relay
   \   000267   E9           MOV     A,R1
   \   000268   70E0         JNZ     ??rxStartIsr_26
    727              else
    728              {
    729                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_24:
   \   00026A   90618A       MOV     DPTR,#0x618a
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   C2E2         CLR     0xE0 /* A   */.2
    730              }
   \                     ??rxStartIsr_27:
   \   000270   12....       LCALL   ?Subroutine6 & 0xFFFF
    731          
    732          
    733              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    734              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??CrossCallReturnLabel_7:
   \   000273   7591FE       MOV     0x91,#-0x2
   \   000276   A2E7         MOV     C,0xE0 /* A   */.7
   \   000278   92AF         MOV     0xa8.7,C
   \   00027A   9061A4       MOV     DPTR,#0x61a4
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   D2E0         SETB    0xE0 /* A   */.0
   \   000280   F0           MOVX    @DPTR,A
    735              HAL_EXIT_CRITICAL_SECTION(s);
   \   000281   E5..         MOV     A,?V0 + 0
   \   000283   A2E0         MOV     C,0xE0 /* A   */.0
   \   000285   92AF         MOV     0xa8.7,C
    736            }
    737          
    738           /*-------------------------------------------------------------------------------
    739            *  Populate the receive buffer going up to high-level.
    740            */
    741          
    742            /* configure the payload buffer */
    743            pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_23:
   \   000287   90....       MOV     DPTR,#pRxBuf
   \   00028A   E0           MOVX    A,@DPTR
   \   00028B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00028E   F0           MOVX    @DPTR,A
    744            pRxBuf->msdu.len = rxPayloadLen;
   \   00028F   90....       MOV     DPTR,#rxPayloadLen
   \   000292   E0           MOVX    A,@DPTR
   \   000293   C0E0         PUSH    A
   \   000295   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   D0E0         POP     A
   \   00029C   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    745          
    746            /* set internal values */
    747            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??CrossCallReturnLabel_54:
   \   00029F   241A         ADD     A,#0x1a
   \   0002A1   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0002A4   E5..         MOV     A,?V0 + 3
   \   0002A6   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    748            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \                     ??CrossCallReturnLabel_55:
   \   0002A9   2423         ADD     A,#0x23
   \   0002AB   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0002AE   E5..         MOV     A,?V0 + 2
   \   0002B0   F0           MOVX    @DPTR,A
    749            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   0002B1                ; Setup parameters for call to function macMcuOverflowCapture
   \   0002B1   12....       LCALL   ??macMcuOverflowCapture?relay
   \   0002B4   8A..         MOV     ?V0 + 0,R2
   \   0002B6   8B..         MOV     ?V0 + 1,R3
   \   0002B8   8C..         MOV     ?V0 + 2,R4
   \   0002BA   8D..         MOV     ?V0 + 3,R5
   \   0002BC   90....       MOV     DPTR,#pRxBuf
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   2424         ADD     A,#0x24
   \   0002C2   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0002C5   78..         MOV     R0,#?V0 + 0
   \   0002C7   12....       LCALL   ?L_MOV_TO_X
    750            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   0002CA                ; Setup parameters for call to function macMcuTimerCapture
   \   0002CA   12....       LCALL   ??macMcuTimerCapture?relay
   \   0002CD   90....       MOV     DPTR,#pRxBuf
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   2428         ADD     A,#0x28
   \   0002D3   12....       LCALL   ?Subroutine12 & 0xFFFF
    751            pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
   \                     ??CrossCallReturnLabel_18:
   \   0002D6   90....       MOV     DPTR,#(rxBuf + 1)
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   5407         ANL     A,#0x7
   \   0002DC   C0E0         PUSH    A
   \   0002DE   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002E1   D0E0         POP     A
   \   0002E3   F0           MOVX    @DPTR,A
    752            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   0002E4   90....       MOV     DPTR,#(rxBuf + 3)
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   C0E0         PUSH    A
   \   0002EA   90....       MOV     DPTR,#pRxBuf
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   2431         ADD     A,#0x31
   \   0002F0   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0002F3   D0E0         POP     A
   \   0002F5   F0           MOVX    @DPTR,A
    753            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   0002F6   90....       MOV     DPTR,#(rxBuf + 1)
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   5478         ANL     A,#0x78
   \   0002FC   C0E0         PUSH    A
   \   0002FE   90....       MOV     DPTR,#(rxBuf + 2)
   \   000301   E0           MOVX    A,@DPTR
   \   000302   C4           SWAP    A
   \   000303   540F         ANL     A,#0xf
   \   000305   5403         ANL     A,#0x3
   \   000307   FA           MOV     R2,A
   \   000308   D0E0         POP     A
   \   00030A   4A           ORL     A,R2
   \   00030B   4F           ORL     A,R7
   \   00030C   C0E0         PUSH    A
   \   00030E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000311   A3           INC     DPTR
   \   000312   D0E0         POP     A
   \   000314   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    754            pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
   \                     ??CrossCallReturnLabel_56:
   \   000317   240F         ADD     A,#0xf
   \   000319   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00031C   E4           CLR     A
   \   00031D   F0           MOVX    @DPTR,A
    755          
    756            /*-------------------------------------------------------------------------------
    757             *  If the processing the addressing fields does not require more bytes from
    758             *  the FIFO go directly address processing function.  Otherwise, configure
    759             *  interrupt to jump there once bytes are received.
    760             */
    761            if (addrLen == 0)
   \   00031E   EE           MOV     A,R6
   \   00031F   7005         JNZ     ??rxStartIsr_29
    762            {
    763              /* no addressing fields to read, prepare for payload interrupts */
    764              pFuncRxState = &rxPayloadIsr;
   \   000321   12....       LCALL   ?Subroutine5 & 0xFFFF
    765              rxPrepPayload();
    766            }
   \                     ??CrossCallReturnLabel_4:
   \   000324   8013         SJMP    ??rxStartIsr_3
    767            else
    768            {
    769              /* need to read and process addressing fields, prepare for address interrupt */
    770              rxNextLen = addrLen;
   \                     ??rxStartIsr_29:
   \   000326   90....       MOV     DPTR,#rxNextLen
   \   000329   F0           MOVX    @DPTR,A
    771              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00032A   14           DEC     A
   \   00032B   906194       MOV     DPTR,#0x6194
   \   00032E   F0           MOVX    @DPTR,A
    772              pFuncRxState = &rxAddrIsr;
   \   00032F   90....       MOV     DPTR,#pFuncRxState
   \   000332   74..         MOV     A,#(??rxAddrIsr?relay & 0xff)
   \   000334   F0           MOVX    @DPTR,A
   \   000335   A3           INC     DPTR
   \   000336   74..         MOV     A,#((??rxAddrIsr?relay >> 8) & 0xff)
   \   000338   F0           MOVX    @DPTR,A
   \                     ??rxStartIsr_3:
   \   000339   7402         MOV     A,#0x2
   \   00033B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00033E   7F04         MOV     R7,#0x4
   \   000340   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000343                REQUIRE RFIRQF1
   \   000343                REQUIRE S1CON
   \   000343                REQUIRE _A_IEN0
   \   000343                REQUIRE RFST
    773            }
    774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   24..         ADD     A,#(macRxAddrLen & 0xff)
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   34..         ADDC    A,#((macRxAddrLen >> 8) & 0xff)
   \   000009   F583         MOV     DPH,A
   \   00000B   E4           CLR     A
   \   00000C   93           MOVC    A,@A+DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#pFuncRxState
   \   000003   74..         MOV     A,#(??rxPayloadIsr?relay & 0xff)
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((??rxPayloadIsr?relay >> 8) & 0xff)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A   12....       LCALL   ??rxPrepPayload?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#pRxBuf
   \   000003   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   EF           MOV     A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   9061A4       MOV     DPTR,#0x61a4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C2E0         CLR     0xE0 /* A   */.0
   \   000006   F0           MOVX    @DPTR,A
   \   000007   E4           CLR     A
   \   000008   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#macRadioDefsRefTableId
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   740F         MOV     A,#0xf
   \   000007   58           ANL     A,R0
   \   000008   24..         ADD     A,#(macRadioDefsRssiAdj & 0xff)
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   34..         ADDC    A,#((macRadioDefsRssiAdj >> 8) & 0xff)
   \   00000F   F583         MOV     DPH,A
   \   000011   E4           CLR     A
   \   000012   93           MOVC    A,@A+DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   2432         ADD     A,#0x32
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   90....       MOV     DPTR,#pRxBuf
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F583         MOV     DPH,A
   \   000011   8A82         MOV     DPL,R2
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine26_0
   \   000004                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function macRxCompleteCallback
   \   000001   90....       MOV     DPTR,#pRxBuf
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    775          
    776          
    777          /*=================================================================================================
    778           * @fn          rxAddrIsr
    779           *
    780           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    781           *              from the incoming packet.
    782           *
    783           * @param       none
    784           *
    785           * @return      none
    786           *=================================================================================================
    787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    788          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    789          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    790            uint8 buf[MAX_ADDR_FIELDS_LEN];
    791            uint8 dstAddrMode;
    792            uint8 srcAddrMode;
    793            uint8  * p;
    794          
    795            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   ??halAssertHandler?relay
    796          
    797            /*  read out address fields into local buffer in one shot */
    798            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   12....       LCALL   ?Subroutine9 & 0xFFFF
    799          
    800            /* set pointer to buffer with addressing fields */
    801            p = buf;
   \                     ??CrossCallReturnLabel_12:
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   AC82         MOV     R4,DPL
   \   00001E   AD83         MOV     R5,DPH
    802          
    803            /* destination address */
    804            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   000020   90....       MOV     DPTR,#(rxBuf + 2)
   \   000023   E0           MOVX    A,@DPTR
   \   000024   13           RRC     A
   \   000025   13           RRC     A
   \   000026   543F         ANL     A,#0x3f
   \   000028   5403         ANL     A,#0x3
   \   00002A   FE           MOV     R6,A
    805            if (dstAddrMode != SADDR_MODE_NONE)
   \   00002B   6073         JZ      ??rxAddrIsr_1
    806            {
    807              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00002D   90....       MOV     DPTR,#pRxBuf
   \   000030   E0           MOVX    A,@DPTR
   \   000031   242C         ADD     A,#0x2c
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   3400         ADDC    A,#0x0
   \   000038   F9           MOV     R1,A
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   EC           MOV     A,R4
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   EB           MOV     A,R3
   \   000050   F0           MOVX    @DPTR,A
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   90....       MOV     DPTR,#pRxBuf
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   242A         ADD     A,#0x2a
   \   00005D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000060   12....       LCALL   ?Subroutine2 & 0xFFFF
    808              p += MAC_PAN_ID_FIELD_LEN;
    809              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??CrossCallReturnLabel_53:
   \   000063   241B         ADD     A,#0x1b
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FB           MOV     R3,A
   \   00006B   7403         MOV     A,#0x3
   \   00006D   6E           XRL     A,R6
   \   00006E   7010         JNZ     ??rxAddrIsr_2
    810              {
    811                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   000070                ; Setup parameters for call to function sAddrExtCpy
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   AC82         MOV     R4,DPL
   \   000077   AD83         MOV     R5,DPH
   \   000079   12....       LCALL   ??sAddrExtCpy?relay
    812                p += MAC_EXT_ADDR_FIELD_LEN;
   \   00007C   740A         MOV     A,#0xa
   \   00007E   8019         SJMP    ??rxAddrIsr_3
    813              }
    814              else
    815              {
    816                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_2:
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FC           MOV     R4,A
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   EC           MOV     A,R4
   \   00008F   8A82         MOV     DPL,R2
   \   000091   8B83         MOV     DPH,R3
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   E9           MOV     A,R1
   \   000096   F0           MOVX    @DPTR,A
    817                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   000097   7404         MOV     A,#0x4
   \                     ??rxAddrIsr_3:
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   AC82         MOV     R4,DPL
   \   00009E   AD83         MOV     R5,DPH
    818              }
    819            }
    820          
    821            /* sources address */
    822            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000A0   90....       MOV     DPTR,#(rxBuf + 2)
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   C4           SWAP    A
   \   0000A5   13           RRC     A
   \   0000A6   13           RRC     A
   \   0000A7   5403         ANL     A,#0x3
   \   0000A9   FE           MOV     R6,A
    823            if (srcAddrMode != SADDR_MODE_NONE)
   \   0000AA   604A         JZ      ??rxAddrIsr_4
    824            {
    825              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   0000AC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000AF   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000B1   401B         JC      ??rxAddrIsr_5
    826              {
    827                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   0000B3   8C82         MOV     DPL,R4
   \   0000B5   8D83         MOV     DPH,R5
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FA           MOV     R2,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FB           MOV     R3,A
   \   0000BC   90....       MOV     DPTR,#pRxBuf
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   242A         ADD     A,#0x2a
   \   0000C2   12....       LCALL   ?Subroutine12 & 0xFFFF
    828                p += MAC_PAN_ID_FIELD_LEN;
   \                     ??CrossCallReturnLabel_19:
   \   0000C5   EC           MOV     A,R4
   \   0000C6   2402         ADD     A,#0x2
   \   0000C8   0C           INC     R4
   \   0000C9   0C           INC     R4
   \   0000CA   ED           MOV     A,R5
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   FD           MOV     R5,A
    829              }
    830              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_5:
   \   0000CE   90....       MOV     DPTR,#pRxBuf
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   2412         ADD     A,#0x12
   \   0000D4   FA           MOV     R2,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   3400         ADDC    A,#0x0
   \   0000D9   FB           MOV     R3,A
   \   0000DA   7403         MOV     A,#0x3
   \   0000DC   6E           XRL     A,R6
   \   0000DD   7005         JNZ     ??rxAddrIsr_6
    831              {
    832                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   0000DF                ; Setup parameters for call to function sAddrExtCpy
   \   0000DF   12....       LCALL   ??sAddrExtCpy?relay
   \   0000E2   8012         SJMP    ??rxAddrIsr_4
    833              }
    834              else
    835              {
    836                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_6:
   \   0000E4   8C82         MOV     DPL,R4
   \   0000E6   8D83         MOV     DPH,R5
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   FE           MOV     R6,A
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F9           MOV     R1,A
   \   0000ED   EE           MOV     A,R6
   \   0000EE   8A82         MOV     DPL,R2
   \   0000F0   8B83         MOV     DPH,R3
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E9           MOV     A,R1
   \   0000F5   F0           MOVX    @DPTR,A
    837              }
    838            }
    839          
    840            /*-------------------------------------------------------------------------------
    841             *  Prepare for payload interrupts.
    842             */
    843            pFuncRxState = &rxPayloadIsr;
   \                     ??rxAddrIsr_4:
   \   0000F6   12....       LCALL   ?Subroutine5 & 0xFFFF
    844            rxPrepPayload();
    845          }
   \                     ??CrossCallReturnLabel_5:
   \   0000F9   7414         MOV     A,#0x14
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FE                REQUIRE ?Subroutine1
   \   0000FE                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#rxNextLen
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   AA82         MOV     R2,DPL
   \   00000D   AB83         MOV     R3,DPH
   \   00000F   12....       LCALL   ??macMemReadRxFifo?relay
   \   000012   22           RET
    846          
    847          
    848          /*=================================================================================================
    849           * @fn          rxPrepPayload
    850           *
    851           * @brief       Common code to prepare for the payload ISR.
    852           *
    853           * @param       none
    854           *
    855           * @return      none
    856           *=================================================================================================
    857           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    858          static void rxPrepPayload(void)
   \                     rxPrepPayload:
    859          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    860            if (rxPayloadLen == 0)
   \   000004   90....       MOV     DPTR,#rxPayloadLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7011         JNZ     ??rxPrepPayload_0
    861            {
    862              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   7401         MOV     A,#0x1
   \   00000C   906194       MOV     DPTR,#0x6194
   \   00000F   F0           MOVX    @DPTR,A
    863              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   74..         MOV     A,#(??rxFcsIsr?relay & 0xff)
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#((??rxFcsIsr?relay >> 8) & 0xff)
   \   000019   8013         SJMP    ??rxPrepPayload_1
    864            }
    865            else
    866            {
    867              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001B   C3           CLR     C
   \   00001C   9410         SUBB    A,#0x10
   \   00001E   5003         JNC     ??rxPrepPayload_2
   \   000020   E0           MOVX    A,@DPTR
   \   000021   8002         SJMP    ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   000023   7410         MOV     A,#0x10
   \                     ??rxPrepPayload_3:
   \   000025   90....       MOV     DPTR,#rxNextLen
   \   000028   F0           MOVX    @DPTR,A
    868              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   14           DEC     A
   \   00002B   906194       MOV     DPTR,#0x6194
    869            }
   \                     ??rxPrepPayload_1:
   \   00002E   80..         SJMP    ?Subroutine0
    870          }
    871          
    872          
    873          /*=================================================================================================
    874           * @fn          rxPayloadIsr
    875           *
    876           * @brief       Receive ISR state for reading out and storing the packet payload.
    877           *
    878           * @param       none
    879           *
    880           * @return      none
    881           *=================================================================================================
    882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    883          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
    884          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    885            MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   FA           MOV     R2,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   ??macMemReadRxFifo?relay
    886            pRxBuf->msdu.p += rxNextLen;
   \   000014   90....       MOV     DPTR,#pRxBuf
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2402         ADD     A,#0x2
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   90....       MOV     DPTR,#rxNextLen
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2A           ADD     A,R2
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FB           MOV     R3,A
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   EA           MOV     A,R2
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   EB           MOV     A,R3
   \   000039   F0           MOVX    @DPTR,A
    887            rxPayloadLen -= rxNextLen;
   \   00003A   90....       MOV     DPTR,#rxNextLen
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FA           MOV     R2,A
   \   00003F   90....       MOV     DPTR,#rxPayloadLen
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C3           CLR     C
   \   000044   9A           SUBB    A,R2
   \   000045   F0           MOVX    @DPTR,A
    888          
    889            rxPrepPayload();
   \   000046                ; Setup parameters for call to function rxPrepPayload
   \   000046   12....       LCALL   ??rxPrepPayload?relay
    890          }
   \   000049   80..         SJMP    ??Subroutine25_0
    891          
    892          
    893          /*=================================================================================================
    894           * @fn          rxFcsIsr
    895           *
    896           * @brief       Receive ISR state for handling the FCS.
    897           *
    898           * @param       none
    899           *
    900           * @return      none
    901           *=================================================================================================
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          static void rxFcsIsr(void)
   \                     rxFcsIsr:
    904          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    905            uint8 crcOK;
    906            uint8 ackWithPending = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
    907          
    908            /* read FCS, rxBuf is now available storage */
    909            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000008                ; Setup parameters for call to function macMemReadRxFifo
   \   000008   7902         MOV     R1,#0x2
   \   00000A   7A..         MOV     R2,#(rxBuf & 0xff)
   \   00000C   7B..         MOV     R3,#((rxBuf >> 8) & 0xff)
   \   00000E   12....       LCALL   ??macMemReadRxFifo?relay
    910          
    911            /*
    912             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
    913             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
    914             *    1) the RSSI value
    915             *    2) the average correlation value (used for LQI)
    916             *    3) a CRC passed bit
    917             */
    918          
    919            /* save the "CRC-is-OK" status */
    920            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000011   90....       MOV     DPTR,#(rxBuf + 1)
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5480         ANL     A,#0x80
   \   000017   F5..         MOV     ?V0 + 1,A
    921          
    922            /*
    923             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
    924             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
    925             *  a special variant of promiscuous mode is active.
    926             */
    927            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000019   7008         JNZ     ??rxFcsIsr_0
   \   00001B   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   706C         JNZ     ??rxFcsIsr_1
    928            {
    929              int8 rssiDbm;
    930              uint8 corr;
    931          
    932          #ifdef PACKET_FILTER_STATS
    933              rxCrcSuccess++;
    934          #endif /* PACKET_FILTER_STATS */
    935          
    936              /*
    937               *  As power saving optimization, set state variable to indicate physical receive
    938               *  has completed and then request turning of the receiver.  This means the receiver
    939               *  can be off (if other conditions permit) during execution of the callback function.
    940               *
    941               *  The receiver will be requested to turn off once again at the end of the receive
    942               *  logic.  There is no harm in doing this.
    943               */
    944              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000023   7402         MOV     A,#0x2
   \   000025   90....       MOV     DPTR,#macRxActive
   \   000028   F0           MOVX    @DPTR,A
    945              macRxOffRequest();
   \   000029                ; Setup parameters for call to function macRxOffRequest
   \   000029   12....       LCALL   ??macRxOffRequest?relay
    946          
    947              /* decode RSSI and correlation values */
    948              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
    949              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   \   00002C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00002F   90....       MOV     DPTR,#rxBuf
   \   000032   FA           MOV     R2,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2A           ADD     A,R2
   \   000035   24B7         ADD     A,#-0x49
   \   000037   FF           MOV     R7,A
    950              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000038   90....       MOV     DPTR,#(rxBuf + 1)
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   547F         ANL     A,#0x7f
   \   00003E   FE           MOV     R6,A
    951          
    952              /* Read the source matching result back */
    953              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \   00003F   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6009         JZ      ??rxFcsIsr_2
   \   000045                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000045   12....       LCALL   ??MAC_SrcMatchCheckResult?relay
   \   000048   E9           MOV     A,R1
   \   000049   6003         JZ      ??rxFcsIsr_2
    954              {
    955                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
    956                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   00004B   75..04       MOV     ?V0 + 0,#0x4
    957              }
    958          
    959              /* record parameters that get passed up to high-level */
    960              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_2:
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   45..         ORL     A,?V0 + 1
   \   000052   FA           MOV     R2,A
   \   000053   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000056   4A           ORL     A,R2
   \   000057   F0           MOVX    @DPTR,A
    961              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000058                ; Setup parameters for call to function macRadioComputeLQI
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   EF           MOV     A,R7
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   ??macRadioComputeLQI?relay
   \   00005F   E9           MOV     A,R1
   \   000060   C0E0         PUSH    A
   \   000062   90....       MOV     DPTR,#pRxBuf
   \   000065   E0           MOVX    A,@DPTR
   \   000066   242E         ADD     A,#0x2e
   \   000068   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00006B   D0E0         POP     A
   \   00006D   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    962              pRxBuf->mac.rssi = rssiDbm;
   \                     ??CrossCallReturnLabel_57:
   \   000070   2430         ADD     A,#0x30
   \   000072   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000075   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    963              pRxBuf->mac.correlation = corr;
   \                     ??CrossCallReturnLabel_58:
   \   000078   242F         ADD     A,#0x2f
   \   00007A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00007D   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    964          
    965              /* set the MSDU pointer to point at start of data */
    966              pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
   \                     ??CrossCallReturnLabel_59:
   \   000080   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000083   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    967          
    968              /* finally... execute callback function */
    969              macRxCompleteCallback(pRxBuf);
   \                     ??CrossCallReturnLabel_60:
   \   000086   FA           MOV     R2,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??macRxCompleteCallback?relay
    970              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   00008D   800A         SJMP    ??rxFcsIsr_3
    971            }
    972            else
    973            {
    974          #ifdef PACKET_FILTER_STATS
    975              rxCrcFailure++;
    976          #endif /* PACKET_FILTER_STATS */
    977          
    978              /*
    979               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
    980               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
    981               *  slightly more efficient to do so.)
    982               */
    983              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   00008F   12....       LCALL   ?Subroutine14 & 0xFFFF
    984              macRxOutgoingAckFlag = 0;
    985          
    986              /* the CRC failed so the packet must be discarded */
    987              MEM_FREE((uint8 **)&pRxBuf);
   \                     ??CrossCallReturnLabel_23:
   \   000092                ; Setup parameters for call to function macDataRxMemFree
   \   000092   7A..         MOV     R2,#(pRxBuf & 0xff)
   \   000094   7B..         MOV     R3,#((pRxBuf >> 8) & 0xff)
   \   000096   12....       LCALL   ??macDataRxMemFree?relay
    988              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \                     ??rxFcsIsr_3:
   \   000099   90....       MOV     DPTR,#pRxBuf
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   F0           MOVX    @DPTR,A
    989            }
    990          
    991            /* reset threshold level, reset receive state, and complete receive logic */
    992            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   0000A0   12....       LCALL   ?Subroutine3 & 0xFFFF
    993            pFuncRxState = &rxStartIsr;
    994            rxDone();
    995          }
   \                     ??CrossCallReturnLabel_0:
   \   0000A3   7F02         MOV     R7,#0x2
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7405         MOV     A,#0x5
   \   000002   906194       MOV     DPTR,#0x6194
   \   000005   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000008                ; Setup parameters for call to function rxDone
   \   000008                ; Setup parameters for call to function rxDone
   \   000008   12....       LCALL   ??rxDone?relay
   \   00000B   22           RET
    996          
    997          
    998          /*=================================================================================================
    999           * @fn          rxDone
   1000           *
   1001           * @brief       Common exit point for receive.
   1002           *
   1003           * @param       none
   1004           *
   1005           * @return      none
   1006           *=================================================================================================
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          static void rxDone(void)
   \                     rxDone:
   1009          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1010            /* if the receive FIFO has overflowed, flush it here */
   1011            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV     DPTR,#0x6193
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   500B         JNC     ??rxDone_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   4006         JC      ??rxDone_0
   1012            {
   1013              MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV     0xe1,#-0x13
   \   000014   75E1ED       MOV     0xe1,#-0x13
   1014            }
   1015          
   1016            /* mark receive as inactive */
   1017            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   000017   E4           CLR     A
   \   000018   90....       MOV     DPTR,#macRxActive
   \   00001B   F0           MOVX    @DPTR,A
   1018          
   1019            /* if there is no outgoing ACK, run the post receive updates */
   1020            if (!macRxOutgoingAckFlag)
   \   00001C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7003         JNZ     ??rxDone_1
   1021            {
   1022              rxPostRxUpdates();
   \   000022                ; Setup parameters for call to function rxPostRxUpdates
   \   000022   12....       LCALL   ??rxPostRxUpdates?relay
   1023            }
   1024          }
   \                     ??rxDone_1:
   \   000025   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   \   000028                REQUIRE RFST
   1025          
   1026          
   1027          /**************************************************************************************************
   1028           * @fn          macRxAckTxDoneCallback
   1029           *
   1030           * @brief       Function called when the outoing ACK has completed transmitting.
   1031           *
   1032           * @param       none
   1033           *
   1034           * @return      none
   1035           **************************************************************************************************
   1036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1037          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1038          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1039            macRxOutgoingAckFlag = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000008   F0           MOVX    @DPTR,A
   1040          
   1041            /*
   1042             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1043             *  could be executed before the primary receive logic completes.  To prevent this, the
   1044             *  post updates are only executed if receive logic is no longer active.  In the case the
   1045             *  post updates are not executed here, they will execute when the main receive logic
   1046             *  completes.
   1047             */
   1048            if (!macRxActive)
   \   000009   90....       MOV     DPTR,#macRxActive
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7003         JNZ     ??macRxAckTxDoneCallback_0
   1049            {
   1050              rxPostRxUpdates();
   \   00000F                ; Setup parameters for call to function rxPostRxUpdates
   \   00000F   12....       LCALL   ??rxPostRxUpdates?relay
   1051            }
   1052          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000012   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   1053          
   1054          
   1055          /*=================================================================================================
   1056           * @fn          rxPostRxUpdates
   1057           *
   1058           * @brief       Updates that need to be performed once receive is complete.
   1059           *
   1060           *              It is not fatal to execute this function if somehow receive is active.  Under
   1061           *              certain timing/interrupt conditions a new receive may have started before this
   1062           *              function executes.  This should happen very rarely (if it happens at all) and
   1063           *              would cause no problems.
   1064           *
   1065           * @param       none
   1066           *
   1067           * @return      none
   1068           *=================================================================================================
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1071          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1072            /* turn off receiver if permitted */
   1073            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL   ??macRxOffRequest?relay
   1074          
   1075            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1076            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL   ??macRadioUpdateTxPower?relay
   1077          
   1078            /* initiate and transmit that was queued during receive */
   1079            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL   ??macTxStartQueuedFrame?relay
   1080          }
   \   00000D   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   1081          
   1082          
   1083          /*=================================================================================================
   1084           * @fn          rxDiscardFrame
   1085           *
   1086           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1087           *
   1088           * @param       none
   1089           *
   1090           * @return      none
   1091           *=================================================================================================
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1094          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1095            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#(??rxStartIsr?relay & 0xff)
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#((??rxStartIsr?relay >> 8) & 0xff)
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   ??halAssertHandler?relay
   1096          
   1097            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??rxDiscardFrame_2
   1098            {
   1099              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL   ??rxDone?relay
   \   00001E   801E         SJMP    ??rxDiscardFrame_3
   1100            }
   1101            else
   1102            {
   1103              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   5003         JNC     ??rxDiscardFrame_4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   8002         SJMP    ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   000028   7410         MOV     A,#0x10
   \                     ??rxDiscardFrame_5:
   \   00002A   90....       MOV     DPTR,#rxNextLen
   \   00002D   F0           MOVX    @DPTR,A
   1104              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   14           DEC     A
   \   000030   906194       MOV     DPTR,#0x6194
   \   000033   F0           MOVX    @DPTR,A
   1105              pFuncRxState = &rxDiscardIsr;
   \   000034   90....       MOV     DPTR,#pFuncRxState
   \   000037   74..         MOV     A,#(??rxDiscardIsr?relay & 0xff)
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   74..         MOV     A,#((??rxDiscardIsr?relay >> 8) & 0xff)
   \   00003D   F0           MOVX    @DPTR,A
   1106            }
   1107          }
   \                     ??rxDiscardFrame_3:
   \   00003E   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   1108          
   1109          
   1110          /*=================================================================================================
   1111           * @fn          rxDiscardIsr
   1112           *
   1113           * @brief       Receive ISR state for discarding a packet.
   1114           *
   1115           * @param       none
   1116           *
   1117           * @return      none
   1118           *=================================================================================================
   1119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1120          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1121          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1122            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1123          
   1124            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   12....       LCALL   ?Subroutine9 & 0xFFFF
   1125            rxUnreadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_13:
   \   00000C   90....       MOV     DPTR,#rxNextLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   90....       MOV     DPTR,#rxUnreadLen
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C3           CLR     C
   \   000016   9A           SUBB    A,R2
   \   000017   F0           MOVX    @DPTR,A
   1126          
   1127            /* read out and discard bytes until all bytes of packet are disposed of */
   1128            if (rxUnreadLen != 0)
   \   000018   6011         JZ      ??rxDiscardIsr_0
   1129            {
   1130              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   00001A   C3           CLR     C
   \   00001B   9410         SUBB    A,#0x10
   \   00001D   500F         JNC     ??CrossCallReturnLabel_1
   1131              {
   1132                rxNextLen = rxUnreadLen;
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#rxNextLen
   \   000023   F0           MOVX    @DPTR,A
   1133                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000024   14           DEC     A
   \   000025   906194       MOV     DPTR,#0x6194
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8003         SJMP    ??CrossCallReturnLabel_1
   1134              }
   1135            }
   1136            else
   1137            {
   1138              /* reset threshold level, reset receive state, and complete receive logic */
   1139              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   00002B   12....       LCALL   ?Subroutine3 & 0xFFFF
   1140              pFuncRxState = &rxStartIsr;
   1141              rxDone();
   1142            }
   1143          }
   \                     ??CrossCallReturnLabel_1:
   \   00002E   7410         MOV     A,#0x10
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   1144          
   1145          
   1146          /**************************************************************************************************
   1147           * @fn          maxRxRifoOverflowIsr
   1148           *
   1149           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1150           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1151           *              It simply halts and cleanup the RX.
   1152           *
   1153           * @param       none
   1154           *
   1155           * @return      none
   1156           **************************************************************************************************
   1157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1158          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1159          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1160            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   04           INC     A
   \   000009   F0           MOVX    @DPTR,A
   1161            macRxHaltCleanup();
   \   00000A                ; Setup parameters for call to function macRxHaltCleanup
   \   00000A   12....       LCALL   ??macRxHaltCleanup?relay
   1162          }
   \   00000D   02....       LJMP    ??Subroutine25_0 & 0xFFFF
   1163          
   1164          
   1165          /**************************************************************************************************
   1166           * @fn          macRxPromiscuousMode
   1167           *
   1168           * @brief       Sets promiscuous mode - enabling or disabling it.
   1169           *
   1170           * @param       none
   1171           *
   1172           * @return      none
   1173           **************************************************************************************************
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1176          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1177            rxPromiscuousMode = mode;
   \   000007   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000A   F0           MOVX    @DPTR,A
   1178          
   1179            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000B   700A         JNZ     ??macRxPromiscuousMode_0
   1180            {
   1181                MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   00000D   E4           CLR     A
   \   00000E   906180       MOV     DPTR,#0x6180
   \   000011   F0           MOVX    @DPTR,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   4405         ORL     A,#0x5
   \   000015   8013         SJMP    ??macRxPromiscuousMode_1
   1182            }
   1183            else
   1184            {
   1185              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1186                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000017   7402         MOV     A,#0x2
   \   000019   6E           XRL     A,R6
   \   00001A   6008         JZ      ??macRxPromiscuousMode_2
   \   00001C   7401         MOV     A,#0x1
   \   00001E   6E           XRL     A,R6
   \   00001F   6003         JZ      ??macRxPromiscuousMode_2
   \   000021                ; Setup parameters for call to function halAssertHandler
   \   000021   12....       LCALL   ??halAssertHandler?relay
   1187          
   1188              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   000024   906180       MOV     DPTR,#0x6180
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??macRxPromiscuousMode_1:
   \   00002A   F0           MOVX    @DPTR,A
   1189            }
   1190          }
   \   00002B   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxRadioPowerUpInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxTxReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxHaltCleanup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxHaltCleanupFinalStep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxThresholdIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxStartIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxAddrIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPrepPayload?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPrepPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPayloadIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxFcsIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDone?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDone

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxAckTxDoneCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxPostRxUpdates?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPostRxUpdates

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxDiscardIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxFifoOverflowIsr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??macRxPromiscuousMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1191          
   1192          
   1193          
   1194          /**************************************************************************************************
   1195           *                                  Compile Time Integrity Checks
   1196           **************************************************************************************************
   1197           */
   1198          
   1199          /* check for changes to the spec that would affect the source code */
   1200          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1201               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1202               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1203               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1204               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1205               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1206               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1207               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1208               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1209          #error "ERROR!  Change to the spec that requires modification of source code."
   1210          #endif
   1211          
   1212          /* check for changes to the internal flags format */
   1213          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1214               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1215               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1216               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1217               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1218               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1219          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1220          #endif
   1221          
   1222          /* validate CRC OK bit optimization */
   1223          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1224          #error "ERROR!  Optimization relies on these bits having the same position."
   1225          #endif
   1226          
   1227          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1228          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1229          #endif
   1230          
   1231          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1232          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1233          #endif
   1234          
   1235          
   1236          /**************************************************************************************************
   1237          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     macRxAckTxDoneCallback             2      0      0
       -> rxPostRxUpdates               4      0      0
     macRxFifoOverflowIsr               2      0      0
       -> macRxHaltCleanup              4      0      0
     macRxHaltCleanup                   2      0      0
       -> rxHaltCleanupFinalStep        4      0      0
     macRxInit                          2      0      0
     macRxPromiscuousMode               0      0      9
       -> halAssertHandler              0      0     18
     macRxRadioPowerUpInit              2      0      0
     macRxThresholdIsr                  2      0      0
       -> rxHaltCleanupFinalStep        4      0      0
     macRxTxReset                       2      0      0
       -> macRxHardDisable              4      0      0
       -> macRxPromiscuousMode          4      0      0
     rxAddrIsr                          0      0     29
       -> halAssertHandler              0      0     58
       -> macMemReadRxFifo              0      0     58
       -> sAddrExtCpy                   0      0     58
       -> sAddrExtCpy                   0      0     58
       -> rxPrepPayload                 0      0     58
     rxDiscardFrame                     2      0     14
       -> halAssertHandler              4      0      0
       -> rxDone                        4      0      0
     rxDiscardIsr                       2      0     16
       -> macMemReadRxFifo              4      0     32
       -> rxDone                        4      0     32
     rxDone                             2      0     16
       -> rxPostRxUpdates               4      0      0
     rxFcsIsr                           1      0     10
       -> macMemReadRxFifo              0      0     20
       -> macRxOffRequest               0      0     20
       -> MAC_SrcMatchCheckResult       0      0     20
       -> macRadioComputeLQI            0      0     20
       -> macRxCompleteCallback         0      0     20
       -> macDataRxMemFree              0      0     20
       -> rxDone                        0      0     20
     rxHaltCleanupFinalStep             2      0      0
       -> macDataRxMemFree              4      0      0
       -> rxPostRxUpdates               4      0      0
     rxPayloadIsr                       2      0      0
       -> macMemReadRxFifo              4      0      0
       -> rxPrepPayload                 4      0      0
     rxPostRxUpdates                    2      0     14
       -> macRxOffRequest               4      0      0
       -> macRadioUpdateTxPower         4      0      0
       -> macTxStartQueuedFrame         4      0      0
     rxPrepPayload                      2      0     29
     rxStartIsr                         1      0     14
       -> halAssertHandler              0      0     28
       -> rxPostRxUpdates               0      0     28
       -> macCspForceTxDoneIfPending
                                        0      0     28
       -> macMemReadRxFifo              0      0     28
       -> rxDone                        0      0     28
       -> halAssertHandler              0      0     28
       -> macMemReadRxFifo              0      0     28
       -> halAssertHandler              0      0     28
       -> macRadioComputeLQI            0      0     28
       -> macTxAckReceivedCallback      0      0     28
       -> macTxAckNotReceivedCallback
                                        0      0     28
       -> rxDone                        0      0     28
       -> macTxAckNotReceivedCallback
                                        0      0     28
       -> macDataRxMemAlloc             0      0     28
       -> rxDiscardFrame                0      0     28
       -> macRxCheckMACPendingCallback
                                        0      0     28
       -> MAC_SrcMatchCheckAllPending
                                        0      0     28
       -> macRxCheckPendingCallback     0      0     28
       -> macMcuOverflowCapture         0      0     28
       -> macMcuTimerCapture            0      0     28
       -> rxPrepPayload                 0      0     28


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RFIRQF1                           1
     S1CON                             1
     _A_IEN0                           1
     RFST                              1
     RFIRQF0                           1
     macRxActive                       1
     macRxFilter                       1
     macRxOutgoingAckFlag              1
     macRxAddrLen                      4
     pFuncRxState                      2
     pRxBuf                            2
     rxBuf                             4
     rxUnreadLen                       1
     rxNextLen                         1
     rxPayloadLen                      1
     rxFilter                          1
     rxPromiscuousMode                 1
     rxIsrActiveFlag                   1
     rxResetFlag                       1
     rxFifoOverflowCount               1
     macRxInit                        44
     ?Subroutine4                      4
     ?Subroutine20                    12
     ?Subroutine0                      1
     ??Subroutine25_0                  7
     macRxRadioPowerUpInit            28
     ?Subroutine6                      9
     macRxTxReset                     19
     macRxHaltCleanup                 22
     ?Subroutine19                     9
     rxHaltCleanupFinalStep           90
     macRxThresholdIsr                42
     ?Subroutine23                     4
     ?Subroutine24                     9
     rxStartIsr                      835
     ?Subroutine18                    14
     ?Subroutine11                     4
     ?Subroutine22                    12
     ?Subroutine17                     4
     ?Subroutine21                    11
     ?Subroutine12                     9
     ?Subroutine5                     14
     ?Subroutine13                     9
     ?Subroutine16                     5
     ?Subroutine15                     5
     ?Subroutine14                    13
     ?Subroutine8                     20
     ?Subroutine7                     26
     ?Subroutine2                      4
     ??Subroutine26_0                  6
     rxAddrIsr                       254
     ?Subroutine1                      5
     ?Subroutine10                     6
     ?Subroutine9                     19
     rxPrepPayload                    48
     rxPayloadIsr                     75
     rxFcsIsr                        168
     ?Subroutine3                     12
     rxDone                           40
     macRxAckTxDoneCallback           21
     rxPostRxUpdates                  16
     rxDiscardFrame                   65
     rxDiscardIsr                     54
     macRxFifoOverflowIsr             16
     macRxPromiscuousMode             46
     ??macRxInit?relay                 6
     ??macRxRadioPowerUpInit?relay     6
     ??macRxTxReset?relay              6
     ??macRxHaltCleanup?relay          6
     ??rxHaltCleanupFinalStep?relay    6
     ??macRxThresholdIsr?relay         6
     ??rxStartIsr?relay                6
     ??rxAddrIsr?relay                 6
     ??rxPrepPayload?relay             6
     ??rxPayloadIsr?relay              6
     ??rxFcsIsr?relay                  6
     ??rxDone?relay                    6
     ??macRxAckTxDoneCallback?relay    6
     ??rxPostRxUpdates?relay           6
     ??rxDiscardFrame?relay            6
     ??rxDiscardIsr?relay              6
     ??macRxFifoOverflowIsr?relay      6
     ??macRxPromiscuousMode?relay      6

 
 2 136 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 2 248 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none
