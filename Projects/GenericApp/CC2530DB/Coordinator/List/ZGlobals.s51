///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:41:36 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Components\stack\sys\ZGl /
//                          obals.c                                           /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCo /
//                          ord.cfg" (-DCPU32MHZ -DROOT=__near_func           /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Components\stack\sys\ZGlobals.c" -D ZTOOL_P1 -D   /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          HAL_PA_LNA -D SERIAL_SUPPORTED=DEBUG -D           /
//                          SENSOR_TYPE_Coord -D CHANLIST_C_R_E=25 -D         /
//                          ZDAPP_CONFIG_PAN_ID=0x0004 -D FT_PAN_ID_C_R_C -D  /
//                          ZigBee_C_R_E_Engineering -D ZDO_COORDINATOR=0 -D  /
//                          xNV_RESTORE -lC "C:\Users\win7\Desktop\ZStack´«¸Ð /
//                          Æ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Project /
//                          s\GenericApp\CC2530DB\Coordinator\List\" -lA      /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" --diag_suppress          /
//                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ /
//                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects /
//                          \GenericApp\CC2530DB\Coordinator\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã /
//                          ÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen /
//                          ericApp\CC2530DB\..\SOURCE\" -I                   /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Coordinator\List\ZGlobals.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZGlobals

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CRCRC?relay
        FUNCTION ??CRCRC?relay,0203H
        PUBLIC ??zgInit?relay
        FUNCTION ??zgInit?relay,0203H
        PUBLIC ??zgInitItems?relay
        FUNCTION ??zgInitItems?relay,0203H
        PUBLIC ??zgReadStartupOptions?relay
        FUNCTION ??zgReadStartupOptions?relay,0203H
        PUBLIC ??zgSetItem?relay
        FUNCTION ??zgSetItem?relay,0203H
        PUBLIC ??zgWriteStartupOptions?relay
        FUNCTION ??zgWriteStartupOptions?relay,0203H
        PUBLIC CRCRC
        FUNCTION CRCRC,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC DEVICE_LOGICAL_TYPE
        PUBLIC ZG_BUILD_COORDINATOR_TYPE
        PUBLIC ZG_BUILD_ENDDEVICE_TYPE
        PUBLIC ZG_BUILD_JOINING_TYPE
        PUBLIC ZG_BUILD_RTRONLY_TYPE
        PUBLIC ZG_BUILD_RTR_TYPE
        PUBLIC ZG_DEVICE_COORDINATOR_TYPE
        PUBLIC ZG_DEVICE_JOINING_TYPE
        PUBLIC ZG_DEVICE_RTR_TYPE
        PUBLIC ZSTACK_DEVICE_BUILD
        PUBWEAK __Constant_2000000
        PUBLIC zgApsAckWaitMultiplier
        PUBLIC zgApsDefaultMaxBindingTime
        PUBLIC zgApsNonMemberRadius
        PUBLIC zgApsUseExtendedPANID
        PUBLIC zgApsUseInsecureJoin
        PUBLIC zgApscAckWaitDurationPolled
        PUBLIC zgApscMaxFrameRetries
        PUBLIC zgApsfInterframeDelay
        PUBLIC zgApsfMaxWindowSize
        PUBLIC zgBcastDeliveryTime
        PUBLIC zgConcentratorDiscoveryTime
        PUBLIC zgConcentratorEnable
        PUBLIC zgConcentratorRC
        PUBLIC zgConcentratorRadius
        PUBLIC zgConfigPANID
        PUBLIC zgDefaultChannelList
        PUBLIC zgDefaultStartingScanDuration
        PUBLIC zgDeviceLogicalType
        PUBLIC zgExtendedPANID
        PUBLIC zgIndirectMsgTimeout
        PUBLIC zgInit
        FUNCTION zgInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zgInitItems
        FUNCTION zgInitItems,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC zgMaxBcastRetires
        PUBLIC zgMaxDataRetries
        PUBLIC zgMaxPollFailureRetries
        PUBLIC zgNwkMgrMinTransmissions
        PUBLIC zgNwkMgrMode
        PUBLIC zgNwkMode
        PUBLIC zgNwkSrcRtgExpiryTime
        PUBLIC zgPassiveAckTimeout
        PUBLIC zgPollRate
        PUBLIC zgPreConfigKeys
        PUBLIC zgQueuedPollRate
        PUBLIC zgReadStartupOptions
        FUNCTION zgReadStartupOptions,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgRejoinPollRate
        PUBLIC zgResponsePollRate
        PUBLIC zgRouteDiscoveryTime
        PUBLIC zgRouteExpiryTime
        PUBLIC zgSapiEndpoint
        PUBLIC zgSecurePermitJoin
        PUBLIC zgSecurityMode
        PUBLIC zgSetItem
        FUNCTION zgSetItem,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgStackProfile
        PUBLIC zgStartDelay
        PUBLIC zgTrustCenterAddr
        PUBLIC zgUseDefaultTCLK
        PUBLIC zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
ZMacGetReq          SYMBOL "ZMacGetReq"
osal_memcpy         SYMBOL "osal_memcpy"
??ZMacGetReq?relay  SYMBOL "?relay", ZMacGetReq
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
CRCRC               SYMBOL "CRCRC"
??CRCRC?relay       SYMBOL "?relay", CRCRC
zgInit              SYMBOL "zgInit"
??zgInit?relay      SYMBOL "?relay", zgInit
zgInitItems         SYMBOL "zgInitItems"
??zgInitItems?relay SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
??zgReadStartupOptions?relay SYMBOL "?relay", zgReadStartupOptions
zgSetItem           SYMBOL "zgSetItem"
??zgSetItem?relay   SYMBOL "?relay", zgSetItem
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
??zgWriteStartupOptions?relay SYMBOL "?relay", zgWriteStartupOptions

        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??ZMacGetReq?relay
        FUNCTION ??ZMacGetReq?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Components\stack\sys\ZGlobals.c
//    1 /**************************************************************************************************
//    2   Filename:       ZGlobals.c
//    3   Revised:        $Date: 2010-08-18 18:19:45 -0700 (Wed, 18 Aug 2010) $
//    4   Revision:       $Revision: 23451 $
//    5 
//    6   Description:    User definable Z-Stack parameters.
//    7 
//    8 
//    9   Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "ZComDef.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "ZDObject.h"
//   47 #include "ZGlobals.h"
//   48 #include "ZDNwkMgr.h"
//   49 #include "OnBoard.h"
//   50 #include "ZDSecMgr.h"
//   51 
//   52 /*********************************************************************
//   53  * MACROS
//   54  */
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * TYPEDEFS
//   62  */
//   63 
//   64 typedef struct zgItem
//   65 {
//   66   uint16 id;
//   67   uint16 len;
//   68   void *buf;
//   69 } zgItem_t;
//   70 #if defined(FT_PAN_ID_C_R_C)
//   71 #if defined SENSOR_TYPE_Coord 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   72 uint16 ZG_BUILD_COORDINATOR_TYPE;
ZG_BUILD_COORDINATOR_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   73 uint16 ZG_BUILD_RTR_TYPE;
ZG_BUILD_RTR_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   74 uint16 ZG_BUILD_ENDDEVICE_TYPE;
ZG_BUILD_ENDDEVICE_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   75 uint16 ZG_BUILD_RTRONLY_TYPE;
ZG_BUILD_RTRONLY_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   76 uint16 ZG_BUILD_JOINING_TYPE;
ZG_BUILD_JOINING_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   77 uint16 DEVICE_LOGICAL_TYPE;
DEVICE_LOGICAL_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   78 uint16 ZSTACK_DEVICE_BUILD;
ZSTACK_DEVICE_BUILD:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   79 uint16 ZG_DEVICE_COORDINATOR_TYPE;
ZG_DEVICE_COORDINATOR_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   80 uint16 ZG_DEVICE_RTR_TYPE;
ZG_DEVICE_RTR_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   81 uint16 ZG_DEVICE_JOINING_TYPE;
ZG_DEVICE_JOINING_TYPE:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   82 #endif
//   83 #endif
//   84 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   85 void CRCRC(void)
CRCRC:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function CRCRC
//   86 {  
        FUNCALL CRCRC, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CRCRC, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CRCRC, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//   87  
//   88   uint16 nwk_data;
//   89  osal_nv_read(ZCD_NV_APP_CHANLIST,0,sizeof(nwk_data),&nwk_data);
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0xf
        MOV     R3,#0x4
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//   90   if(nwk_data>>8==0xaa) 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        JNZ     ??CRCRC_0
        MOV     A,#-0x56
        XRL     A,R1
??CRCRC_0:
        JNZ     ??CRCRC_1
//   91   {
//   92         zgDefaultChannelList = ((uint32)0X00000001<<(nwk_data&0x00ff));
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        SJMP    ??CRCRC_2
//   93        // printf("%s","RRRRRRRRRRRRRRRRRRRRRRRRRRR");
//   94    }
//   95   else
//   96   {   nwk_data=0XAA00;nwk_data+=CHANLIST_C_R_E; //Çå³ýÐ­µ÷Í¬¼¶Â·ÓÉ±êÖ¾²¢
??CRCRC_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x19
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x56
        MOVX    @DPTR,A
//   97      osal_nv_item_init( ZCD_NV_APP_CHANLIST,sizeof(nwk_data), &nwk_data ); 
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0xf
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//   98      osal_nv_write( ZCD_NV_APP_CHANLIST, 0, sizeof(nwk_data), &nwk_data );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0xf
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//   99      zgDefaultChannelList = ((uint32)0X00000001<<CHANLIST_C_R_E);
        MOV     DPTR,#__Constant_2000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
??CRCRC_2:
        MOV     DPTR,#zgDefaultChannelList
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  100   }
//  101   
//  102 #if defined(FT_PAN_ID_C_R_C)
//  103 #if defined SENSOR_TYPE_Coord 
//  104 if (ZDO_COORDINATOR)
//  105    ZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR);
//  106 #if defined ( RTR_NWK )
//  107 else
//  108   ZSTACK_DEVICE_BUILD=(DEVICE_BUILD_ROUTER);
        MOV     DPTR,#ZSTACK_DEVICE_BUILD
        LCALL   ?Subroutine3 & 0xFFFF
//  109 #else
//  110 else
//  111   ZSTACK_DEVICE_BUILD=(DEVICE_BUILD_ENDDEVICE);
//  112 #endif
//  113 #if (ZDO_COORDINATOR)
//  114 //uint16 nwk_data;
//  115  osal_nv_read(ZCD_NV_APP_C_R_C,0,sizeof(nwk_data),&nwk_data);
//  116  if((nwk_data&0XF000)==0X5000) //ÉèÖÃ³ÉÁË Â·ÓÉÆ÷Ä£Ê½ 
//  117    { ZSTACK_DEVICE_BUILD=(DEVICE_BUILD_ROUTER); //Í¬¼¶Â·ÓÉÉèÖÃ
//  118     //printf("%s","PPPPPPPPPPPPPPPPP");
//  119    }
//  120    else
//  121    {
//  122    if(nwk_data==0X0AAA) //ÇÐ»»µ½Ð­µ÷Í¬¼¶Â·ÓÉÆô¶¯
//  123    {    ZSTACK_DEVICE_BUILD=(DEVICE_BUILD_ROUTER); //Í¬¼¶Â·ÓÉÉèÖÃ
//  124       // printf("%s","IIIIIIIIIIIIIIIIIIIIIIIIII");
//  125          osal_nv_read(ZCD_NV_APP_C_R_C,0,sizeof(nwk_data),&nwk_data);
//  126          nwk_data=0X0BBB; //0X1BBB; Èç¹ûÊÇÐ­µ÷Æ÷  ÕâÀï¸Ä³ÉÏÂ´ÎÆô¶¯Ð­µ÷Æ÷£¬Èç¹ûÊÇÂ·ÓÉÆ÷ ²»»áµ½ÕâÀï
//  127         osal_nv_item_init( ZCD_NV_APP_C_R_C,sizeof(nwk_data), &nwk_data ); 
//  128         osal_nv_write( ZCD_NV_APP_C_R_C, 0, sizeof(nwk_data), &nwk_data );
//  129        // printf("%s","RRRRRRRRRRRRRRRRRRRRRRRRRRR");
//  130     }
//  131    }
//  132 #endif
//  133 ZG_BUILD_COORDINATOR_TYPE=(ZSTACK_DEVICE_BUILD & DEVICE_BUILD_COORDINATOR);
??CrossCallReturnLabel_6:
        MOV     DPTR,#ZG_BUILD_COORDINATOR_TYPE
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  134 ZG_BUILD_RTR_TYPE =(ZSTACK_DEVICE_BUILD & (DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER));
        MOV     DPTR,#ZG_BUILD_RTR_TYPE
        LCALL   ?Subroutine3 & 0xFFFF
//  135 ZG_BUILD_ENDDEVICE_TYPE=(ZSTACK_DEVICE_BUILD & DEVICE_BUILD_ENDDEVICE);
??CrossCallReturnLabel_7:
        MOV     DPTR,#ZG_BUILD_ENDDEVICE_TYPE
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  136 ZG_BUILD_RTRONLY_TYPE=(ZSTACK_DEVICE_BUILD == DEVICE_BUILD_ROUTER);
        MOV     DPTR,#ZG_BUILD_RTRONLY_TYPE
        MOV     A,#0x1
        LCALL   ??Subroutine5_0 & 0xFFFF
//  137 ZG_BUILD_JOINING_TYPE=(ZSTACK_DEVICE_BUILD & (DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE));
??CrossCallReturnLabel_2:
        MOV     DPTR,#ZG_BUILD_JOINING_TYPE
        LCALL   ?Subroutine3 & 0xFFFF
//  138 
//  139 if ( ZSTACK_DEVICE_BUILD == DEVICE_BUILD_COORDINATOR )
//  140 ZG_DEVICE_COORDINATOR_TYPE=1;
//  141 else
//  142 ZG_DEVICE_COORDINATOR_TYPE=(zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR);
??CrossCallReturnLabel_8:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        MOV     DPTR,#ZG_DEVICE_COORDINATOR_TYPE
        JNZ     ??CRCRC_3
        MOV     A,#0x1
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_3:
        SJMP    ??CRCRC_4
??CRCRC_3:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CRCRC_5
??CRCRC_4:
        MOV     DPTR,#ZG_DEVICE_RTR_TYPE
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        SJMP    ??CRCRC_6
??CRCRC_5:
        MOV     DPTR,#ZG_DEVICE_RTR_TYPE
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??CRCRC_6:
        MOVX    @DPTR,A
//  143 if ( ZSTACK_DEVICE_BUILD == (DEVICE_BUILD_ROUTER | DEVICE_BUILD_COORDINATOR) )
//  144 ZG_DEVICE_RTR_TYPE=1;
//  145 else
//  146 ZG_DEVICE_RTR_TYPE=((zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR) || (zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER));
//  147 if( ZG_BUILD_COORDINATOR_TYPE )DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR;
//  148 else if( ZG_BUILD_RTR_TYPE )DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER;
        MOV     DPTR,#DEVICE_LOGICAL_TYPE
        MOV     A,#0x1
        LCALL   ??Subroutine5_0 & 0xFFFF
//  149 else if( ZG_BUILD_ENDDEVICE_TYPE )DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE;
//  150 zgDeviceLogicalType= DEVICE_LOGICAL_TYPE;
??CrossCallReturnLabel_4:
        MOV     A,#0x1
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    @DPTR,A
//  151 ZG_DEVICE_JOINING_TYPE=((zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER) || (zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE));
        MOV     DPTR,#ZG_DEVICE_JOINING_TYPE
        LCALL   ??Subroutine5_0 & 0xFFFF
//  152 #endif
//  153 #endif
//  154 }
??CrossCallReturnLabel_5:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     A,#0x2
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
//  155 
//  156 
//  157 /*********************************************************************
//  158  * NWK GLOBAL VARIABLES
//  159  */
//  160 
//  161 // Polling values

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  162 uint16 zgPollRate = POLL_RATE;
zgPollRate:
        DS 2
        REQUIRE `?<Initializer for zgPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  163 uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
zgQueuedPollRate:
        DS 2
        REQUIRE `?<Initializer for zgQueuedPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  164 uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
zgResponsePollRate:
        DS 2
        REQUIRE `?<Initializer for zgResponsePollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  165 uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
zgRejoinPollRate:
        DS 2
        REQUIRE `?<Initializer for zgRejoinPollRate>`
        REQUIRE __INIT_XDATA_I
//  166 
//  167 // Transmission retries numbers

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  168 uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
zgMaxDataRetries:
        DS 1
        REQUIRE `?<Initializer for zgMaxDataRetries>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  169 uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
zgMaxPollFailureRetries:
        DS 1
        REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
        REQUIRE __INIT_XDATA_I
//  170 
//  171 // Default channel list

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  172 uint32 zgDefaultChannelList ;
zgDefaultChannelList:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  173 
//  174 // Default starting scan duration

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  175 uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
zgDefaultStartingScanDuration:
        DS 1
        REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
        REQUIRE __INIT_XDATA_I
//  176 
//  177 // Stack profile Id

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  178 uint8 zgStackProfile = STACK_PROFILE_ID;
zgStackProfile:
        DS 1
        REQUIRE `?<Initializer for zgStackProfile>`
        REQUIRE __INIT_XDATA_I
//  179 
//  180 // Default indirect message holding timeout

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  181 uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
zgIndirectMsgTimeout:
        DS 1
        REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
        REQUIRE __INIT_XDATA_I
//  182 
//  183 // Security mode

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  184 uint8 zgSecurityMode = ZG_SECURITY_MODE;
zgSecurityMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 // Secure permit join

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  187 uint8 zgSecurePermitJoin = true;
zgSecurePermitJoin:
        DS 1
        REQUIRE `?<Initializer for zgSecurePermitJoin>`
        REQUIRE __INIT_XDATA_I
//  188 
//  189 // Trust center address

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  190 uint16 zgTrustCenterAddr = ZG_TRUSTCENTER_ADDR;
zgTrustCenterAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  191 
//  192 // Route Discovery Time - amount of time that a route request lasts

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  193 uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
zgRouteDiscoveryTime:
        DS 1
        REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
        REQUIRE __INIT_XDATA_I
//  194 
//  195 // Route expiry

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  196 uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
zgRouteExpiryTime:
        DS 1
        REQUIRE `?<Initializer for zgRouteExpiryTime>`
        REQUIRE __INIT_XDATA_I
//  197 
//  198 // Extended PAN Id

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  199 uint8 zgExtendedPANID[Z_EXTADDR_LEN];
zgExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  200 
//  201 // Broadcast parameters

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  202 uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
zgMaxBcastRetires:
        DS 1
        REQUIRE `?<Initializer for zgMaxBcastRetires>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  203 uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
zgPassiveAckTimeout:
        DS 1
        REQUIRE `?<Initializer for zgPassiveAckTimeout>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  204 uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
zgBcastDeliveryTime:
        DS 1
        REQUIRE `?<Initializer for zgBcastDeliveryTime>`
        REQUIRE __INIT_XDATA_I
//  205 
//  206 // Network mode

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  207 uint8 zgNwkMode = NWK_MODE;
zgNwkMode:
        DS 1
        REQUIRE `?<Initializer for zgNwkMode>`
        REQUIRE __INIT_XDATA_I
//  208 
//  209 // Many-to-one values

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  210 uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
zgConcentratorEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  211 uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
zgConcentratorDiscoveryTime:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  212 uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
zgConcentratorRadius:
        DS 1
        REQUIRE `?<Initializer for zgConcentratorRadius>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  213 uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
zgConcentratorRC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  214 uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
zgNwkSrcRtgExpiryTime:
        DS 1
        REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
        REQUIRE __INIT_XDATA_I
//  215 
//  216 /*********************************************************************
//  217  * APS GLOBAL VARIABLES
//  218  */
//  219 
//  220 // The maximum number of retries allowed after a transmission failure

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  221 uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
zgApscMaxFrameRetries:
        DS 1
        REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
        REQUIRE __INIT_XDATA_I
//  222 
//  223 // The maximum number of seconds (milliseconds) to wait for an
//  224 // acknowledgement to a transmitted frame.
//  225 
//  226 // This number is used by polled devices.

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  227 uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
zgApscAckWaitDurationPolled:
        DS 2
        REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
        REQUIRE __INIT_XDATA_I
//  228 
//  229 // This number is used by non-polled devices in the following formula:
//  230 //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  231 uint8 zgApsAckWaitMultiplier = 2;
zgApsAckWaitMultiplier:
        DS 1
        REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
        REQUIRE __INIT_XDATA_I
//  232 
//  233 // The maximum number of milliseconds for the end device binding

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  234 uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
zgApsDefaultMaxBindingTime:
        DS 2
        REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
        REQUIRE __INIT_XDATA_I
//  235 
//  236 // The 64-big identifier of the network to join or form.
//  237 // Default set to all zeros

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  238 uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
zgApsUseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  239 
//  240 // A boolean flag that indicates whether it is OK to use insecure join
//  241 // on startup. Default set to true

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  242 uint8 zgApsUseInsecureJoin = TRUE;
zgApsUseInsecureJoin:
        DS 1
        REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
        REQUIRE __INIT_XDATA_I
//  243 
//  244 // The radius of broadcast multicast transmissions

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  245 uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
zgApsNonMemberRadius:
        DS 1
        REQUIRE `?<Initializer for zgApsNonMemberRadius>`
        REQUIRE __INIT_XDATA_I
//  246 
//  247 // The size of a tx window when using fragmentation

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  248 uint8 zgApsfMaxWindowSize = APSF_DEFAULT_WINDOW_SIZE;
zgApsfMaxWindowSize:
        DS 1
        REQUIRE `?<Initializer for zgApsfMaxWindowSize>`
        REQUIRE __INIT_XDATA_I
//  249 
//  250 // The delay between tx packets when using fragmentaition

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  251 uint16 zgApsfInterframeDelay = APSF_DEFAULT_INTERFRAME_DELAY;
zgApsfInterframeDelay:
        DS 2
        REQUIRE `?<Initializer for zgApsfInterframeDelay>`
        REQUIRE __INIT_XDATA_I
//  252 
//  253 /*********************************************************************
//  254  * SECURITY GLOBAL VARIABLES
//  255  */
//  256 
//  257 // If true, preConfigKey should be configured on all devices on the network
//  258 // If false, it is configured only on the coordinator and sent to other
//  259 // devices upon joining.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  260 uint8 zgPreConfigKeys = FALSE;// TRUE;
zgPreConfigKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  261 
//  262 // If true, defaultTCLinkKey should be configured on all devices on the
//  263 // network. If false, individual trust center link key between each device and
//  264 // the trust center should be manually configured via MT_WRITE_NV

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  265 uint8 zgUseDefaultTCLK = TRUE; // FALSE
zgUseDefaultTCLK:
        DS 1
        REQUIRE `?<Initializer for zgUseDefaultTCLK>`
        REQUIRE __INIT_XDATA_I
//  266 
//  267 /*********************************************************************
//  268  * ZDO GLOBAL VARIABLES
//  269  */
//  270 
//  271 // Configured PAN ID

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  272 uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
zgConfigPANID:
        DS 2
        REQUIRE `?<Initializer for zgConfigPANID>`
        REQUIRE __INIT_XDATA_I
//  273 
//  274 // Device Logical Type
//  275 
//  276 #if defined(FT_PAN_ID_C_R_C)

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  277 uint8 zgDeviceLogicalType ;
zgDeviceLogicalType:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  278 #else
//  279 uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
//  280 #endif
//  281 
//  282 // Startup Delay

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  283 uint8 zgStartDelay = START_DELAY;
zgStartDelay:
        DS 1
        REQUIRE `?<Initializer for zgStartDelay>`
        REQUIRE __INIT_XDATA_I
//  284 
//  285 #if !defined MT_TASK
//  286 // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().
//  287 uint8 zgZdoDirectCB = FALSE;
//  288 #endif
//  289 
//  290 // Min number of attempted transmissions for Channel Interference detection

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  291 uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
zgNwkMgrMinTransmissions:
        DS 1
        REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
        REQUIRE __INIT_XDATA_I
//  292 
//  293 /*********************************************************************
//  294  * APPLICATION GLOBAL VARIABLES
//  295  */
//  296 
//  297 // Network Manager Mode

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  298 uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
zgNwkMgrMode:
        DS 1
        REQUIRE `?<Initializer for zgNwkMgrMode>`
        REQUIRE __INIT_XDATA_I
//  299 
//  300 /*********************************************************************
//  301  * NON-STANDARD GLOBAL VARIABLES
//  302  */
//  303 
//  304 // Simple API Endpoint

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  305 uint8 zgSapiEndpoint = SAPI_ENDPOINT;
zgSapiEndpoint:
        DS 1
        REQUIRE `?<Initializer for zgSapiEndpoint>`
        REQUIRE __INIT_XDATA_I
//  306 
//  307 /*********************************************************************
//  308  * LOCAL VARIABLES
//  309  */
//  310 
//  311 /*********************************************************************
//  312  * ZGlobal Item Table
//  313  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA
//  314 static CONST zgItem_t zgItemTable[] =
zgItemTable:
        DW 0, 0, 0H
//  315 {
//  316 #if defined ( NV_INIT )
//  317 #if !defined MT_TASK
//  318   {
//  319     ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
//  320   },
//  321 #endif
//  322   {
//  323     ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
//  324   },
//  325   {
//  326     ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
//  327   },
//  328   {
//  329     ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
//  330   },
//  331   {
//  332     ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
//  333   },
//  334   {
//  335     ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
//  336   },
//  337   {
//  338     ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
//  339   },
//  340   {
//  341     ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
//  342   },
//  343   {
//  344     ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
//  345   },
//  346   {
//  347     ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
//  348   },
//  349   {
//  350     ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
//  351   },
//  352   {
//  353     ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
//  354   },
//  355   {
//  356     ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
//  357   },
//  358   {
//  359     ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
//  360   },
//  361   {
//  362     ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
//  363   },
//  364   {
//  365     ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
//  366   },
//  367   {
//  368     ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
//  369   },
//  370   {
//  371     ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
//  372   },
//  373   {
//  374     ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
//  375   },
//  376   {
//  377     ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
//  378   },
//  379   {
//  380     ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
//  381   },
//  382   {
//  383     ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
//  384   },
//  385   {
//  386     ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
//  387   },
//  388   {
//  389     ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
//  390   },
//  391 #ifndef NONWK
//  392   {
//  393     ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
//  394   },
//  395   {
//  396     ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
//  397   },
//  398   {
//  399     ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
//  400   },
//  401   {
//  402     ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
//  403   },
//  404   {
//  405     ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
//  406   },
//  407   {
//  408     ZCD_NV_TRUSTCENTER_ADDR, sizeof(zgTrustCenterAddr), &zgTrustCenterAddr
//  409   },
//  410 #endif // NONWK
//  411   {
//  412     ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
//  413   },
//  414   {
//  415     ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
//  416   },
//  417   {
//  418     ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
//  419   },
//  420   {
//  421     ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
//  422   },
//  423   {
//  424     ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
//  425   },
//  426   {
//  427     ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
//  428   },
//  429   {
//  430     ZCD_NV_APSF_WINDOW_SIZE, sizeof(zgApsfMaxWindowSize), &zgApsfMaxWindowSize
//  431   },
//  432   {
//  433     ZCD_NV_APSF_INTERFRAME_DELAY, sizeof(zgApsfInterframeDelay), &zgApsfInterframeDelay
//  434   },
//  435   {
//  436     ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
//  437   },
//  438   {
//  439     ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
//  440   },
//  441   {
//  442     ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
//  443   },
//  444   {
//  445     ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
//  446   },
//  447   {
//  448     ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
//  449   },
//  450 #endif // NV_INIT
//  451   // Last item -- DO NOT MOVE IT!
//  452   {
//  453     0x00, 0, NULL
//  454   }
//  455 };
//  456 
//  457 /*********************************************************************
//  458  * LOCAL FUNCTIONS
//  459  */
//  460 
//  461 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
//  462 static uint8 zgPreconfigKeyInit( uint8 setDefault );
//  463 
//  464 /*********************************************************************
//  465  * @fn       zgItemInit()
//  466  *
//  467  * @brief
//  468  *
//  469  *   Initialize a global item. If the item doesn't exist in NV memory,
//  470  *   write the system default (value passed in) into NV memory. But if
//  471  *   it exists, set the item to the value stored in NV memory.
//  472  *
//  473  *   Also, if setDefault is TRUE and the item exists, we will write
//  474  *   the default value to NV space.
//  475  *
//  476  * @param   id - item id
//  477  * @param   len - item len
//  478  * @param   buf - pointer to the item
//  479  * @param   setDefault - TRUE to set default, not read
//  480  *
//  481  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  482  *          exist in NV, NV_OPER_FAILED if failure.
//  483  */
//  484 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
//  485 {
//  486   uint8 status;
//  487 
//  488   // If the item doesn't exist in NV memory, create and initialize
//  489   // it with the value passed in.
//  490   status = osal_nv_item_init( id, len, buf );
//  491   if ( status == ZSUCCESS )
//  492   {
//  493     if ( setDefault )
//  494     {
//  495       // Write the default value back to NV
//  496       status = osal_nv_write( id, 0, len, buf );
//  497     }
//  498     else
//  499     {
//  500       // The item exists in NV memory, read it from NV memory
//  501       status = osal_nv_read( id, 0, len, buf );
//  502     }
//  503   }
//  504 
//  505   return (status);
//  506 }
//  507 
//  508 /*********************************************************************
//  509  * API FUNCTIONS
//  510  */
//  511 
//  512 /*********************************************************************
//  513  * @fn          zgInit
//  514  *
//  515  * @brief
//  516  *
//  517  *   Initialize the Z-Stack Globals. If an item doesn't exist in
//  518  *   NV memory, write the system default into NV memory. But if
//  519  *   it exists, set the item to the value stored in NV memory.
//  520  *
//  521  * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
//  522  *       that the Config state items (zgItemTable) need to be
//  523  *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
//  524  *
//  525  * @param       none
//  526  *
//  527  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  528  *              exist in NV, NV_OPER_FAILED if failure.
//  529  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  530 uint8 zgInit( void )
zgInit:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function zgInit
//  531 {
        FUNCALL zgInit, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  532   uint8  setDefault = FALSE;
        MOV     R6,#0x0
//  533 
//  534   // Do we want to default the Config state values
//  535   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   ??zgReadStartupOptions?relay
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JNC     ??zgInit_0
//  536   {
//  537     setDefault = TRUE;
        INC     R6
//  538   }
//  539 
//  540 #if 0
//  541   // Enable this section if you need to track the number of resets
//  542   // This section is normally disabled to minimize "wear" on NV memory
//  543   uint16 bootCnt = 0;
//  544 
//  545   // Update the Boot Counter
//  546   if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
//  547   {
//  548     // Get the old value from NV memory
//  549     osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  550   }
//  551 
//  552   // Increment the Boot Counter and store it into NV memory
//  553   if ( setDefault )
//  554     bootCnt = 0;
//  555   else
//  556     bootCnt++;
//  557   osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  558 #endif
//  559 
//  560   // Initialize the Extended PAN ID as my own extended address
//  561   ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
??zgInit_0:
        ; Setup parameters for call to function ZMacGetReq
        MOV     R2,#(zgExtendedPANID & 0xff)
        MOV     R3,#((zgExtendedPANID >> 8) & 0xff)
        MOV     R1,#-0x1e
        LCALL   ??ZMacGetReq?relay
//  562 
//  563   // Initialize the items table
//  564   zgInitItems( setDefault );
        ; Setup parameters for call to function zgInitItems
        MOV     A,R6
        MOV     R1,A
        LCALL   ??zgInitItems?relay
//  565 
//  566 #ifndef NONWK
//  567   if ( ZG_SECURE_ENABLED )
//  568   {
//  569     // Initialize the Pre-Configured Key to the default key
//  570     zgPreconfigKeyInit( setDefault );
//  571 
//  572     // Initialize NV items for all Keys: NWK, APS, TCLK and Master
//  573     ZDSecMgrInitNVKeyTables( setDefault );
//  574   }
//  575 #endif // NONWK
//  576 
//  577   // Clear the Config State default
//  578   if ( setDefault )
        MOV     A,R6
        JZ      ??zgInit_1
//  579   {
//  580     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x1
        MOV     R1,#0x0
        LCALL   ??zgWriteStartupOptions?relay
//  581   }
//  582 
//  583   return ( ZSUCCESS );
??zgInit_1:
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14
//  584 }
//  585 
//  586 /*********************************************************************
//  587  * @fn          zgInitItems
//  588  *
//  589  * @brief       Initializes RAM variables from NV.  If NV items don't
//  590  *              exist, then the NV is initialize with what is in RAM
//  591  *              variables.
//  592  *
//  593  * @param       none
//  594  *
//  595  * @return      none
//  596  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  597 void zgInitItems( uint8 setDefault )
zgInitItems:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function zgInitItems
//  598 {
        FUNCALL zgInitItems, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInitItems, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInitItems, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 5,R1
//  599   uint8  i = 0;
        MOV     ?V0 + 4,#0x0
        SJMP    ??zgInitItems_0
//  600 
//  601   while ( zgItemTable[i].id != 0x00 )
//  602   {
??zgInitItems_1:
        ; Setup parameters for call to function osal_nv_read
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_read?relay
??zgInitItems_2:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  603     // Initialize the item
//  604     zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
//  605 
//  606     // Move on to the next item
//  607     i++;
??zgInitItems_3:
        INC     ?V0 + 4
??zgInitItems_0:
        MOV     A,?V0 + 4
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        MOV     A,R2
        JNZ     ??zgInitItems_4
        MOV     A,R3
??zgInitItems_4:
        JZ      ??zgInitItems_5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V0 + 3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        MOV     R6,DPL
        MOV     R7,DPH
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??zgInitItems_3
        MOV     A,?V0 + 5
        MOV     R0,#?V0 + 2
        JNZ     $+5
        LJMP    ??zgInitItems_1 & 0xFFFF
        ; Setup parameters for call to function osal_nv_write
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_write?relay
        LJMP    ??zgInitItems_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 14)
//  608   }
//  609 }
??zgInitItems_5:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  610 
//  611 /*********************************************************************
//  612  * @fn          zgReadStartupOptions
//  613  *
//  614  * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
//  615  *
//  616  * @param       none
//  617  *
//  618  * @return      the ZCD_NV_STARTUP_OPTION NV item
//  619  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  620 uint8 zgReadStartupOptions( void )
zgReadStartupOptions:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function zgReadStartupOptions
//  621 {
        FUNCALL zgReadStartupOptions, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgReadStartupOptions, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  622   // Default to Use Config State and Use Network State
//  623   uint8 startupOption = 0;
        LCALL   ?Subroutine2 & 0xFFFF
//  624 
//  625   // This should have been done in ZMain.c, but just in case.
//  626   if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
//  627                               sizeof(startupOption),
//  628                               &startupOption ) == ZSUCCESS )
??CrossCallReturnLabel_9:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        JNZ     ??zgReadStartupOptions_0
//  629   {
//  630     // Read saved startup control
//  631     osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  632                   0,
//  633                   sizeof( startupOption ),
//  634                   &startupOption);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  635   }
//  636   return ( startupOption );
??zgReadStartupOptions_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  637 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
//  638 
//  639 /*********************************************************************
//  640  * @fn          zgWriteStartupOptions
//  641  *
//  642  * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
//  643  *
//  644  * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
//  645  *               clear bit. The set bit is an OR operation, and the
//  646  *               clear bit is an AND ~(bitOptions) operation.
//  647  *
//  648  * @param       bitOptions - which bits to perform action on:
//  649  *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
//  650  *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  651  *
//  652  * @return      ZSUCCESS if successful
//  653  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  654 uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
zgWriteStartupOptions:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function zgWriteStartupOptions
//  655 {
        FUNCALL zgWriteStartupOptions, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgWriteStartupOptions, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  656   uint8 status;
//  657   uint8 startupOptions = 0;
        LCALL   ?Subroutine2 & 0xFFFF
//  658 
//  659   status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  660                 0,
//  661                 sizeof( startupOptions ),
//  662                 &startupOptions );
??CrossCallReturnLabel_10:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
//  663 
//  664   if ( status == ZSUCCESS )
        JNZ     ??zgWriteStartupOptions_0
//  665   {
//  666     if ( action == ZG_STARTUP_SET )
        MOV     A,#-0x1
        XRL     A,R6
        JNZ     ??zgWriteStartupOptions_1
//  667     {
//  668       // Set bits
//  669       startupOptions |= bitOptions;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ORL     A,R7
        SJMP    ??zgWriteStartupOptions_2
//  670     }
//  671     else
//  672     {
//  673       // Clear bits
//  674       startupOptions &= (bitOptions ^ 0xFF);
??zgWriteStartupOptions_1:
        MOV     A,#-0x1
        XRL     A,R7
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,R2
//  675     }
//  676 
//  677     // Changed?
//  678     status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
//  679                  0,
//  680                  sizeof( startupOptions ),
//  681                  &startupOptions );
//  682   }
??zgWriteStartupOptions_2:
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  683 
//  684   return ( status );
??zgWriteStartupOptions_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock25
//  685 }
//  686 
//  687 /*********************************************************************
//  688  * @fn          zgSetItem
//  689  *
//  690  * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
//  691  *
//  692  * @param       id - NV ID
//  693  *              len - NV item length
//  694  *              buf - pointer to the input buffer
//  695  *
//  696  * @return      none
//  697  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  698 void zgSetItem( uint16 id, uint16 len, void *buf )
zgSetItem:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function zgSetItem
//  699 {
        FUNCALL zgSetItem, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  700 
//  701   uint8  i = 0;
        MOV     ?V0 + 2,#0x0
        SJMP    ??zgSetItem_0
//  702 
//  703   // Look up the NV item table
//  704   while ( zgItemTable[i].id != 0x00 )
//  705   {
//  706     if( zgItemTable[i].id == id )
//  707     {
//  708       if ( zgItemTable[i].len == len )
//  709       {
//  710         osal_memcpy( zgItemTable[i].buf, buf, len );
//  711       }
//  712       break;
//  713     }
//  714     // Move on to the next item
//  715     i++;
??zgSetItem_1:
        INC     ?V0 + 2
??zgSetItem_0:
        MOV     A,?V0 + 2
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R0
        JNZ     ??zgSetItem_2
        MOV     A,R1
??zgSetItem_2:
        JZ      ??zgSetItem_3
        MOV     A,R2
        XRL     A,R0
        JNZ     ??zgSetItem_4
        MOV     A,R3
        XRL     A,R1
??zgSetItem_4:
        JNZ     ??zgSetItem_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R4
        XRL     A,R0
        JNZ     ??zgSetItem_5
        MOV     A,R5
        XRL     A,R1
??zgSetItem_5:
        JNZ     ??zgSetItem_3
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  716   }
//  717 }
??zgSetItem_3:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     B,#0x6
        MUL     AB
        ADD     A,#(zgItemTable & 0xff)
        MOV     R0,A
        MOV     A,B
        ADDC    A,#((zgItemTable >> 8) & 0xff)
        MOV     R1,A
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgPollRate>`:
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgQueuedPollRate>`:
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgResponsePollRate>`:
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgRejoinPollRate>`:
        DW 440

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgMaxDataRetries>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgMaxPollFailureRetries>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgDefaultStartingScanDuratio`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgStackProfile>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgIndirectMsgTimeout>`:
        DB 7

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgSecurePermitJoin>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgRouteDiscoveryTime>`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgRouteExpiryTime>`:
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgMaxBcastRetires>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgPassiveAckTimeout>`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgBcastDeliveryTime>`:
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgNwkMode>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgConcentratorRadius>`:
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgNwkSrcRtgExpiryTime>`:
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApscMaxFrameRetries>`:
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApscAckWaitDurationPolled>`:
        DW 3000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApsAckWaitMultiplier>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApsDefaultMaxBindingTime>`:
        DW 16000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApsUseInsecureJoin>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApsNonMemberRadius>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApsfMaxWindowSize>`:
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgApsfInterframeDelay>`:
        DW 50

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgUseDefaultTCLK>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgConfigPANID>`:
        DW 4

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgStartDelay>`:
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgNwkMgrMinTransmissions>`:
        DB 20

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgNwkMgrMode>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zgSapiEndpoint>`:
        DB 224

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_2000000:
        DD 33554432

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CRCRC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CRCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zgInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zgInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zgInitItems?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zgInitItems

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zgReadStartupOptions?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zgReadStartupOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zgWriteStartupOptions?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zgWriteStartupOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zgSetItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zgSetItem

        END
//  718 
//  719 /*********************************************************************
//  720  * @fn       zgPreconfigKeyInit()
//  721  *
//  722  * @brief
//  723  *
//  724  *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
//  725  *   write the system default (value passed in) into NV memory. But if
//  726  *   it exists do not overwrite it.
//  727  *
//  728  *   Also, if setDefault is TRUE and the item exists, we will write
//  729  *   the default value to NV space.
//  730  *
//  731  * @param   setDefault - TRUE to set default
//  732  *
//  733  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  734  *          exist in NV, NV_OPER_FAILED if failure.
//  735  */
//  736 static uint8 zgPreconfigKeyInit( uint8 setDefault )
//  737 {
//  738   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  739   uint8 status;
//  740 
//  741   // Initialize the Pre-Configured Key to the default key
//  742   osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
//  743 
//  744   // If the item doesn't exist in NV memory, create and initialize it
//  745   status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
//  746   if ( status == ZSUCCESS )
//  747   {
//  748     if ( setDefault )
//  749     {
//  750       // Write the default value back to NV
//  751       status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
//  752     }
//  753   }
//  754 
//  755   // clear local copy of default key
//  756   osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
//  757 
//  758   return (status);
//  759 }
//  760 
//  761 /*********************************************************************
//  762 *********************************************************************/
// 
// 879 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   6 bytes in segment CODE_C
//  40 bytes in segment XDATA_I
//  40 bytes in segment XDATA_ID
//   4 bytes in segment XDATA_ROM_C
//  48 bytes in segment XDATA_Z
// 
// 961 bytes of CODE  memory
//   0 bytes of CONST memory (+ 4 bytes shared)
//  88 bytes of XDATA memory
//
//Errors: none
//Warnings: none
