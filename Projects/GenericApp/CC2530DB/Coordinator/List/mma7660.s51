///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            08/Jun/2018  08:41:59 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Sour /
//                          ce\mma7660.c                                      /
//    Command line       =  -f "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wCo /
//                          ord.cfg" (-DCPU32MHZ -DROOT=__near_func           /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\Tools\CC2530DB\f8wConfi /
//                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DNWK_START_DELAY=1000                /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=1000                       /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\win7\Desktop\ZSt /
//                          ack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\ /
//                          Projects\GenericApp\Source\mma7660.c" -D          /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D HAL_PA_LNA -D                      /
//                          SERIAL_SUPPORTED=DEBUG -D SENSOR_TYPE_Coord -D    /
//                          CHANLIST_C_R_E=25 -D ZDAPP_CONFIG_PAN_ID=0x0004   /
//                          -D FT_PAN_ID_C_R_C -D ZigBee_C_R_E_Engineering    /
//                          -D ZDO_COORDINATOR=0 -D xNV_RESTORE -lC           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" -lA                      /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\Coordinator\List\" --diag_suppress          /
//                          Pe001,Pa010 -o "C:\Users\win7\Desktop\ZStack´«¸ÐÆ /
//                          ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects /
//                          \GenericApp\CC2530DB\Coordinator\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\" -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã /
//                          ÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\Gen /
//                          ericApp\CC2530DB\..\SOURCE\" -I                   /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAIN\TI2530DB\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MT\" -I                 /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I  /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I       /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\AF\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\NWK\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SEC\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SAPI\" -I         /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\SYS\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\STACK\ZDO\" -I          /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\F8W\" -I           /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\ZMAC\" -I               /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SADDR\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\SERVICES\SDATA\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\INCLUDE\" -I        /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I     /
//                          "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐò /
//                          V2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC2 /
//                          530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\"   /
//                          -I "C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ /
//                          ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\ /
//                          CC2530DB\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\" -I "C:\Program Files (x86)\IAR      /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "C:\Program Files (x86)\IAR Systems\Embedded      /
//                          Workbench 5.4\8051\INC\CLIB\" -Ohz                /
//    List file          =  C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV /
//                          2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\CC25 /
//                          30DB\Coordinator\List\mma7660.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mma7660

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??FSL_MMA_IICRead?relay
        FUNCTION ??FSL_MMA_IICRead?relay,0203H
        PUBLIC ??FSL_MMA_IICWrite?relay
        FUNCTION ??FSL_MMA_IICWrite?relay,0203H
        PUBLIC ??IIC_ChkAck?relay
        FUNCTION ??IIC_ChkAck?relay,0203H
        PUBLIC ??IIC_OneClk?relay
        FUNCTION ??IIC_OneClk?relay,0203H
        PUBLIC ??IIC_ReadByteNCK?relay
        FUNCTION ??IIC_ReadByteNCK?relay,0203H
        PUBLIC ??IIC_Read_MMA7660_XYZ6?relay
        FUNCTION ??IIC_Read_MMA7660_XYZ6?relay,0203H
        PUBLIC ??IIC_RepeatedStart?relay
        FUNCTION ??IIC_RepeatedStart?relay,0203H
        PUBLIC ??IIC_SendByte?relay
        FUNCTION ??IIC_SendByte?relay,0203H
        PUBLIC ??IIC_Start?relay
        FUNCTION ??IIC_Start?relay,0203H
        PUBLIC ??IIC_Stop?relay
        FUNCTION ??IIC_Stop?relay,0203H
        PUBLIC ??MMA7660_Init?relay
        FUNCTION ??MMA7660_Init?relay,0203H
        PUBLIC ??MMA7660_Startup?relay
        FUNCTION ??MMA7660_Startup?relay,0203H
        PUBLIC ??mma7660_IICRead_Alert?relay
        FUNCTION ??mma7660_IICRead_Alert?relay,0203H
        PUBLIC ??mma_delay?relay
        FUNCTION ??mma_delay?relay,0203H
        PUBLIC FSL_MMA_IICRead
        FUNCTION FSL_MMA_IICRead,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC FSL_MMA_IICWrite
        FUNCTION FSL_MMA_IICWrite,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC IIC_ChkAck
        FUNCTION IIC_ChkAck,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_OneClk
        FUNCTION IIC_OneClk,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_ReadByteNCK
        FUNCTION IIC_ReadByteNCK,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC IIC_Read_MMA7660_XYZ6
        FUNCTION IIC_Read_MMA7660_XYZ6,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC IIC_RepeatedStart
        FUNCTION IIC_RepeatedStart,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_SendByte
        FUNCTION IIC_SendByte,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC IIC_Start
        FUNCTION IIC_Start,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_Stop
        FUNCTION IIC_Stop,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MMA7660_INTSU_Value
        PUBLIC MMA7660_Init
        FUNCTION MMA7660_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MMA7660_MODE_Value
        PUBLIC MMA7660_PDET_Value
        PUBLIC MMA7660_PD_Value
        PUBLIC MMA7660_SPCNT_Value
        PUBLIC MMA7660_SR_Value
        PUBLIC MMA7660_Startup
        FUNCTION MMA7660_Startup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK _A_P1
        PUBLIC mma7660_IICRead_Alert
        FUNCTION mma7660_IICRead_Alert,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC mma_delay
        FUNCTION mma_delay,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
FSL_MMA_IICRead     SYMBOL "FSL_MMA_IICRead"
??FSL_MMA_IICRead?relay SYMBOL "?relay", FSL_MMA_IICRead
FSL_MMA_IICWrite    SYMBOL "FSL_MMA_IICWrite"
??FSL_MMA_IICWrite?relay SYMBOL "?relay", FSL_MMA_IICWrite
IIC_ChkAck          SYMBOL "IIC_ChkAck"
??IIC_ChkAck?relay  SYMBOL "?relay", IIC_ChkAck
IIC_OneClk          SYMBOL "IIC_OneClk"
??IIC_OneClk?relay  SYMBOL "?relay", IIC_OneClk
IIC_ReadByteNCK     SYMBOL "IIC_ReadByteNCK"
??IIC_ReadByteNCK?relay SYMBOL "?relay", IIC_ReadByteNCK
IIC_Read_MMA7660_XYZ6 SYMBOL "IIC_Read_MMA7660_XYZ6"
??IIC_Read_MMA7660_XYZ6?relay SYMBOL "?relay", IIC_Read_MMA7660_XYZ6
IIC_RepeatedStart   SYMBOL "IIC_RepeatedStart"
??IIC_RepeatedStart?relay SYMBOL "?relay", IIC_RepeatedStart
IIC_SendByte        SYMBOL "IIC_SendByte"
??IIC_SendByte?relay SYMBOL "?relay", IIC_SendByte
IIC_Start           SYMBOL "IIC_Start"
??IIC_Start?relay   SYMBOL "?relay", IIC_Start
IIC_Stop            SYMBOL "IIC_Stop"
??IIC_Stop?relay    SYMBOL "?relay", IIC_Stop
MMA7660_Init        SYMBOL "MMA7660_Init"
??MMA7660_Init?relay SYMBOL "?relay", MMA7660_Init
MMA7660_Startup     SYMBOL "MMA7660_Startup"
??MMA7660_Startup?relay SYMBOL "?relay", MMA7660_Startup
mma7660_IICRead_Alert SYMBOL "mma7660_IICRead_Alert"
??mma7660_IICRead_Alert?relay SYMBOL "?relay", mma7660_IICRead_Alert
mma_delay           SYMBOL "mma_delay"
??mma_delay?relay   SYMBOL "?relay", mma_delay

// C:\Users\win7\Desktop\ZStack´«¸ÐÆ÷Í¸Ã÷´«ÊäÔ´³ÌÐòV2.45-13(´ø»ØÂë2018-5-20)\Projects\GenericApp\Source\mma7660.c
//    1 
//    2 #include  "mma7660.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//    3 
//    4 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    5 int MMA7660_SPCNT_Value;
MMA7660_SPCNT_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    6 int MMA7660_INTSU_Value;
MMA7660_INTSU_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    7 int MMA7660_MODE_Value;
MMA7660_MODE_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    8 int MMA7660_SR_Value;
MMA7660_SR_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//    9 int MMA7660_PDET_Value;
MMA7660_PDET_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   10 int MMA7660_PD_Value;
MMA7660_PD_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   11 void mma_delay(int time) ;
//   12 void IIC_OneClk(void);
//   13 int IIC_ReadByteNCK(void)  ;
//   14 
//   15 
//   16 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   17 void mma_delay(int time)                      //Time delay function
mma_delay:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function mma_delay
//   18 {             
        ; Saved register size: 0
        ; Auto size: 0
//   19     int i;
//   20     for (i=0; i<time; i++) ;                //Software loop for time delay
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??mma_delay_0
??mma_delay_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??mma_delay_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??mma_delay_1
//   21 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   22 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   23 void IIC_OneClk(void)                           //I2C CLK pin output one clock: CLK pin rises up before falls down
IIC_OneClk:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function IIC_OneClk
//   24 {                
        FUNCALL IIC_OneClk, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_OneClk, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_OneClk, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   25     mma_delay(Delay5us);
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x5
        LCALL   ?Subroutine5 & 0xFFFF
//   26     I2C_SCL=1;		        //I2C CLK pin output high(1)		
//   27     mma_delay(Delay10us);                   //Delay 10uS
//   28     I2C_SCL=0;                        //I2C CLK pin output low(0)
??CrossCallReturnLabel_2:
        CLR     0x90.3
//   29     mma_delay(Delay5us);	
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x5
        SJMP    ??Subroutine8_0
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
//   30 }
//   31 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   32 void IIC_Start(void) 
IIC_Start:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function IIC_Start
//   33 {                    
        FUNCALL IIC_Start, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Start, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Start, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   34     DATAOUT;                   //Set I2C DATA pin as output
        ORL     0xfe,#0x18
        MOV     A,0xfe
//   35    I2C_SCL=1;                    //I2C CLK pin output high(1)
        SETB    0x90.3
//   36     I2C_SDA=1; 	            //I2C DATA pin output high(1)
        SETB    0x90.4
//   37     mma_delay(Delay20us);                   //Delay 20uS
        ; Setup parameters for call to function mma_delay
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1
        REQUIRE P1DIR
//   38     I2C_SDA=0;                  //I2C DATA pin output low(0)
//   39     mma_delay(Delay10us);                   //Delay 10uS
//   40     I2C_SCL=0;                  //I2C CLK pin output low(0)
//   41     mma_delay(Delay10us);                   //Delay 10uS
//   42 }
//   43 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   44 void IIC_Stop (void)                            //I2C Stop signal generation: Data pin rises up when clock in is high
IIC_Stop:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function IIC_Stop
//   45 {                   
        FUNCALL IIC_Stop, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Stop, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   46     mma_delay(Delay10us);                   //Delay 10uS
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0xe
        LCALL   ?Subroutine5 & 0xFFFF
//   47     I2C_SCL=1;		           //I2C CLK pin output high(1)
//   48     mma_delay(Delay10us);                   //Delay 10uS
//   49     I2C_SDA=1;	                    //I2C DATA pin output high(1)
??CrossCallReturnLabel_3:
        SETB    0x90.4
//   50 }
        SJMP    ??Subroutine9_0
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
        SETB    0x90.3
        ; Setup parameters for call to function mma_delay
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0xe
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
        CLR     0x90.4
        ; Setup parameters for call to function mma_delay
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0xe
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
        CLR     0x90.3
        ; Setup parameters for call to function mma_delay
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0xe
        CFI EndBlock cfiBlock7
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
        CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//   51  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   52 void IIC_SendByte(int sData)                 //I2C send one byte out
IIC_SendByte:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function IIC_SendByte
//   53 {        
        FUNCALL IIC_SendByte, IIC_OneClk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   54     int i;
//   55     for (i=7; i>=0; i--)                        //Loop 8 times to send 8 bits
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
//   56     {                  
//   57 	if ((sData>>i)&0x01)                    //Judge output 1 or 0
??IIC_SendByte_0:
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     A,?V0 + 0
        MOV     R0,#?V0 + 2
        LCALL   ?SS_SHR
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        JNC     ??IIC_SendByte_1
//   58         {                
//   59 	  I2C_SDA=1;	                //I2C DATA pin output high(1) if output 1
        SETB    0x90.4
        SJMP    ??IIC_SendByte_2
//   60 	} 
//   61         else 
//   62         { 
//   63 	 I2C_SDA=0;                   //I2C DATA pin output low(0) if output 0
??IIC_SendByte_1:
        CLR     0x90.4
//   64 	}
//   65 	  IIC_OneClk();                         //Output one clock pulse after data pin is ready
??IIC_SendByte_2:
        ; Setup parameters for call to function IIC_OneClk
        LCALL   ??IIC_OneClk?relay
//   66     }		
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??IIC_SendByte_0
        CFI EndBlock cfiBlock10
//   67 }
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//   68 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   69 int  IIC_ChkAck(void)                     //Check I2C Acknowledgement signal
IIC_ChkAck:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function IIC_ChkAck
//   70 {     
        FUNCALL IIC_ChkAck, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ChkAck, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ChkAck, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ChkAck, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ChkAck, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ChkAck, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   71     DATAIN;                      //Set I2C DATA pin as input
        ANL     0xf4,#0xef
        ANL     0xfe,#0xef
//   72     mma_delay(Delay5us);
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
//   73      I2C_SCL=1;		        //I2C CLK pin output high(1)	
        SETB    0x90.3
//   74     mma_delay(Delay5us);                 //Delay 10uS
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
//   75     if (I2C_SDA)
        MOV     C,0x90.4
        MOV     R2,#0x5
        MOV     R3,#0x0
        JNC     ??IIC_ChkAck_0
//   76     {                 //Read I2C DATA pin
//   77       mma_delay(Delay5us);                  //Delay 5uS
        ; Setup parameters for call to function mma_delay
        LCALL   ?Subroutine3 & 0xFFFF
//   78      I2C_SCL=0;                     //I2C CLK pin output low(0)
//   79       mma_delay(Delay5us);                   //Delay 5us again
//   80       DATAOUT;                   //Set I2C DATA pin as output
//   81       I2C_SDA=0;                    //I2C DATA pin output low(0)
//   82       return 1;                             //Return 1 if read 1 from I2C DATA pin
??CrossCallReturnLabel_0:
        MOV     R2,#0x1
        SJMP    ??IIC_ChkAck_1
//   83     } 
//   84     else 
//   85     {                              //If I2C DATA pin is invalid for acknowledgement signal
//   86       mma_delay(Delay5us);                  //Delay 5uS
??IIC_ChkAck_0:
        ; Setup parameters for call to function mma_delay
        LCALL   ?Subroutine3 & 0xFFFF
//   87       I2C_SCL=0;                     //I2C CLK pin output low(0)
//   88       mma_delay(Delay5us);                  //Delay 5uS again
//   89      DATAOUT;                    //Set I2C DATA pin as output
//   90       I2C_SDA=0;                    //I2C DATA pin output low(0)
//   91       return 0;                             //Return 0 if read 0 from I2C DATA pin
??CrossCallReturnLabel_1:
        MOV     R2,#0x0
??IIC_ChkAck_1:
        MOV     R3,#0x0
//   92     }			
        SJMP    ??Subroutine9_0
        CFI EndBlock cfiBlock12
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
//   93     	
//   94     
//   95 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ??mma_delay?relay
        CLR     0x90.3
        ; Setup parameters for call to function mma_delay
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
        ORL     0xfe,#0x18
        MOV     A,0xfe
        CLR     0x90.4
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
//   96 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void IIC_RepeatedStart(void) 
IIC_RepeatedStart:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function IIC_RepeatedStart
//   98 {            //I2C Repeat Start signal generation: Data pin falls down when clock is high
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_RepeatedStart, mma_delay
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   99     mma_delay(Delay20us);                   //Delay 20uS
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
//  100     mma_delay(Delay20us);                   //Delay 20uS
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
//  101     I2C_SDA=1;	                     //I2C DATA pin output high(1)
        SETB    0x90.4
//  102     mma_delay(Delay10us);                   //Delay 10uS
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0xe
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
//  103     I2C_SCL=1;	                    //I2C CLK pin output high(1)
        SETB    0x90.3
//  104     mma_delay(Delay20us);                   //Delay 20uS
        ; Setup parameters for call to function mma_delay
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??mma_delay?relay
//  105     mma_delay(Delay20us);                   //Delay 20uS
        ; Setup parameters for call to function mma_delay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock16
        REQUIRE _A_P1
//  106     I2C_SDA=0;                       //I2C DATA pin output low(0)
//  107     mma_delay(Delay10us);                   //Delay 10uS
//  108     I2C_SCL=0;                       //I2C CLK pin output low(0)
//  109     mma_delay(Delay10us);                   //Delay 10uS	
//  110 }
//  111 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 int IIC_ReadByteNCK(void)               //Read one byte but do not send acknowledgement signal
IIC_ReadByteNCK:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function IIC_ReadByteNCK
//  113 {            
        FUNCALL IIC_ReadByteNCK, IIC_OneClk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ReadByteNCK, IIC_OneClk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  114     int i;
//  115     int data;
//  116     DATAIN;                    //Set I2C DATA pin as input
        ANL     0xf4,#0xef
        ANL     0xfe,#0xef
//  117     data = 0;                               //Prepare to receive data
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  118     for (i=7; i>=0; i--) 
        MOV     R6,#0x7
        MOV     R7,#0x0
//  119     {                  //Loop 8 times to receive 8 bits
//  120       if (I2C_SDA) 
??IIC_ReadByteNCK_0:
        MOV     C,0x90.4
        JNC     ??IIC_ReadByteNCK_1
//  121         data |= (0x01<<i);    //If read a 1, set to data bit
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ORL     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 3
        ORL     A,?V0 + 1
        MOV     ?V0 + 1,A
//  122       IIC_OneClk();
??IIC_ReadByteNCK_1:
        ; Setup parameters for call to function IIC_OneClk
        LCALL   ??IIC_OneClk?relay
//  123     }			                                //Output one clock pulse after a bit is read
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??IIC_ReadByteNCK_0
//  124 
//  125     DATAOUT;                    //Set I2C DATA pin as output
        ORL     0xfe,#0x18
        MOV     A,0xfe
//  126     I2C_SDA=1;                    //I2C DATA pin output high(1): no acknowledge
        SETB    0x90.4
//  127     IIC_OneClk();                           //Output one clock pulse after data pin is ready
        ; Setup parameters for call to function IIC_OneClk
        LCALL   ??IIC_OneClk?relay
//  128     I2C_SDA=0;                      //I2C DATA pin output low(0)
        CLR     0x90.4
//  129     return data;                            //Return received data
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock17
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
//  130 }
//  131 
//  132 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  133 void FSL_MMA_IICWrite(int RegAdd, int Data)          //Write one byte to a sensor register via I2C
FSL_MMA_IICWrite:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function FSL_MMA_IICWrite
//  134 {   
        FUNCALL FSL_MMA_IICWrite, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_ChkAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_ChkAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICWrite, IIC_ChkAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        LCALL   ?Subroutine4 & 0xFFFF
//  135     //Start
//  136     IIC_Start();                                        //Output a START signal
//  137 
//  138     // Device hardware address
//  139     IIC_SendByte(FSL_MMA_AddW);                         //Send one byte of sensor IIC address for writing
//  140     if (IIC_ChkAck()) 
??CrossCallReturnLabel_10:
        JNZ     ??FSL_MMA_IICWrite_0
        MOV     A,R3
??FSL_MMA_IICWrite_0:
        JZ      ??FSL_MMA_IICWrite_1
//  141     {                                 //Check acknowledge signal
//  142       #ifdef ACC_DEBUG	                                //Only for debug
//  143         prompt_trace(MOD_MMA, "# Device Write Address Error #\r\n");   //Print error information
//  144       #endif
//  145         IIC_Stop();	                                      //Output a STOP signal
??FSL_MMA_IICWrite_2:
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  146       return;                                           //If acknowledgement signal is read as 1, then return to end
        LJMP    ?Subroutine1 & 0xFFFF
//  147     }
//  148                                                       //If acknowledgement signal is read as 0, then go to next step
//  149     // Register address to read                         
//  150     IIC_SendByte(RegAdd);                               //Send one byte of register address in the sensor
??FSL_MMA_IICWrite_1:
        ; Setup parameters for call to function IIC_SendByte
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Subroutine10_0 & 0xFFFF
//  151     if (IIC_ChkAck()) 
??CrossCallReturnLabel_12:
        JNZ     ??FSL_MMA_IICWrite_3
        MOV     A,R3
??FSL_MMA_IICWrite_3:
        JNZ     ??FSL_MMA_IICWrite_2
//  152      {                                 //Check acknowledgement signal
//  153       #ifdef ACC_DEBUG	                                //Only for debug
//  154         prompt_trace(MOD_MMA, "# Sensor Reg Address NACK #\r\n");   //Print error information
//  155       #endif                                              
//  156         IIC_Stop();                                       //Output a STOP signal
//  157       return;    	                                      //If acknowledgement signal is read as 1, then return to end
//  158      }                                                     //If acknowledgement signal is read as 0, then go to next step
//  159 
//  160     // Data to send
//  161     IIC_SendByte(Data);                                 //Send one byte of data
        ; Setup parameters for call to function IIC_SendByte
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?Subroutine7 & 0xFFFF
//  162     if (IIC_ChkAck())
??CrossCallReturnLabel_14:
        SJMP    ??FSL_MMA_IICWrite_2
        CFI EndBlock cfiBlock18
//  163     {                                 //Check acknowledgement signal
//  164       #ifdef ACC_DEBUG	                                //Only for debug
//  165         prompt_trace(MOD_MMA, "# Sensor Data NACK #\r\n");    //Print error information
//  166       #endif
//  167         IIC_Stop();	                                      //Output a STOP signal
//  168       return;                                           //If acknowledgement signal is read as 1, then return to end
//  169     }
//  170                                                       //If acknowledgement signal is read as 0, then go to next step
//  171     // Stop	
//  172     IIC_Stop();	                                        //Output a STOP signal	
//  173 
//  174 }
//  175 
//  176 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 int FSL_MMA_IICRead(int RegAdd)              //Read a byte from sensor register via I2C
FSL_MMA_IICRead:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function FSL_MMA_IICRead
//  178 {                
        FUNCALL FSL_MMA_IICRead, IIC_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_ChkAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_ChkAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_RepeatedStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_ChkAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_ReadByteNCK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL FSL_MMA_IICRead, IIC_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        LCALL   ?Subroutine4 & 0xFFFF
//  179     int Data;
//  180 
//  181     //Start
//  182     IIC_Start();                                        //Output a START signal
//  183                                                       
//  184     // Device hardware address
//  185     IIC_SendByte(FSL_MMA_AddW);                         //Send a byte of sensor IIC address for writing
//  186     if (IIC_ChkAck()) 
??CrossCallReturnLabel_11:
        JNZ     ??FSL_MMA_IICRead_0
        MOV     A,R3
??FSL_MMA_IICRead_0:
        JZ      ??FSL_MMA_IICRead_1
//  187     {                                 //Check acknowledge signal 
//  188       #ifdef ACC_DEBUG	                                //Only for debug
//  189         prompt_trace(MOD_MMA, "# Device Write Address Error #\r\n");   //Print error information
//  190       #endif
//  191 	IIC_Stop();	                                      //Output a STOP signal	
??FSL_MMA_IICRead_2:
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  192 	return 0;                                         //If acknowledgement signal is read as 1, then return to end
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??FSL_MMA_IICRead_3
//  193     }
//  194                                                       //If acknowledgement signal is read as 0, then go to next step
//  195     // Register address to read
//  196     IIC_SendByte(RegAdd);                               //Send one byte of register address in the sensor
??FSL_MMA_IICRead_1:
        ; Setup parameters for call to function IIC_SendByte
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine10_0 & 0xFFFF
//  197     if (IIC_ChkAck()) 
??CrossCallReturnLabel_13:
        JNZ     ??FSL_MMA_IICRead_4
        MOV     A,R3
??FSL_MMA_IICRead_4:
        JNZ     ??FSL_MMA_IICRead_2
//  198     {                                 //Check acknowledge signal 
//  199     #ifdef ACC_DEBUG	                                //Only for debug
//  200       prompt_trace(MOD_MMA, "# Sensor Reg Address NACK #\r\n");   //Print error information
//  201     #endif
//  202       IIC_Stop();	                                      //Output a STOP signal	
//  203       return 0;                                         //If acknowledgement signal is read as 1, then return to end
//  204     }
//  205                                                       //If acknowledgement signal is read as 0, then go to next step
//  206     // Repeated Start
//  207     IIC_RepeatedStart();                                //Output a REPEAT START signal
        ; Setup parameters for call to function IIC_RepeatedStart
        LCALL   ??IIC_RepeatedStart?relay
//  208 	// IIC_Start(); 
//  209     // Device hardware address                          
//  210     IIC_SendByte(FSL_MMA_AddR);                         //Send the sensor IIC address for reading
        ; Setup parameters for call to function IIC_SendByte
        MOV     R2,#-0x67
        MOV     R3,#0x0
        LCALL   ?Subroutine7 & 0xFFFF
//  211     if (IIC_ChkAck()) 
//  212     {                                 //Check acknowledge signal 
//  213       #ifdef ACC_DEBUG	                                //Only for debug
//  214         prompt_trace(MOD_MMA, "# Device Read Address Error #\r\n");    //Print error information
//  215       #endif
//  216     }                                                 //If acknowledgement signal is read as 1, do nothing
//  217                                                       //If acknowledgement signal is read as 0, then go to next step
//  218     Data = IIC_ReadByteNCK();                           //Read one byte but do not output acknowledgement
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function IIC_ReadByteNCK
        LCALL   ??IIC_ReadByteNCK?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  219    // #ifdef ACC_DEBUG	                                //Only for debug
//  220      //  prompt_trace(MOD_MMA, "# Sensor Read Data = %d #\r\n", Data);   //Print received data
//  221     //#endif
//  222 
//  223     // Stop	
//  224     IIC_Stop();	                                        //Output a STOP signal
        ; Setup parameters for call to function IIC_Stop
        LCALL   ??IIC_Stop?relay
//  225     
//  226     return Data;                                        //Return received data
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CFI EndBlock cfiBlock19
??FSL_MMA_IICRead_3:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  227 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_10
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_11
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_12
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_13
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ??IIC_SendByte?relay
        ; Setup parameters for call to function IIC_ChkAck
        ; Setup parameters for call to function IIC_ChkAck
        ; Setup parameters for call to function IIC_ChkAck
        ; Setup parameters for call to function IIC_ChkAck
        ; Setup parameters for call to function IIC_ChkAck
        ; Setup parameters for call to function IIC_ChkAck
        LCALL   ??IIC_ChkAck?relay
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV     R7,A
        ; Setup parameters for call to function IIC_Start
        ; Setup parameters for call to function IIC_Start
        LCALL   ??IIC_Start?relay
        ; Setup parameters for call to function IIC_SendByte
        ; Setup parameters for call to function IIC_SendByte
        MOV     R2,#-0x68
        MOV     R3,#0x0
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,R2
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  228 void MMA7660_Init(void)
MMA7660_Init:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function MMA7660_Init
//  229 {
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MMA7660_Init, FSL_MMA_IICWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  230   FSL_MMA_IICWrite(MMA7660_MODE, 0);              //Make 7660 enter standby mode to set registers
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  231 
//  232   FSL_MMA_IICWrite(MMA7660_SPCNT, MMA7660_SPCNT_Value);//Sleep Counter Register: SPCNT
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     DPTR,#MMA7660_SPCNT_Value
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  233 //                                                  b00000000 :Default
//  234 //                                                  if SCPS = 0, Sleep clock is 64Hz~1Hz, maximum sleep time is 4s~256s
//  235 //                                                  if SCPS = 1, Sleep clock is 4Hz~1/16Hz, maximum sleep time is 64s~4096s
//  236   FSL_MMA_IICWrite(MMA7660_INTSU, MMA7660_INTSU_Value);//Interrupt Setup Register: INTSU
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     DPTR,#MMA7660_INTSU_Value
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  237 //                                                  b00000000 :Default
//  238 //                                                   ||||||||
//  239 //                                                   |||||||+- FBINT: Frount/Back position causes an interrupt or not
//  240 //                                                   ||||||+-- PLINT: Up/Down/Right/Left position causes an interrupt or not
//  241 //                                                   |||||+--- PDINT: Successful pulse detection causes an interrupt or not
//  242 //                                                   ||||+---- ASINT: Exiting Auto-Sleep causes an interrupt or not
//  243 //                                                   |||+----- GINT:  Every measurement causes an interrupt or not
//  244 //                                                   ||+------ SHINTX:Shake on X axis causes an interrupt and set the Shake bit in TILT register or not
//  245 //                                                   |+------- SHINTY:Shake on Y axis causes an interrupt and set the Shake bit in TILT register or not
//  246 //                                                   +-------- SHINTZ:Shake on Z axis causes an interrupt and set the Shake bit in TILT register or not
//  247   FSL_MMA_IICWrite(MMA7660_SR, MMA7660_SR_Value); //Sample Rates Register: SR
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     DPTR,#MMA7660_SR_Value
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  248 //                                                  b00000001 :Default
//  249 //                                                   ||||||||
//  250 //                                                   |||||+++- AMSR[2:0]: Sample rates in Active mode and Auto-Sleep mode
//  251 //                                                   |||++---- AWSR[1:0]: Sample rates in Auto-Wake mode
//  252 //                                                   +++------ FILT[2:0]: Tilt debounce filter
//  253   FSL_MMA_IICWrite(MMA7660_PDET, MMA7660_PDET_Value);//Pulse Detection Register: PDET
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     DPTR,#MMA7660_PDET_Value
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     R2,#0x9
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  254 //                                                  b00000000 :Default
//  255 //                                                   ||||||||
//  256 //                                                   |||+++++- PDTH[4:0]: Pulse detection threshold
//  257 //                                                   ||+------ XDA: 0-X axis is enabled for pulse detection; 1-disabled
//  258 //                                                   |+------- YDA: 0-Y axis is enabled for pulse detection; 1-disabled
//  259 //                                                   +-------- ZDA: 0-Z axis is enabled for pulse detection; 1-disabled
//  260   FSL_MMA_IICWrite(MMA7660_PD, MMA7660_PD_Value); //Pulse Debounce Count: PD
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     DPTR,#MMA7660_PD_Value
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  261 //                                                  b00000000 :Default
//  262 //                                                   ||||||||
//  263 //                                                   ++++++++- PD[7:0]: Pulse detection debounce filter
//  264   FSL_MMA_IICWrite(MMA7660_MODE, MMA7660_MODE_Value);//Mode Register: MODE
        ; Setup parameters for call to function FSL_MMA_IICWrite
        MOV     DPTR,#MMA7660_MODE_Value
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   ??FSL_MMA_IICWrite?relay
//  265 //                                                  b00000000 :Default
//  266 //                                                   ||||||||
//  267 //                                                   |||||||+- MODE:0-Standby or test mode; 1-Active mode
//  268 //                                                   ||||||+-- Reserved: 0
//  269 //                                                   |||||+--- TON: 0-Normal mode; 1-Test mode
//  270 //                                                   ||||+---- AWE: 0-Auto-Wake disabled; 1-Enabled
//  271 //                                                   |||+----- ASE: 0-Auto-Sleep disabled; 1-Enabled
//  272 //                                                   ||+------ SCPS:0-Sleep counter prescaler is divided by 1; 1-divided by 16
//  273 //                                                   |+------- IPP: 0-Interrupt output is open-drain; 1-push-pull
//  274 //                                                   +-------- IAH: 0-Interrupt is active low; 1-active high
//  275 }
        LJMP    ??Subroutine9_0 & 0xFFFF
        CFI EndBlock cfiBlock36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond38) CFA_SP SP+-5
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond39) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond39) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond39) CFA_SP SP+-5
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond40) CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond41) CFA_SP SP+-5
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond42) CFA_SP SP+-5
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
//  276 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 void MMA7660_Startup(void)
MMA7660_Startup:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function MMA7660_Startup
//  278 {
        FUNCALL MMA7660_Startup, MMA7660_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  279   MMA7660_SPCNT_Value = 240;     //Sleep delay = 60/16*16 = 60s
        MOV     DPTR,#MMA7660_SPCNT_Value
        MOV     A,#-0x10
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  280   MMA7660_INTSU_Value = 0x10;   //Only Front/Back position change and Up/Down/Right/Left Position change cause interrupts
        MOV     DPTR,#MMA7660_INTSU_Value
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  281   MMA7660_SR_Value = 0xF1;      //FILT[2:0] = 111 - 8 samples per filter
        MOV     DPTR,#MMA7660_SR_Value
        MOV     A,#-0xf
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  282                                 //AWSR[1:0] = 11  - 1 samples/second on auto-wake mode
//  283                                 //AMSR[2:0] = 100 - 8 samples/second on active mode
//  284   MMA7660_MODE_Value = 0x39;    //Interrupt output high active
        MOV     DPTR,#MMA7660_MODE_Value
        MOV     A,#0x39
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  285                                 //Interrupt output open drain
//  286                                 //Sleep counter clock divided by 16
//  287                                 //Auto-Sleep enabled
//  288                                 //Auto-Wake enabled
//  289                                 //Test Mode off
//  290                                 //Active Mode
//  291   MMA7660_Init();
        ; Setup parameters for call to function MMA7660_Init
        LCALL   ??MMA7660_Init?relay
//  292 }
        LJMP    ??Subroutine9_0 & 0xFFFF
        CFI EndBlock cfiBlock44
//  293 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  294 int mma7660_IICRead_Alert(int RegAdd)
mma7660_IICRead_Alert:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function mma7660_IICRead_Alert
//  295 {
        FUNCALL mma7660_IICRead_Alert, FSL_MMA_IICRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  296 
//  297   int temp8u;
//  298   
//  299   do{
//  300     temp8u = FSL_MMA_IICRead(RegAdd);
??mma7660_IICRead_Alert_0:
        ; Setup parameters for call to function FSL_MMA_IICRead
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??FSL_MMA_IICRead?relay
//  301   } while (temp8u&0x40);
        MOV     A,R2
        ANL     A,#0x40
        JNZ     ??mma7660_IICRead_Alert_0
//  302   return temp8u;
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock45
//  303 }
//  304 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 void IIC_Read_MMA7660_XYZ6(int *pX, int *pY, int *pZ)
IIC_Read_MMA7660_XYZ6:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function IIC_Read_MMA7660_XYZ6
//  306 {
        FUNCALL IIC_Read_MMA7660_XYZ6, mma7660_IICRead_Alert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Read_MMA7660_XYZ6, mma7660_IICRead_Alert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_Read_MMA7660_XYZ6, mma7660_IICRead_Alert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
//  307     *pX = (int)mma7660_IICRead_Alert(MMA7660_XOUT);
        ; Setup parameters for call to function mma7660_IICRead_Alert
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??mma7660_IICRead_Alert?relay
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  308     //Sign extend
//  309    // if (*pX&0x20) *pX |= 0xC0;  
//  310     *pY = (int)mma7660_IICRead_Alert(MMA7660_YOUT);  
        ; Setup parameters for call to function mma7660_IICRead_Alert
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??mma7660_IICRead_Alert?relay
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  311     //Sign extend
//  312     //if (*pY&0x20) *pY |= 0xC0;  
//  313     *pZ = (int)mma7660_IICRead_Alert(MMA7660_ZOUT);  
        ; Setup parameters for call to function mma7660_IICRead_Alert
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??mma7660_IICRead_Alert?relay
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  314     //Sign extend
//  315     //if (*pZ&0x20) *pZ |= 0xC0;  
//  316 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock46

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mma_delay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mma_delay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_OneClk?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_OneClk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_SendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_ChkAck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_ChkAck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_RepeatedStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_RepeatedStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_ReadByteNCK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_ReadByteNCK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??FSL_MMA_IICWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    FSL_MMA_IICWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??FSL_MMA_IICRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    FSL_MMA_IICRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MMA7660_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MMA7660_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MMA7660_Startup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MMA7660_Startup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mma7660_IICRead_Alert?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mma7660_IICRead_Alert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_Read_MMA7660_XYZ6?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_Read_MMA7660_XYZ6

        END
//  317 
// 
// 772 bytes in segment BANKED_CODE
//  84 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//  12 bytes in segment XDATA_Z
// 
// 856 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 3 bytes shared)
//  12 bytes of XDATA memory
//
//Errors: none
//Warnings: none
